<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Josiah Parry</title>
    <link>https://josiahparry.github.io/post/</link>
    <description>Recent content in Posts on Josiah Parry</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 -0500</lastBuildDate>
    <atom:link href="/post/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introducing geniusR</title>
      <link>https://josiahparry.github.io/post/introducing-geniusr/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://josiahparry.github.io/post/introducing-geniusr/</guid>
      <description>&lt;div id=&#34;introducing-geniusr&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introducing geniusR&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;geniusR&lt;/code&gt; enables quick and easy download of song lyrics. The intent behind the package is to be able to perform text based analyses on songs in a tidy[text] format.&lt;/p&gt;
&lt;p&gt;This package was inspired by the release of Kendrick Lamar’s most recent album, &lt;strong&gt;DAMN.&lt;/strong&gt;. As most programmers do, I spent way too long to simplify a task, that being accessing song lyrics. Genius (formerly Rap Genius) is the most widly accessible platform for lyrics.&lt;/p&gt;
&lt;p&gt;The functions in this package enable easy access of individual song lyrics, album tracklists, and lyrics to whole albums.&lt;/p&gt;
&lt;div id=&#34;individual-songs-genius_lyrics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Individual songs &lt;code&gt;genius_lyrics()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Getting lyrics to a single song is pretty easy. Let’s get in our &lt;strong&gt;ELEMENT.&lt;/strong&gt; and checkout &lt;strong&gt;DNA.&lt;/strong&gt;. But first, note that the &lt;code&gt;genius_lyrics()&lt;/code&gt; function takes two arguments, &lt;code&gt;artist&lt;/code&gt; and &lt;code&gt;song&lt;/code&gt;. Be sure to spell the name of the artist and the song correctly, but don’t worry about capitalization.&lt;/p&gt;
&lt;p&gt;First, let’s set up our libraries / working environment.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;prettyprint&#34;&gt;
devtools::install_github(&#34;josiahparry/geniusR&#34;)
library(geniusR)
library(tidyverse)
library(tidytext)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;genius_lyrics()&lt;/code&gt; returns only the barebones. Utilizing &lt;code&gt;dplyr&lt;/code&gt; we can also create a new variable with the line number to help in future &lt;a href=&#34;https://github.com/juliasilge/tidytext&#34;&gt;tidytext&lt;/a&gt; analysis. This will be covered in a later vignette / post.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;prettyprint &#34;&gt;DNA &amp;lt;- genius_lyrics(artist = &amp;quot;Kendrick Lamar&amp;quot;, song = &amp;quot;DNA.&amp;quot;)
DNA %&amp;gt;%
  mutate(line = row_number())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 99 x 2
##    text                                                              line
##    &amp;lt;chr&amp;gt;                                                            &amp;lt;int&amp;gt;
##  1 I got, I got, I got, I got—                                          1
##  2 Loyalty, got royalty inside my DNA                                   2
##  3 Cocaine quarter piece, got war and peace inside my DNA               3
##  4 I got power, poison, pain and joy inside my DNA                      4
##  5 I got hustle though, ambition flow inside my DNA                     5
##  6 I was born like this, since one like this, immaculate conception     6
##  7 I transform like this, perform like this, was Yeshua new weapon      7
##  8 I don&#39;t contemplate, I meditate, then off your fucking head          8
##  9 This that put-the-kids-to-bed                                        9
## 10 This that I got, I got, I got, I got—                               10
## # ... with 89 more rows
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;album-level-information&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Album Level Information&lt;/h2&gt;
&lt;div id=&#34;tracklists&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Tracklists&lt;/h3&gt;
&lt;p&gt;There are two key functions to be utilized at the album level: &lt;code&gt;genius_tracklist()&lt;/code&gt; and &lt;code&gt;genius_album()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I often only know an album name and none of the track titles. Often I only know the position in the tracklist. For this reason, I created a tool to provide an album tracklist. This function, &lt;code&gt;genius_tracklist()&lt;/code&gt; takes the arguments &lt;code&gt;artist&lt;/code&gt; and &lt;code&gt;album&lt;/code&gt;. Simple enough, right?&lt;/p&gt;
&lt;p&gt;Let’s get the tracklist for the original release of &lt;strong&gt;DAMN.&lt;/strong&gt;. However, real Kendrick fans know that the album was intended to be listened to in chronological &lt;em&gt;and&lt;/em&gt; reverse order—as is on the collector’s release.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;prettyprint &#34;&gt;damn_tracks &amp;lt;- genius_tracklist(artist = &amp;quot;Kendrick Lamar&amp;quot;, album = &amp;quot;DAMN.&amp;quot;)

# Collector&#39;s reverse order
damn_tracks %&amp;gt;%
  arrange(-track_n)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 14 x 2
##    title                  track_n
##    &amp;lt;chr&amp;gt;                    &amp;lt;int&amp;gt;
##  1 DUCKWORTH.               14
##  2 GOD.                     13
##  3 FEAR.                    12
##  4 XXX. (Ft. U2)            11
##  5 LOVE. (Ft. Zacari)       10
##  6 LUST.                     9
##  7 HUMBLE.                   8
##  8 PRIDE.                    7
##  9 LOYALTY. (Ft. Rihanna)    6
## 10 FEEL.                     5
## 11 ELEMENT.                  4
## 12 YAH.                      3
## 13 DNA.                      2
## 14 BLOOD.                    1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;album-lyrics&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Album Lyrics&lt;/h3&gt;
&lt;p&gt;If lyrics for a full album are what you desire, look no further than &lt;code&gt;genius_album()&lt;/code&gt;. With a little help from &lt;a href=&#34;https://github.com/tidyverse/purrr&#34;&gt;&lt;code&gt;purrr&lt;/code&gt;&lt;/a&gt; you can avoid the annoying iterations! &lt;code&gt;genius_album()&lt;/code&gt; is designed for simple use. Provide it with only two argument—&lt;code&gt;artist&lt;/code&gt; and &lt;code&gt;album&lt;/code&gt;—and you’ll have lyrics in no time!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;genius_album()&lt;/code&gt; returns a tibble with a column of nested data frames where each song’s lyrics are contained. Nesting the lyrics was done to have a less cluttered data frame. You can unnest the lyrics by setting &lt;code&gt;nested = FALSE&lt;/code&gt;. Alternatively, you can pipe it into an &lt;code&gt;unnest()&lt;/code&gt; call.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;prettyprint &#34;&gt;DAMN &amp;lt;- genius_album(artist = &amp;quot;Kendrick Lamar&amp;quot;, album = &amp;quot;DAMN.&amp;quot;, nested = FALSE)

# Alternative method
#genius_album(artist = &amp;quot;Kendrick Lamar&amp;quot;, album = &amp;quot;DAMN.&amp;quot;) %&amp;gt;%
#  unnest(lyrics)

head(DAMN)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   title  track_n text                                                 line
##   &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                                               &amp;lt;int&amp;gt;
## 1 BLOOD.       1 Is it wickedness?                                       1
## 2 BLOOD.       1 Is it weakness?                                         2
## 3 BLOOD.       1 You decide                                              3
## 4 BLOOD.       1 Are we gonna live or die?                               4
## 5 BLOOD.       1 &amp;quot;So I was takin&#39; a walk the other day, and I seen …     5
## 6 BLOOD.       1 {Gunshot}                                               6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bam. Easy peasy. Now you have a sweet data frame ready for a tidy text analysis!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
