<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Josiah Parry on Josiah Parry</title>
    <link>/</link>
    <description>Recent content in Josiah Parry on Josiah Parry</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 -0400</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>∑ { my parts }</title>
      <link>/post/my-parts/</link>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/my-parts/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

terrorists &amp;lt;- googlesheets::gs_url(&amp;quot;https://docs.google.com/spreadsheets/d/1LYQakIwGosibDHJKJqZgjM39qpSlp_gFG29zJ6paDAI/edit#gid=956062857&amp;quot;) %&amp;gt;% 
  googlesheets::gs_read()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-08-04-my-parts_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;terrorist_by_race&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 6
##   race                n fatalities injured total_victims   `%`
##   &amp;lt;chr&amp;gt;           &amp;lt;int&amp;gt;      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 white              63        554    1067          1621 69.3 
## 2 other               5         90     115           205  8.77
## 3 black              19        108      89           197  8.43
## 4 asian               8         77      33           110  4.70
## 5 unclear             6         40      61           101  4.32
## 6 latino             10         44      33            77  3.29
## 7 native american     3         19       8            27  1.15&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-08-04-my-parts_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;terrorist_by_gender&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 6
##   gender            n fatalities injured total_victims    `%`
##   &amp;lt;chr&amp;gt;         &amp;lt;int&amp;gt;      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 male            110        903    1380          2283 97.6  
## 2 male &amp;amp; female     1         14      21            35  1.50 
## 3 female            3         15       5            20  0.855&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;terrorist &amp;lt;- c(&amp;quot;angry&amp;quot;, &amp;quot;white&amp;quot;, &amp;quot;male&amp;quot;)
my_parts &amp;lt;- c(&amp;quot;angry&amp;quot;, &amp;quot;white&amp;quot;, &amp;quot;male&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my_parts == terrorist&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE TRUE TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;`I am` &amp;gt; sum(parts)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;`I am` == sum(terrorist)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;white_males &amp;lt;- filter(terrorists,
                      race == &amp;quot;white&amp;quot;,
                      tolower(gender) == &amp;quot;male&amp;quot;,
                      !is.na(name))

pull(white_males, name)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Jordan Witmer&amp;quot;             &amp;quot;Zephen A. Xaver&amp;quot;          
##  [3] &amp;quot;Robert D. Bowers&amp;quot;          &amp;quot;Jarrod W. Ramos&amp;quot;          
##  [5] &amp;quot;Dimitrios Pagourtzis&amp;quot;      &amp;quot;Travis Reinking&amp;quot;          
##  [7] &amp;quot;Nikolas J. Cruz&amp;quot;           &amp;quot;Timothy O&amp;#39;Brien Smith&amp;quot;    
##  [9] &amp;quot;Kevin Janson Neal&amp;quot;         &amp;quot;Devin Patrick Kelley&amp;quot;     
## [11] &amp;quot;Scott Allen Ostrem&amp;quot;        &amp;quot;Stephen Craig Paddock&amp;quot;    
## [13] &amp;quot;Randy Stair&amp;quot;               &amp;quot;Thomas Hartless&amp;quot;          
## [15] &amp;quot;Jason B. Dalton&amp;quot;           &amp;quot;Robert Lewis Dear&amp;quot;        
## [17] &amp;quot;Noah Harpham&amp;quot;              &amp;quot;Dylann Storm Roof&amp;quot;        
## [19] &amp;quot;Elliot Rodger&amp;quot;             &amp;quot;John Zawahri&amp;quot;             
## [21] &amp;quot;Kurt Myers&amp;quot;                &amp;quot;Adam Lanza&amp;quot;               
## [23] &amp;quot;Andrew Engeldinger&amp;quot;        &amp;quot;Wade Michael Page&amp;quot;        
## [25] &amp;quot;James Holmes&amp;quot;              &amp;quot;Ian Stawicki&amp;quot;             
## [27] &amp;quot;Scott Evans Dekraai&amp;quot;       &amp;quot;Jared Loughner&amp;quot;           
## [29] &amp;quot;Robert Stewart&amp;quot;            &amp;quot;Wesley Neal Higdon&amp;quot;       
## [31] &amp;quot;Steven Kazmierczak&amp;quot;        &amp;quot;Robert A. Hawkins&amp;quot;        
## [33] &amp;quot;Tyler Peterson&amp;quot;            &amp;quot;Sulejman Talović\u0087&amp;quot;   
## [35] &amp;quot;Charles Carl Roberts&amp;quot;      &amp;quot;Kyle Aaron Huff&amp;quot;          
## [37] &amp;quot;Terry Michael Ratzmann&amp;quot;    &amp;quot;Nathan Gale&amp;quot;              
## [39] &amp;quot;Douglas Williams&amp;quot;          &amp;quot;Michael McDermott&amp;quot;        
## [41] &amp;quot;Larry Gene Ashbrook&amp;quot;       &amp;quot;Day trader Mark O. Barton&amp;quot;
## [43] &amp;quot;Eric Harris&amp;quot;               &amp;quot;Kipland P. Kinkel&amp;quot;        
## [45] &amp;quot;Mitchell Scott Johnson&amp;quot;    &amp;quot;Matthew Beck&amp;quot;             
## [47] &amp;quot;Dean Allen Mellberg&amp;quot;       &amp;quot;Kenneth Junior French&amp;quot;    
## [49] &amp;quot;Gian Luigi Ferri&amp;quot;          &amp;quot;John T. Miller&amp;quot;           
## [51] &amp;quot;Eric Houston&amp;quot;              &amp;quot;Thomas McIlvane&amp;quot;          
## [53] &amp;quot;George Hennard&amp;quot;            &amp;quot;Joseph T. Wesbecker&amp;quot;      
## [55] &amp;quot;Patrick Purdy&amp;quot;             &amp;quot;Richard Farley&amp;quot;           
## [57] &amp;quot;William Cruse&amp;quot;             &amp;quot;Patrick Sherrill&amp;quot;         
## [59] &amp;quot;James Oliver Huberty&amp;quot;      &amp;quot;Abdelkrim Belachheb&amp;quot;      
## [61] &amp;quot;Carl Robert Brown&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;am_i &amp;lt;- function(terrorist) {
  msg &amp;lt;- paste(&amp;quot;`I am` ==&amp;quot;, terrorist)
  print(msg)
  print(`I am` == terrorist)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pull(white_males, name) %&amp;gt;% 
  walk(~am_i(.))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;`I am` == Jordan Witmer&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Zephen A. Xaver&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Robert D. Bowers&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Jarrod W. Ramos&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Dimitrios Pagourtzis&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Travis Reinking&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Nikolas J. Cruz&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Timothy O&amp;#39;Brien Smith&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Kevin Janson Neal&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Devin Patrick Kelley&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Scott Allen Ostrem&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Stephen Craig Paddock&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Randy Stair&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Thomas Hartless&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Jason B. Dalton&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Robert Lewis Dear&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Noah Harpham&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Dylann Storm Roof&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Elliot Rodger&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == John Zawahri&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Kurt Myers&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Adam Lanza&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Andrew Engeldinger&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Wade Michael Page&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == James Holmes&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Ian Stawicki&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Scott Evans Dekraai&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Jared Loughner&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Robert Stewart&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Wesley Neal Higdon&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Steven Kazmierczak&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Robert A. Hawkins&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Tyler Peterson&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Sulejman Talović\u0087&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Charles Carl Roberts&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Kyle Aaron Huff&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Terry Michael Ratzmann&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Nathan Gale&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Douglas Williams&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Michael McDermott&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Larry Gene Ashbrook&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Day trader Mark O. Barton&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Eric Harris&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Kipland P. Kinkel&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Mitchell Scott Johnson&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Matthew Beck&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Dean Allen Mellberg&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Kenneth Junior French&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Gian Luigi Ferri&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == John T. Miller&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Eric Houston&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Thomas McIlvane&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == George Hennard&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Joseph T. Wesbecker&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Patrick Purdy&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Richard Farley&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == William Cruse&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Patrick Sherrill&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == James Oliver Huberty&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Abdelkrim Belachheb&amp;quot;
## [1] FALSE
## [1] &amp;quot;`I am` == Carl Robert Brown&amp;quot;
## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;`I am` &amp;gt; sum(my_parts)&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Google Trends for Campaigns</title>
      <link>/post/trendyy-4-campaigns/</link>
      <pubDate>Tue, 11 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/trendyy-4-campaigns/</guid>
      <description>


&lt;p&gt;Over the past few years we have seen Google Trends becoming quite ubiquitous in politics. Pundits have used Google seach trends as talking points. It is not uncommon to hear news about a candidates search trends the days following a town hall or significant rally. It seems that Google trends are becoming the go to proxy for a candidate’s salience.&lt;/p&gt;
&lt;p&gt;As a campaign, you are interested in the popularity of a candidate &lt;em&gt;relative&lt;/em&gt; to another one. If candidate A has seen a gain from 50 to 70, that is all well and good. But how does that compare with candidates C and D? There are others potential use cases—that may be less fraught with media interruptions. For example, one can keep track of the popularity of possible policy issues—i.e. healthcare, gun safety, women’s rights.&lt;/p&gt;
&lt;p&gt;Though the usefulness of Google Trends search popularity is still unclear, it may be something that your campaign might like to track. In this chapter we will explore how to acquire and utilize trend data using R. This chapter will describe how one can utilize Google Trends data to compare candidate search popularity and view related search terms. This will be done with the tidyverse, and the package &lt;code&gt;trendyy&lt;/code&gt; for accessing this data.&lt;/p&gt;
&lt;div id=&#34;google-trends-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Google Trends Data&lt;/h2&gt;
&lt;div id=&#34;relative-popularity&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Relative Popularity&lt;/h3&gt;
&lt;p&gt;The key metric that Google Trends provides is the &lt;em&gt;relative&lt;/em&gt; popularity of a search term by a given geography. Relative search popularity is scaled from 0 to 100. This number is scaled based on population and geography size (for more information go &lt;a href=&#34;https://support.google.com/trends/answer/4365533?hl=en&#34;&gt;here&lt;/a&gt;). This number may be useful on it’s own, but the strength of Google Trends is it’s ability to compare multiple terms. Using Google Trends we can compare up to 5 search terms—presumably candidates.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;related-queries&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Related Queries&lt;/h3&gt;
&lt;p&gt;In addition to popularity, Google Trends provides you with related queries. This can help your media team understand in what context their candidate is being associated online.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;trendyy&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;trendyy&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Now that we have an intuition of how Google Trends may be utilized, we will look at how actually acquire these data in R. To get started install the package using &lt;code&gt;install.packages(&amp;quot;trendyy&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once the package is installed, load the &lt;code&gt;tidyverse&lt;/code&gt; and &lt;code&gt;trendyy&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(trendyy)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ──────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.1.0          ✔ purrr   0.3.0.9000
## ✔ tibble  2.1.1          ✔ dplyr   0.7.8     
## ✔ tidyr   0.8.2          ✔ stringr 1.4.0     
## ✔ readr   1.2.1          ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ─────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example we will look at the top five polling candidates as of today (6/10/2019). These are, in no particular order, Joe Biden, Kamala Harris, Beto O’Rourke, Bernie Sanders, and Elizabeth Warren. Create a vector with the search terms that you will use (in this case the above candidates).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candidates &amp;lt;- c(&amp;quot;Joe Biden&amp;quot;, &amp;quot;Kamala Harris&amp;quot;, &amp;quot;Beto O&amp;#39;Rourke&amp;quot;, &amp;quot;Bernie Sanders&amp;quot;, &amp;quot;Elizabeth Warren&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we will use the &lt;code&gt;trendyy&lt;/code&gt; package to get search popularity. The function &lt;code&gt;trendy()&lt;/code&gt; has three main arguments: &lt;code&gt;search_terms&lt;/code&gt;, &lt;code&gt;from&lt;/code&gt;, and &lt;code&gt;to&lt;/code&gt; (in the form of &lt;code&gt;&amp;quot;yyyy-mm-dd&amp;quot;&lt;/code&gt;). The first argument is the only mandatory one. Provide a vector of length 5 or less as the first argument. Here we will use the &lt;code&gt;candidates&lt;/code&gt; vector and look at data from the past two weeks. I will create two variables for the beginning and end dates. This will be to demonstrate how functions can be used to programatically search date ranges.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# to today
end &amp;lt;- Sys.Date()
# from 2 weeks ago
begin &amp;lt;- Sys.Date() - 14&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pass these arguments to &lt;code&gt;trendy()&lt;/code&gt; and save them to a variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candidate_trends &amp;lt;- trendy(search_terms = candidates, from = begin, to = end)

candidate_trends&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ~Trendy results~
## 
## Search Terms: Joe Biden, Kamala Harris, Beto O&amp;#39;Rourke, Bernie Sanders, Elizabeth Warren
## 
## (&amp;gt;^.^)&amp;gt; ~~~~~~~~~~~~~~~~~~~~ summary ~~~~~~~~~~~~~~~~~~~~ &amp;lt;(^.^&amp;lt;)
## # A tibble: 5 x 5
##   keyword          max_hits min_hits from       to        
##   &amp;lt;chr&amp;gt;               &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;    
## 1 Bernie Sanders         42       33 2019-05-28 2019-06-09
## 2 Beto O&amp;#39;Rourke           3        1 2019-05-28 2019-06-09
## 3 Elizabeth Warren       65       20 2019-05-28 2019-06-09
## 4 Joe Biden              71       34 2019-05-28 2019-06-09
## 5 Kamala Harris         100       12 2019-05-28 2019-06-09&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Trendy creates an object of class &lt;code&gt;trendy&lt;/code&gt; see &lt;code&gt;class(candidate_trends)&lt;/code&gt; trendy. There are a number of accessor functions. We will use &lt;code&gt;get_interest()&lt;/code&gt; and &lt;code&gt;get_related_queries()&lt;/code&gt;. See the documentation of the others.&lt;/p&gt;
&lt;p&gt;To access to relative popularity, we will use &lt;code&gt;get_interest(trendy)&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;popularity &amp;lt;- get_interest(candidate_trends)

popularity&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 65 x 7
##    date                 hits geo   time          keyword  gprop category   
##    &amp;lt;dttm&amp;gt;              &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;      
##  1 2019-05-28 00:00:00    58 world 2019-05-28 2… Joe Bid… web   All catego…
##  2 2019-05-29 00:00:00    71 world 2019-05-28 2… Joe Bid… web   All catego…
##  3 2019-05-30 00:00:00    61 world 2019-05-28 2… Joe Bid… web   All catego…
##  4 2019-05-31 00:00:00    43 world 2019-05-28 2… Joe Bid… web   All catego…
##  5 2019-06-01 00:00:00    34 world 2019-05-28 2… Joe Bid… web   All catego…
##  6 2019-06-02 00:00:00    36 world 2019-05-28 2… Joe Bid… web   All catego…
##  7 2019-06-03 00:00:00    35 world 2019-05-28 2… Joe Bid… web   All catego…
##  8 2019-06-04 00:00:00    43 world 2019-05-28 2… Joe Bid… web   All catego…
##  9 2019-06-05 00:00:00    53 world 2019-05-28 2… Joe Bid… web   All catego…
## 10 2019-06-06 00:00:00    49 world 2019-05-28 2… Joe Bid… web   All catego…
## # … with 55 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For related queries we will use &lt;code&gt;get_related_queries(trendy)&lt;/code&gt;. Note that you can either pipe the object or pass it directly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candidate_trends %&amp;gt;% 
  get_related_queries() %&amp;gt;% 
  # picking queries for a random candidate
  filter(keyword == sample(candidates, 1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 36 x 5
##    subject related_queries value                keyword   category      
##    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;                &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;         
##  1 100     top             trump                Joe Biden All categories
##  2 50      top             joe biden 2020       Joe Biden All categories
##  3 44      top             bernie sanders       Joe Biden All categories
##  4 39      top             donald trump         Joe Biden All categories
##  5 36      top             joe biden age        Joe Biden All categories
##  6 30      top             joe biden news       Joe Biden All categories
##  7 24      top             how old is joe biden Joe Biden All categories
##  8 17      top             joe biden abortion   Joe Biden All categories
##  9 17      top             joe biden polls      Joe Biden All categories
## 10 16      top             creepy joe biden     Joe Biden All categories
## # … with 26 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;visualizing-trends&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualizing Trends&lt;/h2&gt;
&lt;p&gt;I’m guessing your director enjoys charts—so do I. To make the data more accessible, use the &lt;code&gt;popularity&lt;/code&gt; tibble to create a time series chart of popularity over the past two weeks. We will use &lt;code&gt;ggplot2&lt;/code&gt;. Remember that time should be displayed on the x axis. We want to have a line for each candidate, so map the color aesthetic to the keyword.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(popularity, 
       aes(x = date, y = hits, color = keyword)) + 
  geom_line() +
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;Search Popularity&amp;quot;, 
       title = &amp;quot;Google popularity of top 5 polling candidates&amp;quot;) + 
  theme_minimal() +
  theme(legend.position = &amp;quot;bottom&amp;quot;, 
        legend.title = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-06-11-trendyy-campaigns_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Web-scraping for Campaigns</title>
      <link>/post/scraping-4-campaigns/</link>
      <pubDate>Tue, 11 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/scraping-4-campaigns/</guid>
      <description>


&lt;p&gt;As the primaries approach, I am experiencing a mix of angst, FOMO, and excitement. One of my largest concerns is that progressive campaigns are stuck in a sort of antiquated but nonetheless entrenched workflow. Google Sheets reign in metric reporting. Here I want to present one use case (of a few more to come) where R can be leveraged by your data team.&lt;/p&gt;
&lt;p&gt;In this post I show you how to scrape the most recent polling data from FiveThirtyEight. FiveThirtyEight aggregates this data in an available way. This can allow you as a Data Manager to provide a useful report to your Media Manager.&lt;/p&gt;
&lt;p&gt;As always, please feel free to contact me on Twitter &lt;a href=&#34;https://twitter.com/josiahparry&#34;&gt;@josiahparry&lt;/a&gt; if you have any questions or want to discuss this further.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;polling-use-case&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Polling use case&lt;/h1&gt;
&lt;p&gt;A very important metric to keep track of is how your candidate is polling. Are they gaining a lead in the polls or falling behind? This data is often reported via traditional news organizations or some other mediums. The supposed demi-God and mythical pollster Nate Silver’s organization FiveThirtyEight does a wonderful job aggregating polls. Their page &lt;a href=&#34;https://projects.fivethirtyeight.com/2020-primaries/democratic/national/&#34;&gt;National 2020 Democratic Presidential Primary Polls&lt;/a&gt; has a table of the most recent polls from many different pollsters.&lt;/p&gt;
&lt;p&gt;In this use case we will acquire this data by web scraping using &lt;code&gt;rvest&lt;/code&gt;. We will also go over ways to programatically save polls results to a text file. Saving polling results can allow you present a long term view of your candidate’s growth during the quarter.&lt;/p&gt;
&lt;div id=&#34;understanding-rvest&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Understanding &lt;code&gt;rvest&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This use case will provide a cursory overview of the package &lt;code&gt;rvest&lt;/code&gt;. To learn more go &lt;a href=&#34;http://rvest.tidyverse.org/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Web scraping is the process of extracting data from a website. Websites are written in HTML and CSS. There are a few aspects of these languages that are used in web scraping that is important to know. HTML is written in a series of what are call tags. A tag is a set of characters wrapped in angle brackets—i.e. &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With CSS (cascading style sheets), web developers can give unique identifiers to a tag. Classes can also be assigned to a tag. Think of these as group. With web scraping we can specify a particular part of a website by it’s HTML tag and perhaps it’s class or ID. &lt;code&gt;rvest&lt;/code&gt; provides a large set of functions to make this simpler.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;For this example we will be scraping FiveThirtyEight’s aggregated poll table. The table can be found at &lt;a href=&#34;https://projects.fivethirtyeight.com/2020-primaries/democratic/national/&#34; class=&#34;uri&#34;&gt;https://projects.fivethirtyeight.com/2020-primaries/democratic/national/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before we begin, we must always prepare our workspace. Mise en place.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rvest)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: xml2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ──────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.1.0          ✔ purrr   0.3.0.9000
## ✔ tibble  2.1.1          ✔ dplyr   0.7.8     
## ✔ tidyr   0.8.2          ✔ stringr 1.4.0     
## ✔ readr   1.2.1          ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ─────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter()         masks stats::filter()
## ✖ readr::guess_encoding() masks rvest::guess_encoding()
## ✖ dplyr::lag()            masks stats::lag()
## ✖ purrr::pluck()          masks rvest::pluck()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing we will have to do is specify what page we will be scraping from. &lt;code&gt;html_session()&lt;/code&gt; will simulate a session in an html browser. By providing a URL to &lt;code&gt;html_session()&lt;/code&gt; we will then be able to access the underlying code of that page. Create an object called &lt;code&gt;session&lt;/code&gt; by providing the FiveThirtyEight URL to &lt;code&gt;html_session()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;session &amp;lt;- html_session(&amp;quot;https://projects.fivethirtyeight.com/2020-primaries/democratic/national/&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next and most important step is to identify which piece of HTML code contains the table. The easiest way to do this is to open up the webpage in Chrome and open up the Inspect Elements view (on Mac - ⌘ + Shift + C). Now that this is open, click the select element button at the top left corner of the inspection pane. Now hover over the table.&lt;/p&gt;
&lt;p&gt;You will see that the HTML element is highlighted. We can see that it is a &lt;code&gt;table&lt;/code&gt; tag. Additionally we see that there are two different classes &lt;code&gt;polls-table&lt;/code&gt; and &lt;code&gt;tracker&lt;/code&gt;. To specify a class we put a preceding &lt;code&gt;.&lt;/code&gt; to the class name—i.e. &lt;code&gt;.class-name&lt;/code&gt;. If there are multiple classes we just append the second class name to it—i.e. &lt;code&gt;.first-class.second-class&lt;/code&gt;. Be aware that these selectors can be quite finicky and be a bit difficult to figure out. You might need to do some googling or playing around with the selector.&lt;/p&gt;
&lt;p&gt;To actually access the content of this HTML element, we must specify the element using the proper selector. &lt;code&gt;html_node()&lt;/code&gt; will be used to do this. Provide the html session and the CSS selector to &lt;code&gt;html_node()&lt;/code&gt; to extract the HTML element.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;session %&amp;gt;% 
  html_node(&amp;quot;.polls-table.tracker&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {xml_node}
## &amp;lt;table class=&amp;quot;polls-table tracker&amp;quot;&amp;gt;
## [1] &amp;lt;thead class=&amp;quot;hide-mobile&amp;quot; id=&amp;quot;table-header&amp;quot;&amp;gt;&amp;lt;tr&amp;gt;\n&amp;lt;th class=&amp;quot;new&amp;quot;&amp;gt;&amp;lt; ...
## [2] &amp;lt;tbody&amp;gt;\n&amp;lt;tr class=&amp;quot;visible-row&amp;quot; data-id=&amp;quot;97723&amp;quot;&amp;gt;\n&amp;lt;!-- Shared--&amp;gt;&amp;lt;td ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we see that this returns on object of class &lt;code&gt;xml_node&lt;/code&gt;. This object returns some HTML code but it is still not entirely workable. Since this is an HTML table we want to extract we can use the handy &lt;code&gt;html_table()&lt;/code&gt;. Note that if this wasn’t a table but rather text, you can use &lt;code&gt;html_text()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;session %&amp;gt;% 
  html_node(&amp;quot;.polls-table.tracker&amp;quot;) %&amp;gt;% 
  html_table()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take note of the extremely informative error. It appears we might have to deal with mismatching columns.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;session %&amp;gt;% 
  html_node(&amp;quot;.polls-table.tracker&amp;quot;) %&amp;gt;% 
  html_table(fill = TRUE) %&amp;gt;% 
  head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                          Dates           Pollster                  Sample
## 1 •       Jun 6-10, 2019503 RV     Jun 6-10, 2019 A-Quinnipiac University
## 2 •     Jun 3-9, 201917,012 LV      Jun 3-9, 2019       B-Morning Consult
## 3 • May 29-Jun 5, 20192,271 RV May 29-Jun 5, 2019                 B+Ipsos
## 4 •  May 29-Jun 5, 20192,525 A May 29-Jun 5, 2019                 B+Ipsos
## 5 •        Jun 2-4, 2019500 RV      Jun 2-4, 2019                 BYouGov
## 6 •         Jun 2-4, 2019550 A      Jun 2-4, 2019                 BYouGov
##   Sample Biden Sanders Harris Warren O&amp;#39;Rourke Buttigieg Booker Klobuchar
## 1    503    RV     30%    19%     7%      15%        3%     8%        1%
## 2 17,012    LV     37%    19%     7%      11%        4%     7%        3%
## 3  2,271    RV     31%    14%     6%       9%        3%     5%        2%
## 4  2,525     A     30%    15%     6%       8%        4%     5%        2%
## 5    500    RV     27%    15%     9%      12%        2%    10%        2%
## 6    550     A     27%    16%     8%      11%        2%     9%        2%
##   Castro Yang Gillibrand Hickenlooper Gabbard Delaney Inslee Ryan Bullock
## 1     1%   0%         1%           0%      0%      0%     0%   0%      1%
## 2     2%   1%         1%           1%      1%      1%     1%   1%      1%
## 3     2%   1%         1%           0%      1%      1%     0%   0%      1%
## 4     1%   0%         1%           0%      1%      1%     0%   0%      1%
## 5     1%   0%         1%           0%      1%      1%     1%   0%      0%
## 6     1%   0%         1%           0%      1%      1%     1%   0%      0%
##   de Blasio Bennet Williamson Gravel Swalwell Moulton Messam H. Clinton
## 1        0%     0%         0%     0%       0%      0%     0%         0%
## 2        1%     0%         1%     0%               0%     0%           
## 3        0%     1%         0%     0%       0%      0%     0%         0%
## 4        0%     1%         0%     0%       0%      0%     0%         0%
## 5        1%     2%         0%     0%       0%      0%     0%         0%
## 6        1%     2%         0%     0%       0%      0%     0%         0%
##   Bloomberg M. Obama Brown Kerry Abrams Holder McAuliffe Winfrey Ojeda
## 1                                                                     
## 2                                                                     
## 3                                                                     
## 4                                                                     
## 5                                                                     
## 6                                                                     
##   Trump Cuomo Avenatti Kennedy Patrick Zuckerberg Pelosi Garcetti Newsom
## 1                                                                       
## 2                                                                       
## 3                                                                       
## 4                                                                       
## 5                                                                       
## 6                                                                       
##   Steyer Schultz Kaine Johnson Kucinich Lee Scott Sinema Warner NA
## 1                                                                 
## 2                                                                 
## 3                                                                 
## 4                                                                 
## 5                                                                 
## 6                                                                 
##                                                                                                                                                                                                                                NA
## 1  Biden30%Sanders19%Warren15%Buttigieg8%Harris7%O&amp;#39;Rourke3%Booker1%Klobuchar1%Yang1%Ryan1%Gillibrand0%Castro0%Gabbard0%Inslee0%Hickenlooper0%Delaney0%Williamson0%Messam0%Swalwell0%Moulton0%Bennet0%Bullock0%de Blasio0%Gravel0%
## 2                  Biden37%Sanders19%Warren11%Buttigieg7%Harris7%O&amp;#39;Rourke4%Booker3%Klobuchar2%Bennet1%Bullock1%Castro1%Delaney1%Gabbard1%Gillibrand1%Hickenlooper1%Inslee1%Yang1%Ryan1%de Blasio0%Moulton0%Swalwell0%Williamson0%
## 3   Biden31%Sanders14%Warren9%Harris6%Buttigieg5%O&amp;#39;Rourke3%Booker2%Klobuchar2%Castro1%Gabbard1%Hickenlooper1%Yang1%Ryan1%de Blasio1%Gillibrand0%Bullock0%Inslee0%Delaney0%Williamson0%Messam0%Swalwell0%Moulton0%Bennet0%Gravel0%
## 4   Biden30%Sanders15%Warren8%Harris6%Buttigieg5%O&amp;#39;Rourke4%Booker2%Klobuchar1%Gabbard1%Hickenlooper1%Yang1%Ryan1%de Blasio1%Castro0%Gillibrand0%Bullock0%Inslee0%Delaney0%Williamson0%Messam0%Swalwell0%Moulton0%Bennet0%Gravel0%
## 5 Biden27%Sanders15%Warren12%Buttigieg10%Harris9%Booker2%de Blasio2%O&amp;#39;Rourke2%Bullock1%Delaney1%Gabbard1%Hickenlooper1%Klobuchar1%Yang1%Bennet0%Castro0%Gillibrand0%Gravel0%Inslee0%Messam0%Moulton0%Ryan0%Swalwell0%Williamson0%
## 6  Biden27%Sanders16%Warren11%Buttigieg9%Harris8%Booker2%de Blasio2%O&amp;#39;Rourke2%Bullock1%Delaney1%Gabbard1%Hickenlooper1%Klobuchar1%Yang1%Bennet0%Castro0%Gillibrand0%Gravel0%Inslee0%Messam0%Moulton0%Ryan0%Swalwell0%Williamson0%&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is much better! But based on visual inspection the column headers are not properly matched. There are a few things that need to be sorted out: there are two date columns, there are commas and percents where numeric columns should be, the column headers are a little messy, and the table isn’t a tibble (this is just personal preference).&lt;/p&gt;
&lt;p&gt;We will handle the final two issues first as they are easiest to deal with. The function &lt;code&gt;clean_names()&lt;/code&gt; from &lt;code&gt;janitor&lt;/code&gt; will handle the column headers, and &lt;code&gt;as_tibble()&lt;/code&gt; will coerce the data.frame into a proper tibble. Save this semi-clean tibble into an object called &lt;code&gt;polls&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;polls &amp;lt;- session %&amp;gt;% 
  html_node(&amp;quot;.polls-table.tracker&amp;quot;) %&amp;gt;% 
  html_table(fill = TRUE) %&amp;gt;% 
  janitor::clean_names() %&amp;gt;% 
  as_tibble()

polls&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 116 x 59
##    x     dates pollster sample sample_2 biden sanders harris warren
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; 
##  1 •     Jun … Jun 6-1… A-Qui… 503      RV    30%     19%    7%    
##  2 •     Jun … Jun 3-9… B-Mor… 17,012   LV    37%     19%    7%    
##  3 •     May … May 29-… B+Ips… 2,271    RV    31%     14%    6%    
##  4 •     May … May 29-… B+Ips… 2,525    A     30%     15%    6%    
##  5 •     Jun … Jun 2-4… BYouG… 500      RV    27%     15%    9%    
##  6 •     Jun … Jun 2-4… BYouG… 550      A     27%     16%    8%    
##  7 •     Jun … Jun 1-2… C+Har… 431      RV    35%     16%    4%    
##  8 •     May … May 27-… B-Mor… 16,587   LV    38%     19%    7%    
##  9 •     May … May 28-… A-CNN… 412      RV    32%     18%    8%    
## 10 •     May … May 29-… C+Har… 471      RV    36%     17%    8%    
## # … with 106 more rows, and 50 more variables: o_rourke &amp;lt;chr&amp;gt;,
## #   buttigieg &amp;lt;chr&amp;gt;, booker &amp;lt;chr&amp;gt;, klobuchar &amp;lt;chr&amp;gt;, castro &amp;lt;chr&amp;gt;,
## #   yang &amp;lt;chr&amp;gt;, gillibrand &amp;lt;chr&amp;gt;, hickenlooper &amp;lt;chr&amp;gt;, gabbard &amp;lt;chr&amp;gt;,
## #   delaney &amp;lt;chr&amp;gt;, inslee &amp;lt;chr&amp;gt;, ryan &amp;lt;chr&amp;gt;, bullock &amp;lt;chr&amp;gt;,
## #   de_blasio &amp;lt;chr&amp;gt;, bennet &amp;lt;chr&amp;gt;, williamson &amp;lt;chr&amp;gt;, gravel &amp;lt;chr&amp;gt;,
## #   swalwell &amp;lt;chr&amp;gt;, moulton &amp;lt;chr&amp;gt;, messam &amp;lt;chr&amp;gt;, h_clinton &amp;lt;chr&amp;gt;,
## #   bloomberg &amp;lt;chr&amp;gt;, m_obama &amp;lt;chr&amp;gt;, brown &amp;lt;chr&amp;gt;, kerry &amp;lt;chr&amp;gt;,
## #   abrams &amp;lt;chr&amp;gt;, holder &amp;lt;chr&amp;gt;, mc_auliffe &amp;lt;chr&amp;gt;, winfrey &amp;lt;chr&amp;gt;,
## #   ojeda &amp;lt;chr&amp;gt;, trump &amp;lt;chr&amp;gt;, cuomo &amp;lt;chr&amp;gt;, avenatti &amp;lt;chr&amp;gt;, kennedy &amp;lt;chr&amp;gt;,
## #   patrick &amp;lt;chr&amp;gt;, zuckerberg &amp;lt;chr&amp;gt;, pelosi &amp;lt;chr&amp;gt;, garcetti &amp;lt;chr&amp;gt;,
## #   newsom &amp;lt;chr&amp;gt;, steyer &amp;lt;chr&amp;gt;, schultz &amp;lt;chr&amp;gt;, kaine &amp;lt;chr&amp;gt;, johnson &amp;lt;chr&amp;gt;,
## #   kucinich &amp;lt;chr&amp;gt;, lee &amp;lt;chr&amp;gt;, scott &amp;lt;chr&amp;gt;, sinema &amp;lt;chr&amp;gt;, warner &amp;lt;chr&amp;gt;,
## #   na &amp;lt;chr&amp;gt;, na_2 &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to shift over the column names to the right just once. Unfortunately there is no elegant way to do this (that I am aware of). We can see that the first column is completely useless so that can be removed. Once that column is removed we can reset the names this way they will be well aligned.&lt;/p&gt;
&lt;p&gt;We will start by creating a vector of the original column names.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;col_names &amp;lt;- names(polls)
col_names&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;x&amp;quot;            &amp;quot;dates&amp;quot;        &amp;quot;pollster&amp;quot;     &amp;quot;sample&amp;quot;      
##  [5] &amp;quot;sample_2&amp;quot;     &amp;quot;biden&amp;quot;        &amp;quot;sanders&amp;quot;      &amp;quot;harris&amp;quot;      
##  [9] &amp;quot;warren&amp;quot;       &amp;quot;o_rourke&amp;quot;     &amp;quot;buttigieg&amp;quot;    &amp;quot;booker&amp;quot;      
## [13] &amp;quot;klobuchar&amp;quot;    &amp;quot;castro&amp;quot;       &amp;quot;yang&amp;quot;         &amp;quot;gillibrand&amp;quot;  
## [17] &amp;quot;hickenlooper&amp;quot; &amp;quot;gabbard&amp;quot;      &amp;quot;delaney&amp;quot;      &amp;quot;inslee&amp;quot;      
## [21] &amp;quot;ryan&amp;quot;         &amp;quot;bullock&amp;quot;      &amp;quot;de_blasio&amp;quot;    &amp;quot;bennet&amp;quot;      
## [25] &amp;quot;williamson&amp;quot;   &amp;quot;gravel&amp;quot;       &amp;quot;swalwell&amp;quot;     &amp;quot;moulton&amp;quot;     
## [29] &amp;quot;messam&amp;quot;       &amp;quot;h_clinton&amp;quot;    &amp;quot;bloomberg&amp;quot;    &amp;quot;m_obama&amp;quot;     
## [33] &amp;quot;brown&amp;quot;        &amp;quot;kerry&amp;quot;        &amp;quot;abrams&amp;quot;       &amp;quot;holder&amp;quot;      
## [37] &amp;quot;mc_auliffe&amp;quot;   &amp;quot;winfrey&amp;quot;      &amp;quot;ojeda&amp;quot;        &amp;quot;trump&amp;quot;       
## [41] &amp;quot;cuomo&amp;quot;        &amp;quot;avenatti&amp;quot;     &amp;quot;kennedy&amp;quot;      &amp;quot;patrick&amp;quot;     
## [45] &amp;quot;zuckerberg&amp;quot;   &amp;quot;pelosi&amp;quot;       &amp;quot;garcetti&amp;quot;     &amp;quot;newsom&amp;quot;      
## [49] &amp;quot;steyer&amp;quot;       &amp;quot;schultz&amp;quot;      &amp;quot;kaine&amp;quot;        &amp;quot;johnson&amp;quot;     
## [53] &amp;quot;kucinich&amp;quot;     &amp;quot;lee&amp;quot;          &amp;quot;scott&amp;quot;        &amp;quot;sinema&amp;quot;      
## [57] &amp;quot;warner&amp;quot;       &amp;quot;na&amp;quot;           &amp;quot;na_2&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately this also presents another issue. Once a column is deselected, there will be one more column name than column. So we will need to select all but the last element of the original names. We will create a vector called &lt;code&gt;new_names&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# identify the integer number of the last column
last_col &amp;lt;- length(col_names) - 1

# create a vector which will be used for the new names
new_names &amp;lt;- col_names[1:last_col]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can try implementing the hacky solution. Here we will deselect the first column and reset the names using &lt;code&gt;setNames()&lt;/code&gt;. Following, we will use the &lt;a href=&#34;https://dplyr.tidyverse.org/reference/mutate_all.html&#34;&gt;&lt;code&gt;mutate_at()&lt;/code&gt;&lt;/a&gt; variant to remove the percent sign from every candidate column and coerce them into integer columns. Here we will specify which variables to &lt;em&gt;not&lt;/em&gt; mutate at within &lt;code&gt;vars()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;polls %&amp;gt;% 
  select(-1) %&amp;gt;%  
  setNames(new_names)%&amp;gt;%
  select(-1) %&amp;gt;%
  mutate_at(vars(-c(&amp;quot;dates&amp;quot;, &amp;quot;pollster&amp;quot;, &amp;quot;sample&amp;quot;, &amp;quot;sample_2&amp;quot;)), 
            ~as.integer(str_remove(., &amp;quot;%&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in (structure(function (..., .x = ..1, .y = ..2, . = ..1) : NAs
## introduced by coercion&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 116 x 57
##    dates pollster sample sample_2 biden sanders harris warren o_rourke
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
##  1 Jun … A-Quinn… 503    RV          30      19      7     15        3
##  2 Jun … B-Morni… 17,012 LV          37      19      7     11        4
##  3 May … B+Ipsos  2,271  RV          31      14      6      9        3
##  4 May … B+Ipsos  2,525  A           30      15      6      8        4
##  5 Jun … BYouGov  500    RV          27      15      9     12        2
##  6 Jun … BYouGov  550    A           27      16      8     11        2
##  7 Jun … C+Harri… 431    RV          35      16      4      5        4
##  8 May … B-Morni… 16,587 LV          38      19      7     10        4
##  9 May … A-CNN/S… 412    RV          32      18      8      7        5
## 10 May … C+Harri… 471    RV          36      17      8      5        4
## # … with 106 more rows, and 48 more variables: buttigieg &amp;lt;int&amp;gt;,
## #   booker &amp;lt;int&amp;gt;, klobuchar &amp;lt;int&amp;gt;, castro &amp;lt;int&amp;gt;, yang &amp;lt;int&amp;gt;,
## #   gillibrand &amp;lt;int&amp;gt;, hickenlooper &amp;lt;int&amp;gt;, gabbard &amp;lt;int&amp;gt;, delaney &amp;lt;int&amp;gt;,
## #   inslee &amp;lt;int&amp;gt;, ryan &amp;lt;int&amp;gt;, bullock &amp;lt;int&amp;gt;, de_blasio &amp;lt;int&amp;gt;,
## #   bennet &amp;lt;int&amp;gt;, williamson &amp;lt;int&amp;gt;, gravel &amp;lt;int&amp;gt;, swalwell &amp;lt;int&amp;gt;,
## #   moulton &amp;lt;int&amp;gt;, messam &amp;lt;int&amp;gt;, h_clinton &amp;lt;int&amp;gt;, bloomberg &amp;lt;int&amp;gt;,
## #   m_obama &amp;lt;int&amp;gt;, brown &amp;lt;int&amp;gt;, kerry &amp;lt;int&amp;gt;, abrams &amp;lt;int&amp;gt;, holder &amp;lt;int&amp;gt;,
## #   mc_auliffe &amp;lt;int&amp;gt;, winfrey &amp;lt;int&amp;gt;, ojeda &amp;lt;int&amp;gt;, trump &amp;lt;int&amp;gt;,
## #   cuomo &amp;lt;int&amp;gt;, avenatti &amp;lt;int&amp;gt;, kennedy &amp;lt;int&amp;gt;, patrick &amp;lt;int&amp;gt;,
## #   zuckerberg &amp;lt;int&amp;gt;, pelosi &amp;lt;int&amp;gt;, garcetti &amp;lt;int&amp;gt;, newsom &amp;lt;int&amp;gt;,
## #   steyer &amp;lt;int&amp;gt;, schultz &amp;lt;int&amp;gt;, kaine &amp;lt;int&amp;gt;, johnson &amp;lt;int&amp;gt;,
## #   kucinich &amp;lt;int&amp;gt;, lee &amp;lt;int&amp;gt;, scott &amp;lt;int&amp;gt;, sinema &amp;lt;int&amp;gt;, warner &amp;lt;int&amp;gt;,
## #   na &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we must tidy the data. We will use &lt;code&gt;tidyr::gather()&lt;/code&gt; to transform the data from wide to long. In short, gather takes the column headers (the &lt;code&gt;key&lt;/code&gt; argument) and creates a new variable from the values of the columns (the &lt;code&gt;value&lt;/code&gt; argument). In this case, we will create a new column called &lt;code&gt;candidate&lt;/code&gt; from the column headers and a second column called &lt;code&gt;points&lt;/code&gt; which are a candidates polling percentage. Next we deselect any columns that we do not want to be gathered.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;polls %&amp;gt;% 
  select(-1) %&amp;gt;% 
  setNames(new_names)%&amp;gt;%
  select(-1) %&amp;gt;%
  mutate_at(vars(-c(&amp;quot;dates&amp;quot;, &amp;quot;pollster&amp;quot;, &amp;quot;sample&amp;quot;, &amp;quot;sample_2&amp;quot;)),
            ~as.integer(str_remove(., &amp;quot;%&amp;quot;))) %&amp;gt;% 
  gather(candidate, points, -dates, -pollster, -sample, -sample_2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in (structure(function (..., .x = ..1, .y = ..2, . = ..1) : NAs
## introduced by coercion&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6,148 x 6
##    dates             pollster              sample sample_2 candidate points
##    &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt;
##  1 Jun 6-10, 2019    A-Quinnipiac Univers… 503    RV       biden         30
##  2 Jun 3-9, 2019     B-Morning Consult     17,012 LV       biden         37
##  3 May 29-Jun 5, 20… B+Ipsos               2,271  RV       biden         31
##  4 May 29-Jun 5, 20… B+Ipsos               2,525  A        biden         30
##  5 Jun 2-4, 2019     BYouGov               500    RV       biden         27
##  6 Jun 2-4, 2019     BYouGov               550    A        biden         27
##  7 Jun 1-2, 2019     C+HarrisX             431    RV       biden         35
##  8 May 27-Jun 2, 20… B-Morning Consult     16,587 LV       biden         38
##  9 May 28-31, 2019   A-CNN/SSRS            412    RV       biden         32
## 10 May 29-30, 2019   C+Harris Interactive  471    RV       biden         36
## # … with 6,138 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a few more house-keeping things that need to be done to improve this data set. &lt;code&gt;sample_2&lt;/code&gt; is rather uninformative. On the FiveThirtyEight website there is a key which describes what these values represent (&lt;code&gt;A = ADULTS, RV = REGISTERED VOTERS, V = VOTERS, LV = LIKELY VOTERS&lt;/code&gt;). This should be specified in our data set. In addition the &lt;code&gt;sample&lt;/code&gt; column ought to be cast into an integer column. And finally, those messy dates will need to be cleaned. My approach to this requires creating a function to handle this cleaning. First, the simple stuff.&lt;/p&gt;
&lt;p&gt;To do the first two above steps, we will continue our function chain and save it to a new variable &lt;code&gt;polls_tidy&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;polls_tidy &amp;lt;- polls %&amp;gt;% 
  select(-1) %&amp;gt;% 
  setNames(new_names)%&amp;gt;%
  select(-1) %&amp;gt;%
  mutate_at(vars(-c(&amp;quot;dates&amp;quot;, &amp;quot;pollster&amp;quot;, &amp;quot;sample&amp;quot;, &amp;quot;sample_2&amp;quot;)), 
            ~as.integer(str_remove(., &amp;quot;%&amp;quot;))) %&amp;gt;% 
  gather(candidate, points, -dates, -pollster, -sample, -sample_2) %&amp;gt;% 
  mutate(sample_2 = case_when(
    sample_2 == &amp;quot;RV&amp;quot; ~ &amp;quot;Registered Voters&amp;quot;,
    sample_2 == &amp;quot;LV&amp;quot; ~ &amp;quot;Likely Voters&amp;quot;,
    sample_2 == &amp;quot;A&amp;quot; ~ &amp;quot;Adults&amp;quot;,
    sample_2 == &amp;quot;V&amp;quot; ~ &amp;quot;Voters&amp;quot;
  ),
  sample = as.integer(str_remove(sample, &amp;quot;,&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in (structure(function (..., .x = ..1, .y = ..2, . = ..1) : NAs
## introduced by coercion&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;polls_tidy&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6,148 x 6
##    dates          pollster           sample sample_2       candidate points
##    &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;               &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt;
##  1 Jun 6-10, 2019 A-Quinnipiac Univ…    503 Registered Vo… biden         30
##  2 Jun 3-9, 2019  B-Morning Consult   17012 Likely Voters  biden         37
##  3 May 29-Jun 5,… B+Ipsos              2271 Registered Vo… biden         31
##  4 May 29-Jun 5,… B+Ipsos              2525 Adults         biden         30
##  5 Jun 2-4, 2019  BYouGov               500 Registered Vo… biden         27
##  6 Jun 2-4, 2019  BYouGov               550 Adults         biden         27
##  7 Jun 1-2, 2019  C+HarrisX             431 Registered Vo… biden         35
##  8 May 27-Jun 2,… B-Morning Consult   16587 Likely Voters  biden         38
##  9 May 28-31, 20… A-CNN/SSRS            412 Registered Vo… biden         32
## 10 May 29-30, 20… C+Harris Interact…    471 Registered Vo… biden         36
## # … with 6,138 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;date-cleaning&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Date cleaning&lt;/h3&gt;
&lt;p&gt;Next we must work to clean the date field. I find that when working with a messy column, creating a single function which handles the cleaning is one of the most effective approaches. Here we will create a function which takes a value provided from the &lt;code&gt;dates&lt;/code&gt; field and return a cleaned date. There are two unique cases I identified. There are poll dates which occurred during a single month, or a poll that spanned two months. The dates are separated by a single hyphen &lt;code&gt;-&lt;/code&gt;. If we split the date at &lt;code&gt;-&lt;/code&gt; we will either receive two elements with a month indicated or one month with a day and a day number. In the latter case we will have to carry over the month. Then the year can be appended to it and parsed as a date using the &lt;code&gt;lubridate&lt;/code&gt; package. For more on &lt;code&gt;lubridate&lt;/code&gt; visit &lt;a href=&#34;https://lubridate.tidyverse.org/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The function will only return one date at a time. The two arguments will be &lt;code&gt;date&lt;/code&gt; and &lt;code&gt;.return&lt;/code&gt; to indicate whether the first or second date should be provided. The internals of this function rely heavily on the &lt;code&gt;stringr&lt;/code&gt; package (see R for Data Science &lt;a href=&#34;https://r4ds.had.co.nz/strings.html&#34;&gt;Chapter 14&lt;/a&gt;). &lt;code&gt;switch()&lt;/code&gt; at the end of the function determines which date should be returned (see Advanced R &lt;a href=&#34;https://adv-r.hadley.nz/control-flow.html&#34;&gt;Chapter 5&lt;/a&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_date &amp;lt;- function(date, .return = &amp;quot;first&amp;quot;) {
  # take date and split at the comma to get the year and the month-day combo
  date_split &amp;lt;- str_split(date, &amp;quot;,&amp;quot;) %&amp;gt;% 
    # remove from list / coerce to vector
    unlist() %&amp;gt;% 
    # remove extra white space
    str_trim()
  
  # extract the year
  date_year &amp;lt;- date_split[2]
  
  # split the month day portion and coerce to vector
  dates &amp;lt;- unlist(str_split(date_split[1],  &amp;quot;-&amp;quot;))
  
  # paste the month day and year together then parse as date using `mdy()`
  first_date &amp;lt;- paste(dates[1], date_year) %&amp;gt;% 
    lubridate::mdy()
  
  second_date &amp;lt;- ifelse(!str_detect(dates[2], &amp;quot;[A-z]+&amp;quot;),
                        yes = paste(str_extract(dates[1], &amp;quot;[A-z]+&amp;quot;), 
                              dates[2], 
                              date_year), 
                        no = paste(dates[2], date_year)) %&amp;gt;% 
    lubridate::mdy()
  
  switch(.return, 
         first = return(first_date),
         second = return(second_date)
         )
  
}

# test on a date
clean_date(polls_tidy$dates[10], .return = &amp;quot;first&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2019-05-29&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_date(polls_tidy$dates[10], .return = &amp;quot;second&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2019-05-30&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use this new function to create two new columns &lt;code&gt;poll_start&lt;/code&gt; and &lt;code&gt;poll_end&lt;/code&gt; using &lt;code&gt;mutate()&lt;/code&gt;. Following this we can deselect the original &lt;code&gt;dates&lt;/code&gt; column, remove any observations missing a &lt;code&gt;points&lt;/code&gt; value, remove duplicates using &lt;code&gt;distinct()&lt;/code&gt;, and save this to &lt;code&gt;polls_clean&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;polls_clean &amp;lt;- polls_tidy %&amp;gt;% 
  mutate(poll_start = clean_date(dates, &amp;quot;first&amp;quot;),
         poll_end = clean_date(dates, &amp;quot;second&amp;quot;)) %&amp;gt;% 
  select(-dates) %&amp;gt;% 
  filter(!is.na(points)) %&amp;gt;% 
  distinct()

polls_clean&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,955 x 7
##    pollster       sample sample_2    candidate points poll_start poll_end  
##    &amp;lt;chr&amp;gt;           &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;    
##  1 A-Quinnipiac …    503 Registered… biden         30 2019-06-06 2019-06-10
##  2 B-Morning Con…  17012 Likely Vot… biden         37 2019-06-06 2019-06-10
##  3 B+Ipsos          2271 Registered… biden         31 2019-06-06 2019-06-10
##  4 B+Ipsos          2525 Adults      biden         30 2019-06-06 2019-06-10
##  5 BYouGov           500 Registered… biden         27 2019-06-06 2019-06-10
##  6 BYouGov           550 Adults      biden         27 2019-06-06 2019-06-10
##  7 C+HarrisX         431 Registered… biden         35 2019-06-06 2019-06-10
##  8 B-Morning Con…  16587 Likely Vot… biden         38 2019-06-06 2019-06-10
##  9 A-CNN/SSRS        412 Registered… biden         32 2019-06-06 2019-06-10
## 10 C+Harris Inte…    471 Registered… biden         36 2019-06-06 2019-06-10
## # … with 1,945 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;visualization&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Visualization&lt;/h3&gt;
&lt;p&gt;The cleaned data can be aggregated and visualized.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;avg_polls &amp;lt;- polls_clean %&amp;gt;% 
  group_by(candidate) %&amp;gt;% 
  summarise(avg_points = mean(points, na.rm = TRUE),
            min_points = min(points, na.rm = TRUE),
            max_points = max(points, na.rm = TRUE),
            n_polls = n() - sum(is.na(points))) %&amp;gt;% # identify how many polls candidate is in
  # remove candidates who appear in 50 or fewer polls: i.e. HRC
  filter(n_polls &amp;gt; 50) %&amp;gt;% 
  arrange(-avg_points)

avg_polls&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 16 x 5
##    candidate    avg_points min_points max_points n_polls
##    &amp;lt;chr&amp;gt;             &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;   &amp;lt;int&amp;gt;
##  1 biden            32.1            9         66     108
##  2 sanders          19.4            4         42     110
##  3 harris            8.62           2         38     110
##  4 warren            8.05           2         43     109
##  5 o_rourke          6.50           2         21     105
##  6 buttigieg         4.88           0         21      80
##  7 booker            3.30           0          9     105
##  8 klobuchar         1.77           0          5      94
##  9 yang              1.13           0          3      62
## 10 castro            1.10           0         12      97
## 11 gillibrand        0.929          0          9      98
## 12 hickenlooper      0.728          0          2      81
## 13 gabbard           0.723          0          3      83
## 14 delaney           0.530          0          8      83
## 15 bullock           0.509          0          1      55
## 16 inslee            0.429          0          2      77&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;avg_polls %&amp;gt;% 
  mutate(candidate = fct_reorder(candidate, avg_points)) %&amp;gt;% 
  ggplot(aes(candidate, avg_points)) +
  geom_col() + 
  theme_minimal() +
  coord_flip() +
  labs(title = &amp;quot;Polls Standings&amp;quot;, x = &amp;quot;&amp;quot;, y = &amp;quot;%&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-06-11-scraping-4-campaigns_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-historic-polling-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating historic polling data&lt;/h2&gt;
&lt;p&gt;It may become useful to have a running history of how candidates have been polling. We can use R to write a csv file of the data from FiveThirtyEight. However, what happens when the polls update? How we can we keep the previous data &lt;em&gt;and&lt;/em&gt; the new data? We will work through an example using a combination of &lt;code&gt;bind_rows()&lt;/code&gt; and &lt;code&gt;distinct()&lt;/code&gt;. I want to emphasize that this is not a good practice if you need to scale to hundreds of thousand of rows. This works in this case as the data are inherently small.&lt;/p&gt;
&lt;p&gt;To start, I have created a sample dataset which contains 80% of these polls (maybe less by the time you do this!). Note that is probably best to version control this or have multiple copies as a failsafe.&lt;/p&gt;
&lt;p&gt;The approach we will take is to read in the historic polls data set and bind rows with the &lt;code&gt;polls_clean&lt;/code&gt; data we have scraped. Next we remove duplicate rows using &lt;code&gt;distinct()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;old_polls &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/JosiahParry/r-4-campaigns/master/data/polls.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   pollster = col_character(),
##   sample = col_double(),
##   sample_2 = col_character(),
##   candidate = col_character(),
##   points = col_double(),
##   poll_start = col_date(format = &amp;quot;&amp;quot;),
##   poll_end = col_date(format = &amp;quot;&amp;quot;)
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;old_polls&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,564 x 7
##    pollster       sample sample_2    candidate points poll_start poll_end  
##    &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;    
##  1 C+HarrisX         370 Registered… klobuchar      2 2019-06-06 2019-06-10
##  2 C+HarrisX         448 Registered… gillibra…      1 2019-06-06 2019-06-10
##  3 B-Morning Con…  11627 Likely Vot… harris        13 2019-06-06 2019-06-10
##  4 B-Morning Con…    699 Registered… delaney        0 2019-06-06 2019-06-10
##  5 C+HarrisX         743 Registered… williams…      1 2019-06-06 2019-06-10
##  6 A-Quinnipiac …    559 Registered… gabbard        0 2019-06-06 2019-06-10
##  7 B-Morning Con…  14250 Likely Vot… gillibra…      2 2019-06-06 2019-06-10
##  8 A-Quinnipiac …    559 Registered… gillibra…      0 2019-06-06 2019-06-10
##  9 B-Morning Con…  14250 Likely Vot… harris         6 2019-06-06 2019-06-10
## 10 A+Monmouth Un…    330 Registered… warren         8 2019-06-06 2019-06-10
## # … with 1,554 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;updated_polls &amp;lt;- bind_rows(old_polls, polls_clean) %&amp;gt;% 
  distinct()

updated_polls&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,955 x 7
##    pollster       sample sample_2    candidate points poll_start poll_end  
##    &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;    
##  1 C+HarrisX         370 Registered… klobuchar      2 2019-06-06 2019-06-10
##  2 C+HarrisX         448 Registered… gillibra…      1 2019-06-06 2019-06-10
##  3 B-Morning Con…  11627 Likely Vot… harris        13 2019-06-06 2019-06-10
##  4 B-Morning Con…    699 Registered… delaney        0 2019-06-06 2019-06-10
##  5 C+HarrisX         743 Registered… williams…      1 2019-06-06 2019-06-10
##  6 A-Quinnipiac …    559 Registered… gabbard        0 2019-06-06 2019-06-10
##  7 B-Morning Con…  14250 Likely Vot… gillibra…      2 2019-06-06 2019-06-10
##  8 A-Quinnipiac …    559 Registered… gillibra…      0 2019-06-06 2019-06-10
##  9 B-Morning Con…  14250 Likely Vot… harris         6 2019-06-06 2019-06-10
## 10 A+Monmouth Un…    330 Registered… warren         8 2019-06-06 2019-06-10
## # … with 1,945 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you have a cleaned data set which has been integrated with the recently scraped data. Write this to a csv using &lt;code&gt;write_csv()&lt;/code&gt; for later use.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Introducing trendyy</title>
      <link>/post/2019-05-25-introducing-trendyy/</link>
      <pubDate>Sat, 25 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-05-25-introducing-trendyy/</guid>
      <description>


&lt;p&gt;&lt;code&gt;trendyy&lt;/code&gt; is a package for querying Google Trends. It is build around &lt;a href=&#34;https://github.com/PMassicotte&#34;&gt;Philippe Massicotte&lt;/a&gt;’s package &lt;a href=&#34;https://github.com/PMassicotte/gtrendsR&#34;&gt;&lt;code&gt;gtrendsR&lt;/code&gt;&lt;/a&gt; which accesses this data wonderfully.&lt;/p&gt;
&lt;p&gt;The inspiration for this package was to provide a tidy interface to the trends data.&lt;/p&gt;
&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;You can install &lt;code&gt;trendyy&lt;/code&gt; from CRAN using &lt;code&gt;install.packages(&amp;quot;trendyy&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;usage&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;trendy()&lt;/code&gt; to search Google Trends. The only mandatory argument is &lt;code&gt;search_terms&lt;/code&gt;. This is a character vector with the terms of interest. It is important to note that Google Trends is only capable of comparing up to five terms. Thus, if your &lt;code&gt;search_terms&lt;/code&gt; vector is longer than 5, it will search each term individually. This will remove the direct comparative advantage that Google Trends gives you.&lt;/p&gt;
&lt;div id=&#34;additional-arguments&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Additional arguments&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/iso_8601_2x.png&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;from&lt;/code&gt;: The beginning date of the query in &lt;code&gt;&amp;quot;YYYY-MM-DD&amp;quot;&lt;/code&gt; format.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;to&lt;/code&gt;: The end date of the query in &lt;code&gt;&amp;quot;YYYY-MM-DD&amp;quot;&lt;/code&gt; format.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;...&lt;/code&gt; : any additional arguments that would be passed to &lt;code&gt;gtrendsR::gtrends()&lt;/code&gt;. Note that it might be useful to indicate the geography of interest. See &lt;code&gt;gtrendsR::countries&lt;/code&gt; for list of possible geographies.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;accessor-functions&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Accessor Functions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_interest()&lt;/code&gt;: Retrieve interest over time&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_interest_city()&lt;/code&gt;: Retrieve interest by city&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_interest_country()&lt;/code&gt;: Retrieve interest by country&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_interest_dma()&lt;/code&gt;: Retrieve interest by DMA&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_interest_region()&lt;/code&gt;: Retrieve interest by region&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_related_queries()&lt;/code&gt;: Retrieve related queries&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_related_topics()&lt;/code&gt;: Retrieve related topics&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Seeing as I found an interest in this due to the relatively pervasive use of Google Trends in political analysis, I will compare the top five polling candidates in the 2020 Democratic Primary. As of May 22nd, they were Joe Biden, Kamala Harris, Beto O’Rourke, Bernie Sanders, and Elizabeth Warren.&lt;/p&gt;
&lt;p&gt;First, I will create a vector of my desired search terms. Second, I will pass that vector to &lt;code&gt;trendy()&lt;/code&gt; specifying my query date range from the first of 2019 until today (May 25th, 2019).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candidates &amp;lt;- c(&amp;quot;Joe Biden&amp;quot;, &amp;quot;Kamala Harris&amp;quot;, &amp;quot;Beto O&amp;#39;Rourke&amp;quot;, &amp;quot;Bernie Sanders&amp;quot;, &amp;quot;Elizabeth Warren&amp;quot;)

candidate_trends &amp;lt;- trendy(candidates, from = &amp;quot;2019-01-01&amp;quot;, to = Sys.Date())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have a trendy object, we can print it out to get a summary of the trends.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candidate_trends&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ~Trendy results~
## 
## Search Terms: Joe Biden, Kamala Harris, Beto O&amp;#39;Rourke, Bernie Sanders, Elizabeth Warren
## 
## (&amp;gt;^.^)&amp;gt; ~~~~~~~~~~~~~~~~~~~~ summary ~~~~~~~~~~~~~~~~~~~~ &amp;lt;(^.^&amp;lt;)
## # A tibble: 5 x 5
##   keyword          max_hits min_hits from       to        
##   &amp;lt;chr&amp;gt;               &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;    
## 1 Bernie Sanders         93        2 2019-01-01 2019-05-23
## 2 Beto O&amp;#39;Rourke           5        1 2019-01-01 2019-05-23
## 3 Elizabeth Warren       34        1 2019-01-01 2019-05-23
## 4 Joe Biden              84        1 2019-01-01 2019-05-23
## 5 Kamala Harris         100        1 2019-01-01 2019-05-23&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to retrieve the trend data, use &lt;code&gt;get_interest()&lt;/code&gt;. Note, that this is dplyr friendly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_interest(candidate_trends)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 715 x 7
##    date                 hits geo   time          keyword  gprop category   
##    &amp;lt;dttm&amp;gt;              &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;      
##  1 2019-01-01 00:00:00     3 world 2019-01-01 2… Joe Bid… web   All catego…
##  2 2019-01-02 00:00:00     3 world 2019-01-01 2… Joe Bid… web   All catego…
##  3 2019-01-03 00:00:00     3 world 2019-01-01 2… Joe Bid… web   All catego…
##  4 2019-01-04 00:00:00     2 world 2019-01-01 2… Joe Bid… web   All catego…
##  5 2019-01-05 00:00:00     2 world 2019-01-01 2… Joe Bid… web   All catego…
##  6 2019-01-06 00:00:00     2 world 2019-01-01 2… Joe Bid… web   All catego…
##  7 2019-01-07 00:00:00     5 world 2019-01-01 2… Joe Bid… web   All catego…
##  8 2019-01-08 00:00:00     2 world 2019-01-01 2… Joe Bid… web   All catego…
##  9 2019-01-09 00:00:00     2 world 2019-01-01 2… Joe Bid… web   All catego…
## 10 2019-01-10 00:00:00     2 world 2019-01-01 2… Joe Bid… web   All catego…
## # … with 705 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;plotting-interest&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plotting Interest&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candidate_trends %&amp;gt;% 
  get_interest() %&amp;gt;% 
  ggplot(aes(date, hits, color = keyword)) +
  geom_line() +
  geom_point(alpha = .2) +
  theme_minimal() +
  theme(legend.position = &amp;quot;bottom&amp;quot;) +
  labs(x = &amp;quot;&amp;quot;, 
       y = &amp;quot;Relative Search Popularity&amp;quot;,
       title = &amp;quot;Google Search Popularity&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-05-25-introducing-trendyy_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It is also possible to view the related search queries for a given set of keywords using &lt;code&gt;get_related_queries()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;candidate_trends %&amp;gt;% 
  get_related_queries() %&amp;gt;% 
  group_by(keyword) %&amp;gt;% 
  sample_n(2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 5
## # Groups:   keyword [5]
##    subject  related_queries value                  keyword      category   
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;                  &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;      
##  1 17       top             bernie sanders running Bernie Sand… All catego…
##  2 Breakout rising          karl lagerfeld         Bernie Sand… All catego…
##  3 +60%     rising          beto orourke net worth Beto ORourke All catego…
##  4 +400%    rising          beto orourke running … Beto ORourke All catego…
##  5 Breakout rising          elizabeth warren tax … Elizabeth W… All catego…
##  6 Breakout rising          elizabeth warren live… Elizabeth W… All catego…
##  7 Breakout rising          joe biden kissing      Joe Biden    All catego…
##  8 Breakout rising          joe biden lucy flores  Joe Biden    All catego…
##  9 Breakout rising          kamala harris nephew   Kamala Harr… All catego…
## 10 Breakout rising          jussie smollett and k… Kamala Harr… All catego…&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;useful-resources&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Useful Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.google.com/trends/answer/4365533?hl=en&#34;&gt;How Trends Data Is Adjusted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/google-news-lab/what-is-google-trends-data-and-what-does-it-mean-b48f07342ee8&#34;&gt;Post by Google News Lab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>genius tutorial</title>
      <link>/post/2019-05-08-genius-learnr-tutorial/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-05-08-genius-learnr-tutorial/</guid>
      <description>


&lt;div id=&#34;introducing-genius&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introducing genius&lt;/h2&gt;
&lt;p&gt;You want to start analysing song lyrics, where do you go? There have been music information retrieval papers written on the topic of programmatically extracting lyrics from the web. Dozens of people have gone through the laborious task of scraping song lyrics from websites. Even a recent winner of the Shiny competition scraped lyrics from Genius.com.&lt;/p&gt;
&lt;p&gt;I too have been there. Scraping websites is not always the best use of your time. &lt;code&gt;genius&lt;/code&gt; is an R package that will enable you to programatically download song lyrics in a tidy format ready for analysis. To begin using the package, it first must be installed, and loaded. In addition to &lt;code&gt;genius&lt;/code&gt;, we will need our standard data manipulation tools from the &lt;code&gt;tidyverse&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;genius&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(genius)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;single-song-lyrics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Single song lyrics&lt;/h2&gt;
&lt;p&gt;The simplest method of extracting song lyrics is to get just a single song at a time. This is done with the &lt;code&gt;genius_lyrics()&lt;/code&gt; function. It takes two main arguments: &lt;code&gt;artist&lt;/code&gt; and &lt;code&gt;song&lt;/code&gt;. These are the quoted name of the artist and song. Additionally there is a third argument &lt;code&gt;info&lt;/code&gt; which determines what extra metadata you can get. The possible values are &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;simple&lt;/code&gt;, &lt;code&gt;artist&lt;/code&gt;, &lt;code&gt;features&lt;/code&gt;, and &lt;code&gt;all&lt;/code&gt;. I recommend trying them all to see how they work.&lt;/p&gt;
&lt;p&gt;In this example we will work to retrieve the song lyrics for the upcoming musician &lt;a href=&#34;https://rennyconti.bandcamp.com&#34;&gt;Renny Conti&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;floating &amp;lt;- genius_lyrics(&amp;quot;renny conti&amp;quot;, &amp;quot;people floating&amp;quot;)
floating&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 22 x 3
##    track_title      line lyric                                            
##    &amp;lt;chr&amp;gt;           &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                                            
##  1 People Floating     1 He don&amp;#39;t know what to write                      
##  2 People Floating     2 She&amp;#39;s a dream, she&amp;#39;s staying overnight           
##  3 People Floating     3 And they&amp;#39;re stoned, getting high                 
##  4 People Floating     4 But the view ain&amp;#39;t nothing in her eyes           
##  5 People Floating     5 In a cut, small town                             
##  6 People Floating     6 Lift his eyes to see her running round           
##  7 People Floating     7 And it&amp;#39;s sharp, yeah, her shape                  
##  8 People Floating     8 Makes the young man quiver in a constant state of
##  9 People Floating     9 Don&amp;#39;t you know the mountain is that way?         
## 10 People Floating    10 With all the people floating miles and miles away
## # … with 12 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;album-lyrics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Album Lyrics&lt;/h2&gt;
&lt;p&gt;Now that you have the intuition for obtaining lyrics for a single song, we can now create a larger dataset for the lyrics of an entire album using &lt;code&gt;genius_album()&lt;/code&gt;. Similar to &lt;code&gt;genius_lyrics()&lt;/code&gt;, the arguments are &lt;code&gt;artist&lt;/code&gt;, &lt;code&gt;album&lt;/code&gt;, and &lt;code&gt;info&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the exercise below the lyrics for &lt;a href=&#34;https://www.snailmail.band/&#34;&gt;Snail Mail’s&lt;/a&gt; album Lush. Try retrieving the lyrics for an album of your own choosing.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lush &amp;lt;- genius_album(&amp;quot;Snail Mail&amp;quot;, &amp;quot;Lush&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = c(&amp;quot;track_title&amp;quot;, &amp;quot;track_n&amp;quot;, &amp;quot;track_url&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lush&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 265 x 4
##    track_title track_n  line lyric              
##    &amp;lt;chr&amp;gt;         &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;              
##  1 Intro             1     1 Go                 
##  2 Intro             1     2 Get it all         
##  3 Intro             1     3 Let &amp;#39;em watch      
##  4 Intro             1     4 Let it fall        
##  5 Intro             1     5 Nameless           
##  6 Intro             1     6 Sweat it out       
##  7 Intro             1     7 They don&amp;#39;t love you
##  8 Intro             1     8 Do they?           
##  9 Intro             1     9 Grace              
## 10 Intro             1    10 Born and raised    
## # … with 255 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;adding-lyrics-to-a-data-frame&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Adding Lyrics to a data frame&lt;/h2&gt;
&lt;div id=&#34;multiple-songs&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Multiple songs&lt;/h3&gt;
&lt;p&gt;A common use for lyric analysis is to compare the lyrics of one artist to another. In order to do that, you could potentially retrieve the lyrics for multiple songs and albums and then join them together. This has one major issue in my mind, it makes you create multiple object taking up precious memory. For this reason, the function &lt;code&gt;add_genius()&lt;/code&gt; was developed. This enables you to create a tibble with a column for an artists name and their album or song title. &lt;code&gt;add_genius()&lt;/code&gt; will then go through the entire tibble and add song lyrics for the tracks and albums that are available.&lt;/p&gt;
&lt;p&gt;Let’s try this with a tibble of three songs.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;three_songs &amp;lt;- tribble(
  ~ artist, ~ title,
  &amp;quot;Big Thief&amp;quot;, &amp;quot;UFOF&amp;quot;,
  &amp;quot;Andrew Bird&amp;quot;, &amp;quot;Imitosis&amp;quot;,
  &amp;quot;Sylvan Esso&amp;quot;, &amp;quot;Slack Jaw&amp;quot;
)

song_lyrics &amp;lt;- three_songs %&amp;gt;% 
  add_genius(artist, title, type = &amp;quot;lyrics&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = c(&amp;quot;artist&amp;quot;, &amp;quot;title&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;song_lyrics %&amp;gt;% 
  count(artist)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   artist          n
##   &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt;
## 1 Andrew Bird    39
## 2 Big Thief      48
## 3 Sylvan Esso    35&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;multiple-albums&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Multiple albums&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;add_genius()&lt;/code&gt; also extends this functionality to albums.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;albums &amp;lt;- tribble(
  ~ artist, ~ title,
  &amp;quot;Andrew Bird&amp;quot;, &amp;quot;Armchair Apocrypha&amp;quot;,
  &amp;quot;Andrew Bird&amp;quot;, &amp;quot;Things are really great here sort of&amp;quot;
)

album_lyrics &amp;lt;- albums %&amp;gt;% 
  add_genius(artist, title, type = &amp;quot;album&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = c(&amp;quot;track_title&amp;quot;, &amp;quot;track_n&amp;quot;, &amp;quot;track_url&amp;quot;)
## Joining, by = c(&amp;quot;track_title&amp;quot;, &amp;quot;track_n&amp;quot;, &amp;quot;track_url&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = c(&amp;quot;artist&amp;quot;, &amp;quot;title&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;album_lyrics&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 522 x 6
##    artist    title         track_title track_n  line lyric                 
##    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;         &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                 
##  1 Andrew B… Armchair Apo… Fiery Crash       1     1 Turnstiles and mezzan…
##  2 Andrew B… Armchair Apo… Fiery Crash       1     2 Jetways and Dramamine…
##  3 Andrew B… Armchair Apo… Fiery Crash       1     3 And x-ray machines    
##  4 Andrew B… Armchair Apo… Fiery Crash       1     4 You were hurling to s…
##  5 Andrew B… Armchair Apo… Fiery Crash       1     5 G-forces twisting you…
##  6 Andrew B… Armchair Apo… Fiery Crash       1     6 Breeding superstition 
##  7 Andrew B… Armchair Apo… Fiery Crash       1     7 A fatal premonition   
##  8 Andrew B… Armchair Apo… Fiery Crash       1     8 You know you got to e…
##  9 Andrew B… Armchair Apo… Fiery Crash       1     9 The fiery crash       
## 10 Andrew B… Armchair Apo… Fiery Crash       1    10 Oh, close your eyes a…
## # … with 512 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What is important to note here is that the warnings for this function are somewhat informative. When a 404 error occurs, this may be because that the song does not exist in Genius. Or, that the song is actually an instrumental which is the case here with Andrew Bird.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;albums-and-songs&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Albums and Songs&lt;/h3&gt;
&lt;p&gt;In the scenario that you want to mix single songs and lyrics, you can supply a column with the type value of each row. The example below illustrates this. First a tibble with artist, track or album title, and type columns are created. Next, the tibble is piped to &lt;code&gt;add_genius()&lt;/code&gt; with the unquote column names for the artist, title, and type columns. This will then iterate over each row and fetch the appropriate song lyrics.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;song_album &amp;lt;- tribble(
  ~ artist, ~ title, ~ type,
  &amp;quot;Big Thief&amp;quot;, &amp;quot;UFOF&amp;quot;, &amp;quot;lyrics&amp;quot;,
  &amp;quot;Andrew Bird&amp;quot;, &amp;quot;Imitosis&amp;quot;, &amp;quot;lyrics&amp;quot;,
  &amp;quot;Sylvan Esso&amp;quot;, &amp;quot;Slack Jaw&amp;quot;, &amp;quot;lyrics&amp;quot;,
  &amp;quot;Movements&amp;quot;, &amp;quot;Feel Something&amp;quot;, &amp;quot;album&amp;quot;
)

mixed_lyrics &amp;lt;- song_album %&amp;gt;% 
  add_genius(artist, title, type)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = c(&amp;quot;track_title&amp;quot;, &amp;quot;track_n&amp;quot;, &amp;quot;track_url&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = c(&amp;quot;artist&amp;quot;, &amp;quot;title&amp;quot;, &amp;quot;type&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;self-similarity&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Self-similarity&lt;/h2&gt;
&lt;p&gt;Another feature of &lt;code&gt;genius&lt;/code&gt; is the ability to create self-similarity matrices to visualize lyrical patterns within a song. This idea was taken from Colin Morris’ wonderful javascript based &lt;a href=&#34;https://colinmorris.github.io/SongSim/#/gallery&#34;&gt;Song Sim&lt;/a&gt; project. Colin explains the interpretation of a self-similarity matrix in their &lt;a href=&#34;https://www.youtube.com/watch?v=_tjFwcmHy5M&#34;&gt;TEDx talk&lt;/a&gt;. An even better description of the interpretation is available in &lt;a href=&#34;https://colinmorris.github.io/blog/weird-pop-songs&#34;&gt;this post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use Colin’s example we will look at the structure of Ke$ha’s Tik Tok.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;calc_self_sim()&lt;/code&gt; will create a self-similarity matrix of a given song. The main arguments for this function are the tibble (&lt;code&gt;df&lt;/code&gt;), and the column containing the lyrics (&lt;code&gt;lyric_col&lt;/code&gt;). Ideally this is one line per observation as is default from the output of &lt;code&gt;genius_*()&lt;/code&gt;. The tidy output compares every ith word with every word in the song. This measures repetition of words and will show us the structure of the lyrics.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tik_tok &amp;lt;- genius_lyrics(&amp;quot;Ke$ha&amp;quot;, &amp;quot;Tik Tok&amp;quot;)

tt_self_sim &amp;lt;- calc_self_sim(tik_tok, lyric, output = &amp;quot;tidy&amp;quot;)

tt_self_sim&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 226,576 x 5
##     x_id  y_id identical word_x  word_y
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;lgl&amp;gt;     &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; 
##  1     1     1 TRUE      wake    wake  
##  2     2     1 FALSE     up      wake  
##  3     3     1 FALSE     in      wake  
##  4     4     1 FALSE     the     wake  
##  5     5     1 FALSE     morning wake  
##  6     6     1 FALSE     feelin  wake  
##  7     7     1 FALSE     like    wake  
##  8     8     1 FALSE     p       wake  
##  9     9     1 FALSE     diddy   wake  
## 10    10     1 FALSE     hey     wake  
## # … with 226,566 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tt_self_sim %&amp;gt;% 
  ggplot(aes(x = x_id, y = y_id, fill = identical)) +
  geom_tile() +
  scale_fill_manual(values = c(&amp;quot;white&amp;quot;, &amp;quot;black&amp;quot;)) +
  theme_minimal() +
  theme(legend.position = &amp;quot;none&amp;quot;,
        axis.text = element_blank()) +
  scale_y_continuous(trans = &amp;quot;reverse&amp;quot;) +
  labs(title = &amp;quot;Tik Tok&amp;quot;, subtitle = &amp;quot;Self-similarity matrix&amp;quot;, x = &amp;quot;&amp;quot;, y = &amp;quot;&amp;quot;, 
       caption = &amp;quot;The matrix displays that there are three choruses with a bridge between the last two. The bridge displays internal repetition.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-05-08-genius-learnr-tutorial_files/figure-html/song-self-sim-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>genius Plumber API</title>
      <link>/post/genius-api/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/genius-api/</guid>
      <description>


&lt;p&gt;&lt;em&gt;get started &lt;a href=&#34;https://github.com/JosiahParry/genius-api&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Since I created &lt;code&gt;genius&lt;/code&gt;, I’ve wanted to make a version for python. But frankly, that’s a daunting task for me seeing as my python skills are intermediate at best. But recently I’ve been made aware of the package &lt;code&gt;plumber&lt;/code&gt;. To put it plainly, &lt;code&gt;plumber&lt;/code&gt; takes your R code and makes it accessible via an API.&lt;/p&gt;
&lt;p&gt;I thought this would be difficult. I was so wrong.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/l0MYOMxG9ijrXhF3q/giphy.gif&#34; /&gt;

&lt;/div&gt;
&lt;div id=&#34;using-plumber&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using plumber&lt;/h2&gt;
&lt;p&gt;Plumber works by using &lt;code&gt;roxygen&lt;/code&gt; like comments (&lt;code&gt;#*&lt;/code&gt;). Using a single comment, you can define the request type and the end point. Following that you define a function. The arguments to the funciton become the query parameters.&lt;/p&gt;
&lt;p&gt;The main &lt;code&gt;genius&lt;/code&gt; functions only require two main arguments &lt;code&gt;artist&lt;/code&gt; and &lt;code&gt;album&lt;/code&gt; or &lt;code&gt;song&lt;/code&gt;. Making these accessible by API is as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#* @get /track
function(artist, song) {
  genius::genius_lyrics(artist, song)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this line of code I created an endpoint called &lt;code&gt;track&lt;/code&gt; to retrieve song lyrics. The two parameters as defined by the anonymous function are &lt;code&gt;artist&lt;/code&gt; and &lt;code&gt;song&lt;/code&gt;. This means that song lyrics are accessible with a query looking like &lt;code&gt;http://hostname/track?artist=artist_name&amp;amp;song=song_name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But as it stands, this isn’t enough to host the API locally. Save your functions with plumber documentation into a file (I named mine &lt;code&gt;plumber.R&lt;/code&gt;).&lt;/p&gt;
&lt;div id=&#34;creating-the-api&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating the API&lt;/h3&gt;
&lt;p&gt;Creating the API is probably the easiest part. It takes quite literally, two lines of code. The function &lt;code&gt;plumb()&lt;/code&gt; takes two arguments, the &lt;code&gt;file&lt;/code&gt; which contains your plumber commented code, and the &lt;code&gt;dir&lt;/code&gt;ectory that houses it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;plumb()&lt;/code&gt; creates a router which is “responsible for taking an incoming request, submitting it through the appropriate filters.”&lt;/p&gt;
&lt;p&gt;I created a plumber router which would be used to route income queries.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pr &amp;lt;- plumb(&amp;quot;plumber.R&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next step is to actually run the router. Again, this is quite simple by calling the &lt;code&gt;run()&lt;/code&gt; method of the &lt;code&gt;pr&lt;/code&gt; object. All I need to do is specify the &lt;code&gt;port&lt;/code&gt; that the API will listen on, and optionally the &lt;code&gt;host&lt;/code&gt; address.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pr$run(port = 80, host = &amp;quot;0.0.0.0&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I can construct queries in my browser. An example query is &lt;code&gt;http://localhost/track?artist=andrew%20bird&amp;amp;song=proxy%20war&lt;/code&gt;. Sending this request produces a very friendly &lt;code&gt;json&lt;/code&gt; output.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:1,&amp;quot;lyric&amp;quot;:&amp;quot;He don&amp;#39;t have to get over her&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:2,&amp;quot;lyric&amp;quot;:&amp;quot;She don&amp;#39;t to have get over him&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:3,&amp;quot;lyric&amp;quot;:&amp;quot;With all their words preserved forevermore&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:4,&amp;quot;lyric&amp;quot;:&amp;quot;You don&amp;#39;t have to get over her&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:5,&amp;quot;lyric&amp;quot;:&amp;quot;She don&amp;#39;t have to get over you&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:6,&amp;quot;lyric&amp;quot;:&amp;quot;It&amp;#39;s true these two have never met before&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:7,&amp;quot;lyric&amp;quot;:&amp;quot;At least not in real life&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:8,&amp;quot;lyric&amp;quot;:&amp;quot;Where your words cut like a knife&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:9,&amp;quot;lyric&amp;quot;:&amp;quot;Conjuring blood, biblical floods&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:10,&amp;quot;lyric&amp;quot;:&amp;quot;Looks that stop time&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:11,&amp;quot;lyric&amp;quot;:&amp;quot;You don&amp;#39;t have to remember&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:12,&amp;quot;lyric&amp;quot;:&amp;quot;We forget what memories are for&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:13,&amp;quot;lyric&amp;quot;:&amp;quot;Now we store them in the atmosphere&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:14,&amp;quot;lyric&amp;quot;:&amp;quot;If you don&amp;#39;t want to get too close&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:15,&amp;quot;lyric&amp;quot;:&amp;quot;You don&amp;#39;t have to get too close&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:16,&amp;quot;lyric&amp;quot;:&amp;quot;It&amp;#39;s just what we&amp;#39;re calling peer-to-peer&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:17,&amp;quot;lyric&amp;quot;:&amp;quot;You don&amp;#39;t want to get over&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:18,&amp;quot;lyric&amp;quot;:&amp;quot;You don&amp;#39;t have to get over&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:19,&amp;quot;lyric&amp;quot;:&amp;quot;We store them in the atmosphere&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:20,&amp;quot;lyric&amp;quot;:&amp;quot;If you don&amp;#39;t want to get over her&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:21,&amp;quot;lyric&amp;quot;:&amp;quot;She don&amp;#39;t have to get over you&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:22,&amp;quot;lyric&amp;quot;:&amp;quot;It&amp;#39;s true these two have never met before&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:23,&amp;quot;lyric&amp;quot;:&amp;quot;At least not in real life&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:24,&amp;quot;lyric&amp;quot;:&amp;quot;Where your words cut like a knife&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:25,&amp;quot;lyric&amp;quot;:&amp;quot;Conjuring blood, biblical floods&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:26,&amp;quot;lyric&amp;quot;:&amp;quot;Looks that stop time&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:27,&amp;quot;lyric&amp;quot;:&amp;quot;If you don&amp;#39;t want to get over her&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:28,&amp;quot;lyric&amp;quot;:&amp;quot;You don&amp;#39;t have to get over her&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:29,&amp;quot;lyric&amp;quot;:&amp;quot;If you don&amp;#39;t want to get too close&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:30,&amp;quot;lyric&amp;quot;:&amp;quot;You don&amp;#39;t have to get too close&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:31,&amp;quot;lyric&amp;quot;:&amp;quot;If you want to remember&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:32,&amp;quot;lyric&amp;quot;:&amp;quot;If you don&amp;#39;t want to get over&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:33,&amp;quot;lyric&amp;quot;:&amp;quot;If you don&amp;#39;t want to get over&amp;quot;},
{&amp;quot;track_title&amp;quot;:&amp;quot;Proxy War&amp;quot;,&amp;quot;line&amp;quot;:34,&amp;quot;lyric&amp;quot;:&amp;quot;If you don&amp;#39;t want to get over&amp;quot;}
]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;writing-a-python-wrapper&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Writing a Python Wrapper&lt;/h2&gt;
&lt;p&gt;One of the appeals of writing an API is that it can be accessed from any language. This was the inspiriation of creating this API. I want to be able to call R using Python. Creating an API is a great intermediary as writing an API wrapper is much easier for me than recreating all of the code that I wrote in R.&lt;/p&gt;
&lt;p&gt;I want to be able to recreate the three main functions of &lt;code&gt;genius&lt;/code&gt;. These are &lt;code&gt;genius_lyrics()&lt;/code&gt;, &lt;code&gt;genius_album()&lt;/code&gt;, and &lt;code&gt;genius_tracklist()&lt;/code&gt;. In doing this there are two steps I have to consider. The first is creating query urls, and the second is parsing json.&lt;/p&gt;
&lt;p&gt;To create the urls, the &lt;code&gt;requests&lt;/code&gt; library is used. Next, I created a template for the urls.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import requests
url_template = &amp;quot;http://localhost:80/track?artist={}&amp;amp;song={}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea here is that the &lt;code&gt;{}&lt;/code&gt; characters will be filled with provided parameters by using the &lt;code&gt;.format()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;For example, if I wanted to get lyrics for Proxy War by Andrew Bird, I would supply &lt;code&gt;&amp;quot;Andrew Bird&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;Proxy War&amp;quot;&lt;/code&gt; as the arguments to &lt;code&gt;format()&lt;/code&gt;. It’s important to note that these arguments are taken positionally. The url is created using this method.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;url = url_template.format(&amp;quot;andrew bird&amp;quot;, &amp;quot;proxy war&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I am at the point where I can ping the server to receive the json. This is accomplished by using the &lt;code&gt;.get()&lt;/code&gt; method from &lt;code&gt;requests&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;response = requests.get(url)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This returns an object that contains the json response. Next, in order to get this into a format that can be analysed, it needs to be parsed. I prefer a Pandas &lt;code&gt;DataFrame&lt;/code&gt;, and fortunately Pandas has a lovely &lt;code&gt;read_json&lt;/code&gt; function. I will call the &lt;code&gt;.content&lt;/code&gt; attribute of the &lt;code&gt;response&lt;/code&gt; objectm and feed that into the &lt;code&gt;read_json()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import pandas as pd

proxy_war = pd.read_json(response.content)

proxy_war.head()

    line    lyric                                   track_title
0   1   He don&amp;#39;t have to get over her               Proxy War
1   2   She don&amp;#39;t to have get over him              Proxy War
2   3   With all their words preserved forevermore  Proxy War
3   4   You don&amp;#39;t have to get over her              Proxy War
4   5   She don&amp;#39;t have to get over you              Proxy War&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Beautiful. Song lyrics are available through this API and can easily be accessed via python. The next step is to generalize this and the other two functions. The below is the code to create the &lt;code&gt;genius_lyrics()&lt;/code&gt; function in python. It works almost identically as in R. However, at this moment it does not have the ability to set the &lt;code&gt;info&lt;/code&gt; argument. But this can be changed easily in the original &lt;code&gt;plumber.R&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Define genius_lyrics()
def genius_lyrics(artist, song):

    url_template = &amp;quot;http://localhost:80/track?artist={}&amp;amp;song={}&amp;quot;
    
    url = url_template.format(artist, song)

    response = requests.get(url)
    
    song = pd.read_json(response.content)
    
    return(song)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point I’m feeling extremely stoked on the fact that I can use &lt;code&gt;genius&lt;/code&gt; with python. Who says R and python practitioners can’t work together?&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/l2JJyDYEX1tXFmCd2/giphy.gif&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;containerize-with-docker&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Containerize with Docker&lt;/h2&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/cUMNWzWZ5n75LvcCIe/giphy.gif&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;To make the process of setting up this genius API up easier for those who don’t necessarily interact with R, I created a lightweight-ish Docker container. The idea for this was to be able to pull a Docker image, run a command, and then the API will be available on a local port without having to interact with R at all.&lt;/p&gt;
&lt;p&gt;I’m not the most experience person with creating Docker containers but I can borrow code quite well. Fortunately I came across some wonderful &lt;a href=&#34;https://nolisllc.com/assets/presentations/r-tensorflow-api.pdf&#34;&gt;slides&lt;/a&gt; from &lt;code&gt;rstudio::conf 2019&lt;/code&gt;. &lt;a href=&#34;https://twitter.com/heatherklus&#34;&gt;Heather Nollis&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/skyetetra&#34;&gt;Jacqueline Nolis&lt;/a&gt; presented on “API development with R and TensorFlow at T-Mobile”.&lt;/p&gt;
&lt;p&gt;This container needs two things: a linux environment and an installation of R with plumber, genius, and its dependencies. An organization called &lt;a href=&#34;https://www.rocker-project.org/&#34;&gt;The Rocker Project&lt;/a&gt; has created a number of Docker images that are stable and easy to install.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;genius&lt;/code&gt; relies on many packages from the &lt;a href=&#34;https://tidyverse.org&#34;&gt;tidyverse&lt;/a&gt;, the &lt;a href=&#34;https://hub.docker.com/r/rocker/tidyverse&#34;&gt;&lt;code&gt;rocker/tidyverse&lt;/code&gt;&lt;/a&gt; image was used. To use their wonderful image, only one line is needed in my &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Import existing Docker image
FROM rocker/tidyverse:3.5.2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, not knowing exactly what I was doing, I copied code from Jacqueline and Heather’s sample &lt;code&gt;Dockerfile&lt;/code&gt; in their slides. Their comment says that this is necessary to have the &lt;em&gt;“needed linux libraries for plumber”&lt;/em&gt;, I went with it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# install needed linux libraries for plumber
RUN apt-get update -qq &amp;amp;&amp;amp; apt-get install -y \
  libssl-dev \
  libcurl4-gnutls-dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;genius&lt;/code&gt; and &lt;code&gt;plumber&lt;/code&gt; are not part of the tidyverse image and have to be installed manually. The following lines tell Docker to run the listed R commands. For some unknown reason there was an issue with installing &lt;code&gt;genius&lt;/code&gt; from CRAN so the &lt;code&gt;repos&lt;/code&gt; argument was stated explicitly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Install R packages
RUN R -e &amp;quot;install.packages(&amp;#39;genius&amp;#39;, repos = &amp;#39;http://cran.rstudio.com/&amp;#39;)&amp;quot;
RUN R -e &amp;quot;install.packages(&amp;#39;plumber&amp;#39;)&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In addition to the &lt;code&gt;Dockerfile&lt;/code&gt; there are two files in my directory which are used to launch the API. The &lt;code&gt;plumber.R&lt;/code&gt; and &lt;code&gt;launch_api.R&lt;/code&gt; files. These need to be copied into the container. The line &lt;code&gt;COPY / /&lt;/code&gt; copies from the location &lt;code&gt;/&lt;/code&gt; in my directory to the location &lt;code&gt;/&lt;/code&gt; in the container.&lt;/p&gt;
&lt;p&gt;The Docker image has the libraries and files needed, but it needs to be able to actually launch the API. Since the &lt;code&gt;plumber.R&lt;/code&gt; file specifies that the API will be listening on port &lt;code&gt;80&lt;/code&gt;, I need to expose that port in my Docker image using &lt;code&gt;EXPOSE 80&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The last part of this is to run the &lt;code&gt;launch_api.R&lt;/code&gt; so the API is available. The &lt;code&gt;ENTRYPOINT&lt;/code&gt; command tells Docker what to run when the container is launched. In this case &lt;code&gt;ENTRYPOINT [&amp;quot;Rscript&amp;quot;, &amp;quot;launch_api.R&amp;quot;]&lt;/code&gt; tells Docker to run the &lt;code&gt;Rscript&lt;/code&gt; command with the argument &lt;code&gt;launch_api.R&lt;/code&gt;. And with that, the &lt;code&gt;Dockerfile&lt;/code&gt; is complete and read to run.&lt;/p&gt;
&lt;p&gt;The image needs to be built and ran. The simplest way to do this for me was to work from &lt;a href=&#34;https://cloud.docker.com/repository/docker/josiahparry/genius-api&#34;&gt;Dockerhub&lt;/a&gt;. Thus to run this container only three lines of code are needed!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker pull josiahparry/genius-api:working

docker build -t josiahparry/genius-api .

docker run --rm -p 80:80 josiahparry/genius-api&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;https://media.giphy.com/media/3o7qDEq2bMbcbPRQ2c/giphy.gif&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;Boom, now you have an API that will be able to use the functionality of &lt;code&gt;genius&lt;/code&gt;. If you wish to use Python with the API, I wrote a simple script which creates a nice tidy &lt;a href=&#34;https://github.com/JosiahParry/genius-api/blob/master/genius.py&#34;&gt;wrapper&lt;/a&gt; around it.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;If anyone is interested in writing a more stable Python library that can call the functionality described above I’d love your help to make &lt;code&gt;genius&lt;/code&gt; more readily available to the python community.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The Fallacy of one person, one vote</title>
      <link>/post/2019-03-17-the-fallacy-of-one-person-one-vote/</link>
      <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-03-17-the-fallacy-of-one-person-one-vote/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;meta name=&#34;twitter:image&#34; content=&#34;static/img/us_house_ri.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;On October 6, 2018, the US Senate voted 50–48 in favor of the appointment of Associate Justice Brett Kavanaugh. This led many pundits to point out a &lt;a href=&#34;https://govtrackinsider.com/with-kavanaugh-vote-the-senate-reaches-a-historic-low-in-democratic-metric-dfb0f5fa7fa&#34;&gt;“disconnect”&lt;/a&gt; between the Senate and the body politic. The 50 senators who voted “yea” represent only 44% of the nation’s population. The year prior, Supreme Court Justice Neil Gorsuch was confirmed by 54 senators representing approximately 45% of the population. This trend of increasing control by a decreasing portion of the constituency has been attributed to a rise in partisanship.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
In the age of minority rule, a Supreme Court justice appointed by a president who got fewer votes is confirmed by a party in the Senate that got fewer votes, to validate policies opposed by most Americans: &lt;a href=&#34;https://t.co/HoCoFnXnZV&#34;&gt;https://t.co/HoCoFnXnZV&lt;/a&gt;
&lt;/p&gt;
— Paul Waldman (&lt;span class=&#34;citation&#34;&gt;@paulwaldman1&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/paulwaldman1/status/1016784128753176577?ref_src=twsrc%5Etfw&#34;&gt;July 10, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
good morning! just sitting here drinking coffee and thinking about how the state of wyoming has two senators and a total population smaller than portland, oregon. hbu?
&lt;/p&gt;
— sarah jeong (&lt;span class=&#34;citation&#34;&gt;@sarahjeong&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/sarahjeong/status/1098590548590395392?ref_src=twsrc%5Etfw&#34;&gt;February 21, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Since the mid 90’s &lt;a href=&#34;https://gvpt.umd.edu/facultyprofile/lee/frances&#34;&gt;Dr. Frances E. Lee&lt;/a&gt; has been developing a body of literature on Senate apportionment, and her book &lt;a href=&#34;https://www.press.uchicago.edu/ucp/books/book/chicago/S/bo3636044.html&#34;&gt;&lt;em&gt;Sizing Up the Senate&lt;/em&gt;&lt;/a&gt; has become part of the current political milieu (&lt;a href=&#34;https://www.vox.com/2018/10/13/17971340/the-senate-represents-states-not-people-constitution-kavanaugh-supreme-court&#34;&gt;Vox&lt;/a&gt;, &lt;a href=&#34;https://www.cnn.com/2018/07/10/politics/small-states-supreme-court/index.html&#34;&gt;CNN&lt;/a&gt;, &lt;a href=&#34;http://archive.nytimes.com/www.nytimes.com/interactive/2013/03/11/us/politics/democracy-tested.html?_r=0#/%23smallstate&#34;&gt;New York Times&lt;/a&gt;). The book discusses, among many things, the relevant historical context surrounding the creation and organization of the Senate at the constitutional Convention. In her 1998 paper “The Consequences of Senate Apportionment for the Geographic Distribution of Federal Funds” &lt;a href=&#34;https://www.jstor.org/stable/2648000&#34;&gt;(Lee, 1998)&lt;/a&gt;, Dr. Lee describes the “representation index”, a measure to quantify the over- or underrepresentation of a state in the US senate. In the formulation described in the paper, “the index is simply the ratio of the state’s actual population to 1/50th of the nation’s population” (Lee, 1998). In the formulation described in the paper, “the index is simply the ratio of the state’s actual population to 1/50th of the nation’s population” (Lee, 1998). It is written mathematically as &lt;span class=&#34;math inline&#34;&gt;\(\frac{State \ Population}{1/50 \ * \ US \ Population}\)&lt;/span&gt;. This creates a number between &lt;span class=&#34;math inline&#34;&gt;\((0, \infty)\)&lt;/span&gt;. As it is put in &lt;em&gt;Sizing up the Senate&lt;/em&gt;,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;when the [index] is equal to one, the state is neither over- nor underrepresented by reference to a one person, one vote standard; when it is less than one, the state is overrepresented; when it is greater than one, the state is underrepresented. (Lee and Oppenheimer, 1999, p.161)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Many of Lee’s analyses utilize this index, and it has proved useful in temporal comparisons and modeling. However, it does not seem immediately capable of effectively evaluating other legislative bodies such as the House of Representatives. Here I will put forth an adaptation of this measure. That measure will then be adjusted to evaluate the House of Representatives. The House model will then be generalized to fit any representative body.&lt;/p&gt;
&lt;div id=&#34;interpretibility&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Interpretibility&lt;/h2&gt;
&lt;p&gt;The representation index has three main shortcomings, each of which are simple to address. First, the index produces a counter-intuitive number. An index of greater than 1 indicates an underrepresented state, and vice versa. Second, the interpretation of a middle value of 1 is useful for the “one person, one vote” standard. But the index is a divergent measure where 1 is the middle with the bounds (0,∞). Often, when one thinks of divergence, it is from an origin, or 0. Third, the index has a lower limit of 0 and no upper bound. This inhibits comparisons in both directions.&lt;/p&gt;
&lt;p&gt;To illustrate the point let’s take the populations of California and Wyoming based on 2010 Census figures.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Region&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Population&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;WY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;563626&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;37253956&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;US&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;308745538&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If we calculate the representation index for these places, we get:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Region&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Population&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Representation Index&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;WY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;563626&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;37253956&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6.03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this example, California has a representation index of 6. This means that it is vastly underrepresented, whereas Wyoming has an index value of nearly 0 meaning it is vastly overrepresented. To interpret this, we must remember that a larger value actually means less representation.&lt;/p&gt;
&lt;p&gt;But if we invert our formula, we obtain a more informative number.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Region&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Population&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;New Rep. Index&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;WY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;563626&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;10.96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;37253956&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this table it is clear that Wyoming is overrepresented and California is underrepresented. But still, in evaluating these numbers we are required to do the mental math to contextualize the divergence from a middle value. California has a value of 0.83 less than the one person, one vote standard. To handle this, we can center the score around 0 by simply subtracting 1.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Region&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Population&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Representation Index&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;New Rep. Index&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;WY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;563626&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.09&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;9.96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;37253956&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6.03&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-0.83&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Thus the formula for the new representation index is &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{\dfrac{1}{50} \ * \ US \ Population}{State \ Population} - 1\)&lt;/span&gt;. When the measures are compared, we see that the initial measure used by Dr. Lee emphasizes underrepresentation of California, whereas the measure I have suggested emphasises the overrepresentation of Wyoming. From here on I will refer to these as the underrepresentation index (URI) and the overrepresentation index (ORI), respectively.&lt;/p&gt;
&lt;p&gt;The URI and ORI are informative, but both are biased in scale. The bounds of the URI are &lt;span class=&#34;math inline&#34;&gt;\((0,\infty)\)&lt;/span&gt; and the ORI are &lt;span class=&#34;math inline&#34;&gt;\((-1, \infty)\)&lt;/span&gt;. A value is needed that can simultaneously demonstrate the over- and underrepresentation of a state.&lt;/p&gt;
&lt;p&gt;The ORI can be altered slightly to create this balanced measure. By taking the natural logarithm of the ratio 1/50th of the US population to a state’s population, a divergent scale naturally occurs. When the ratio is equal to 1 (or adhering to the one person, one vote standard), the value becomes 0. When the denominator is less than the numerator (or when the state has a smaller share of population than its share of votes), the value is positive and vice versa. Thus we arrive at the formula &lt;span class=&#34;math inline&#34;&gt;\(\ln\Bigg({\dfrac{\dfrac{1}{50} \ * \ US \ Population}{State \ Population}}\Bigg)\)&lt;/span&gt;. The following table compares these three measures.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Region&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Population&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;URI&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;ORI&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;New Rep. Index&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;WY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;563626&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.09&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;9.96&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2.39&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;37253956&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6.03&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-0.83&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-1.80&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The new representation index can be generalized to the House of Representatives or any other representative body. In the following sections, the representation index is adapted to the House of Representatives, the California Assembly and Senate, and the New Hampshire House and Senate.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;representation-index-and-the-house-of-representatives&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Representation Index and the House of Representatives&lt;/h2&gt;
&lt;p&gt;Representation in the House of Representative is proportional meaning that a state has a number of legislative representatives proportional to its population. For example, if a state were to have 50% of the nation’s population it should represent 50% of the legislative body. This is the principle that the representation index evaluates.&lt;/p&gt;
&lt;p&gt;In the above adaptation of the representation index, the nation’s population is divided by 50. This would be the population of a single state if every state had the same number of citizens. Then, that number is scaled (divided) by the state’s actual population, and the logarithm of the result is the representation index. Thus if a state’s population is exactly equal to 1/50th of the nation’s population, its representation in the Senate is proportional.&lt;/p&gt;
&lt;p&gt;To adapt this measure to the House, we must think about how the relationship between proportional representation and population can be expressed numerically. As mentioned above, proportional representation would mean that a state comprising 50% of the national population would likewise comprise 50% of the House’s representatives. The ratio of these two proportions is 1, which creates a similar comparison to Lee’s ratio of 1/50th of national population to state population. This is the motivation for a formula of a representation index for the House of Representatives. The new formula, then, is &lt;span class=&#34;math inline&#34;&gt;\(\ln\Big(\frac{State \ share \ of \ reps}{State \ share \ of \ pop.}\Big)\)&lt;/span&gt;.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:384px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,50,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1],&#34;y&#34;:[-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[37,26,27,13,31,20,22,33,34,38,24,19,23,16,17,14,28,10,39,12,36,21,11,18,29,30,32,35,15,25],&#34;y&#34;:[0.0367454089270444,-0.00261441552604539,-0.00260471597435235,-0.0286697571934874,0.00775434774756783,-0.0141294066018003,-0.00905406966937684,0.0171308924692928,0.0234257162364562,0.0406617564953452,-0.00624310434177001,-0.0168619146408852,-0.00689749550379842,-0.0207484409878478,-0.0186253726334433,-0.0266578473214952,0.00339703937755532,-0.0461365015669134,0.0480591095801477,-0.033702936101385,0.0315255037199173,-0.0130862249214013,-0.0348499610633781,-0.0177069719445167,0.00380303386403798,0.00460391318077289,0.0140581332068645,0.0248776371719525,-0.0264536859658312,-0.00351829016258368],&#34;text&#34;:[&#34;State: Alabama&lt;br /&gt;&lt;br /&gt;% Pop: 1.55%&lt;br /&gt;&lt;br /&gt;# Reps: 7&lt;br /&gt;&lt;br /&gt;RI: 0.04&#34;,&#34;State: Alaska&lt;br /&gt;&lt;br /&gt;% Pop: 0.23%&lt;br /&gt;&lt;br /&gt;# Reps: 1&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;State: Arizona&lt;br /&gt;&lt;br /&gt;% Pop: 2.07%&lt;br /&gt;&lt;br /&gt;# Reps: 9&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;State: Arkansas&lt;br /&gt;&lt;br /&gt;% Pop: 0.95%&lt;br /&gt;&lt;br /&gt;# Reps: 4&lt;br /&gt;&lt;br /&gt;RI: -0.03&#34;,&#34;State: California&lt;br /&gt;&lt;br /&gt;% Pop: 12.09%&lt;br /&gt;&lt;br /&gt;# Reps: 53&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;State: Colorado&lt;br /&gt;&lt;br /&gt;% Pop: 1.63%&lt;br /&gt;&lt;br /&gt;# Reps: 7&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;State: Connecticut&lt;br /&gt;&lt;br /&gt;% Pop: 1.16%&lt;br /&gt;&lt;br /&gt;# Reps: 5&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;State: Florida&lt;br /&gt;&lt;br /&gt;% Pop: 6.1%&lt;br /&gt;&lt;br /&gt;# Reps: 27&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;,&#34;State: Georgia&lt;br /&gt;&lt;br /&gt;% Pop: 3.14%&lt;br /&gt;&lt;br /&gt;# Reps: 14&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;,&#34;State: Hawaii&lt;br /&gt;&lt;br /&gt;% Pop: 0.44%&lt;br /&gt;&lt;br /&gt;# Reps: 2&lt;br /&gt;&lt;br /&gt;RI: 0.04&#34;,&#34;State: Illinois&lt;br /&gt;&lt;br /&gt;% Pop: 4.16%&lt;br /&gt;&lt;br /&gt;# Reps: 18&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;State: Indiana&lt;br /&gt;&lt;br /&gt;% Pop: 2.1%&lt;br /&gt;&lt;br /&gt;# Reps: 9&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;State: Kansas&lt;br /&gt;&lt;br /&gt;% Pop: 0.93%&lt;br /&gt;&lt;br /&gt;# Reps: 4&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;State: Kentucky&lt;br /&gt;&lt;br /&gt;% Pop: 1.41%&lt;br /&gt;&lt;br /&gt;# Reps: 6&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;State: Maryland&lt;br /&gt;&lt;br /&gt;% Pop: 1.87%&lt;br /&gt;&lt;br /&gt;# Reps: 8&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;State: Massachusetts&lt;br /&gt;&lt;br /&gt;% Pop: 2.12%&lt;br /&gt;&lt;br /&gt;# Reps: 9&lt;br /&gt;&lt;br /&gt;RI: -0.03&#34;,&#34;State: Michigan&lt;br /&gt;&lt;br /&gt;% Pop: 3.21%&lt;br /&gt;&lt;br /&gt;# Reps: 14&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;State: Mississippi&lt;br /&gt;&lt;br /&gt;% Pop: 0.96%&lt;br /&gt;&lt;br /&gt;# Reps: 4&lt;br /&gt;&lt;br /&gt;RI: -0.05&#34;,&#34;State: Nevada&lt;br /&gt;&lt;br /&gt;% Pop: 0.88%&lt;br /&gt;&lt;br /&gt;# Reps: 4&lt;br /&gt;&lt;br /&gt;RI: 0.05&#34;,&#34;State: New Jersey&lt;br /&gt;&lt;br /&gt;% Pop: 2.85%&lt;br /&gt;&lt;br /&gt;# Reps: 12&lt;br /&gt;&lt;br /&gt;RI: -0.03&#34;,&#34;State: New Mexico&lt;br /&gt;&lt;br /&gt;% Pop: 0.67%&lt;br /&gt;&lt;br /&gt;# Reps: 3&lt;br /&gt;&lt;br /&gt;RI: 0.03&#34;,&#34;State: New York&lt;br /&gt;&lt;br /&gt;% Pop: 6.29%&lt;br /&gt;&lt;br /&gt;# Reps: 27&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;State: North Carolina&lt;br /&gt;&lt;br /&gt;% Pop: 3.09%&lt;br /&gt;&lt;br /&gt;# Reps: 13&lt;br /&gt;&lt;br /&gt;RI: -0.03&#34;,&#34;State: Ohio&lt;br /&gt;&lt;br /&gt;% Pop: 3.74%&lt;br /&gt;&lt;br /&gt;# Reps: 16&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;State: Pennsylvania&lt;br /&gt;&lt;br /&gt;% Pop: 4.12%&lt;br /&gt;&lt;br /&gt;# Reps: 18&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;State: Tennessee&lt;br /&gt;&lt;br /&gt;% Pop: 2.06%&lt;br /&gt;&lt;br /&gt;# Reps: 9&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;State: Texas&lt;br /&gt;&lt;br /&gt;% Pop: 8.16%&lt;br /&gt;&lt;br /&gt;# Reps: 36&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;State: Utah&lt;br /&gt;&lt;br /&gt;% Pop: 0.9%&lt;br /&gt;&lt;br /&gt;# Reps: 4&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;,&#34;State: Virginia&lt;br /&gt;&lt;br /&gt;% Pop: 2.6%&lt;br /&gt;&lt;br /&gt;# Reps: 11&lt;br /&gt;&lt;br /&gt;RI: -0.03&#34;,&#34;State: Wisconsin&lt;br /&gt;&lt;br /&gt;% Pop: 1.85%&lt;br /&gt;&lt;br /&gt;# Reps: 8&lt;br /&gt;&lt;br /&gt;RI: 0&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;One person, one vote&#34;,&#34;legendgroup&#34;:&#34;One person, one vote&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[42,43,48,45,40,50,44,46,41,47,49],&#34;y&#34;:[0.0644219038217166,0.0662150038920755,0.151518351666763,0.0734138432843397,0.0518384353997281,0.297135812778716,0.0695756532094504,0.124039306238731,0.0520421460569533,0.137030154086907,0.228584942737477],&#34;text&#34;:[&#34;State: Maine&lt;br /&gt;&lt;br /&gt;% Pop: 0.43%&lt;br /&gt;&lt;br /&gt;# Reps: 2&lt;br /&gt;&lt;br /&gt;RI: 0.06&#34;,&#34;State: Minnesota&lt;br /&gt;&lt;br /&gt;% Pop: 1.72%&lt;br /&gt;&lt;br /&gt;# Reps: 8&lt;br /&gt;&lt;br /&gt;RI: 0.07&#34;,&#34;State: Nebraska&lt;br /&gt;&lt;br /&gt;% Pop: 0.59%&lt;br /&gt;&lt;br /&gt;# Reps: 3&lt;br /&gt;&lt;br /&gt;RI: 0.15&#34;,&#34;State: New Hampshire&lt;br /&gt;&lt;br /&gt;% Pop: 0.43%&lt;br /&gt;&lt;br /&gt;# Reps: 2&lt;br /&gt;&lt;br /&gt;RI: 0.07&#34;,&#34;State: North Dakota&lt;br /&gt;&lt;br /&gt;% Pop: 0.22%&lt;br /&gt;&lt;br /&gt;# Reps: 1&lt;br /&gt;&lt;br /&gt;RI: 0.05&#34;,&#34;State: Rhode Island&lt;br /&gt;&lt;br /&gt;% Pop: 0.34%&lt;br /&gt;&lt;br /&gt;# Reps: 2&lt;br /&gt;&lt;br /&gt;RI: 0.3&#34;,&#34;State: South Carolina&lt;br /&gt;&lt;br /&gt;% Pop: 1.5%&lt;br /&gt;&lt;br /&gt;# Reps: 7&lt;br /&gt;&lt;br /&gt;RI: 0.07&#34;,&#34;State: Vermont&lt;br /&gt;&lt;br /&gt;% Pop: 0.2%&lt;br /&gt;&lt;br /&gt;# Reps: 1&lt;br /&gt;&lt;br /&gt;RI: 0.12&#34;,&#34;State: Washington&lt;br /&gt;&lt;br /&gt;% Pop: 2.18%&lt;br /&gt;&lt;br /&gt;# Reps: 10&lt;br /&gt;&lt;br /&gt;RI: 0.05&#34;,&#34;State: West Virginia&lt;br /&gt;&lt;br /&gt;% Pop: 0.6%&lt;br /&gt;&lt;br /&gt;# Reps: 3&lt;br /&gt;&lt;br /&gt;RI: 0.14&#34;,&#34;State: Wyoming&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;# Reps: 1&lt;br /&gt;&lt;br /&gt;RI: 0.23&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Overrepresented&#34;,&#34;legendgroup&#34;:&#34;Overrepresented&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[2,4,6,7,9,1,8,5,3],&#34;y&#34;:[-0.237120715235475,-0.101166549472085,-0.0724308581279716,-0.0644859894968979,-0.0552501477906787,-0.334138005675672,-0.0574575546100993,-0.0784866944789803,-0.139205618071517],&#34;text&#34;:[&#34;State: Delaware&lt;br /&gt;&lt;br /&gt;% Pop: 0.29%&lt;br /&gt;&lt;br /&gt;# Reps: 1&lt;br /&gt;&lt;br /&gt;RI: -0.24&#34;,&#34;State: Idaho&lt;br /&gt;&lt;br /&gt;% Pop: 0.51%&lt;br /&gt;&lt;br /&gt;# Reps: 2&lt;br /&gt;&lt;br /&gt;RI: -0.1&#34;,&#34;State: Iowa&lt;br /&gt;&lt;br /&gt;% Pop: 0.99%&lt;br /&gt;&lt;br /&gt;# Reps: 4&lt;br /&gt;&lt;br /&gt;RI: -0.07&#34;,&#34;State: Louisiana&lt;br /&gt;&lt;br /&gt;% Pop: 1.47%&lt;br /&gt;&lt;br /&gt;# Reps: 6&lt;br /&gt;&lt;br /&gt;RI: -0.06&#34;,&#34;State: Missouri&lt;br /&gt;&lt;br /&gt;% Pop: 1.94%&lt;br /&gt;&lt;br /&gt;# Reps: 8&lt;br /&gt;&lt;br /&gt;RI: -0.06&#34;,&#34;State: Montana&lt;br /&gt;&lt;br /&gt;% Pop: 0.32%&lt;br /&gt;&lt;br /&gt;# Reps: 1&lt;br /&gt;&lt;br /&gt;RI: -0.33&#34;,&#34;State: Oklahoma&lt;br /&gt;&lt;br /&gt;% Pop: 1.22%&lt;br /&gt;&lt;br /&gt;# Reps: 5&lt;br /&gt;&lt;br /&gt;RI: -0.06&#34;,&#34;State: Oregon&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;# Reps: 5&lt;br /&gt;&lt;br /&gt;RI: -0.08&#34;,&#34;State: South Dakota&lt;br /&gt;&lt;br /&gt;% Pop: 0.26%&lt;br /&gt;&lt;br /&gt;# Reps: 1&lt;br /&gt;&lt;br /&gt;RI: -0.14&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Underrepresented&#34;,&#34;legendgroup&#34;:&#34;Underrepresented&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:46.3196347031963,&#34;r&#34;:7.30593607305936,&#34;b&#34;:16.4383561643836,&#34;l&#34;:48.9497716894977},&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;title&#34;:&#34;US House of Representatives&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:17.5342465753425},&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-1.45,52.45],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;tickvals&#34;:[0,10,20,30,40,50],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.365701696598392,0.328699503701436],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;-0.2&#34;,&#34;0.0&#34;,&#34;0.2&#34;],&#34;tickvals&#34;:[-0.2,0,0.2],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;-0.2&#34;,&#34;0.0&#34;,&#34;0.2&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:&#34;Representation Index&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1}],&#34;showlegend&#34;:true,&#34;legend&#34;:{&#34;bgcolor&#34;:null,&#34;bordercolor&#34;:null,&#34;borderwidth&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;y&#34;:1,&#34;orientation&#34;:&#34;h&#34;},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;modeBarButtonsToAdd&#34;:[{&#34;name&#34;:&#34;Collaborate&#34;,&#34;icon&#34;:{&#34;width&#34;:1000,&#34;ascent&#34;:500,&#34;descent&#34;:-50,&#34;path&#34;:&#34;M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z&#34;},&#34;click&#34;:&#34;function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == &#39;?viewer_pane=1&#39;) {\n          alert(&#39;To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;);\n        } else {\n          window.open(&#39;https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;, &#39;_blank&#39;);\n        }\n      }&#34;}],&#34;cloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;38407d4122f4&#34;:{&#34;x&#34;:{},&#34;ymin&#34;:{},&#34;ymax&#34;:{},&#34;type&#34;:&#34;scatter&#34;},&#34;38403f5e016a&#34;:{&#34;yintercept&#34;:{}},&#34;384034aef6a6&#34;:{&#34;yintercept&#34;:{}},&#34;38404ac3274f&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;colour&#34;:{},&#34;label&#34;:{}}},&#34;cur_data&#34;:&#34;38407d4122f4&#34;,&#34;visdat&#34;:{&#34;38407d4122f4&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;38403f5e016a&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;384034aef6a6&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;38404ac3274f&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[&#34;config.modeBarButtonsToAdd.0.click&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;In this case, if the share of the population is smaller than the share of representatives, the index is inflated, meaning the state is overrepresented. If the share of population is greater than the share of representatives, the index is deflated, meaning the state is underrepresented. This index ranges from &lt;span class=&#34;math inline&#34;&gt;\((-\infty, \infty)\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;generalizing-the-representation-index&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Generalizing the Representation Index&lt;/h2&gt;
&lt;p&gt;The representation index for the House of Representatives is written in such a way that it can be adapted for any representative body. The formula evaluates equality of the share of representatives and the share of the total constituency. In general, the formula can be written as &lt;span class=&#34;math inline&#34;&gt;\(\ln\Big(\frac{\%\ share \ of \ reps}{\% \ share \ of \ constituency}\Big)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;To illustrate, let’s use this formula to calculate the representation index of the Assembly and Senate of California. In 2011, after the most recent census, California redrew its districts. The data used in this demonstration are from the &lt;a href=&#34;http://spreadsheets.latimes.com/stateAssembly-2011-0729/&#34;&gt;LA Times&lt;/a&gt;. The California Assembly and Senate have 80 and 40 members respectively each representing one district.&lt;/p&gt;
&lt;p&gt;For this example, I consider a difference of 5% in either direction as adhering to the one person, one vote principle. To illustrate this, if the ratio is &lt;span class=&#34;math inline&#34;&gt;\(\frac{1%}{0.95}\)&lt;/span&gt; the index score is 0.05. Alternatively, if the ratio is &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{1.05}\)&lt;/span&gt;, the index score is -0.05.&lt;/p&gt;
&lt;p&gt;&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:672px;height:384px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,80,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1],&#34;y&#34;:[-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-2.95,83.95],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-2.95,83.95],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],&#34;y&#34;:[-0.00180124571805692,0.00488754102458868,-0.00707973561743144,-0.00152468844696496,0.00565390481719283,-0.00698591118420078,0.00293435224436477,0.00409157645799164,-0.00607493017392915,-0.000333975863337648,-0.00281249379566416,0.00842851557306099,0.00841552206331884,-0.00251693805234241,-0.00742297273048902,-0.00058081657184328,-0.00391470292674458,-0.00853288977109179,-0.00448352385758394,0.00930380052984447,0.00943602648902758,0.00633440988621225,-0.00537673211567997,0.00231211689230227,0.00964198698653246,-0.0095990389988916,0.00338027448679367,-0.00089196368792765,-0.000419840412064945,0.000522926818971367,-0.00554759014375334,-0.00252122209279231,-0.00772986763844217,-0.00237126975593257,-0.00355742062178917,0.00567766068462329,-0.00112794176451427,-0.0089969427069974,-0.00160401889800032,0.00690509485334389,0.00682509286406262,0.0058634078314548,-0.00584865636885262,0.00733548563967614,-0.00448138603882179,0.00265225295000313,-0.00979256893230247,0.00933848105716548,0.00674293532044042,-0.00934803231186174,6.75387323880951e-05,-7.6233224059172e-06,0.00378328348236586,-0.00165332924986096,0.00858011899612357,0.000800127693606861,-0.000366175933107304,-0.00553264123166014,0.00108815417683866,-0.00985636180113196,-0.00993716026005157,-0.00222772288388305,0.0097569097011333,-0.00155685019914014,0.00898306265662102,-0.00443649078905234,0.00625877533934064,0.00564526645986284,0.000767891085496818,-0.00607919899891375,0.00665862275425107,-0.00910334651380039,0.00986967689987724,-0.00977343027806834,0.000271578505817245,-0.00632035801457436,0.00346000134692278,0.00817084248948629,-0.00159115492805028,0.00230565973179542],&#34;text&#34;:[&#34;District: 01&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 02&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 03&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 04&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 05&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 06&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 07&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 08&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 09&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 10&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 11&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 12&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 13&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 14&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 15&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 16&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 17&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 18&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 19&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 20&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 21&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 22&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 23&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 24&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 25&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 26&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 27&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 28&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 29&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 30&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 31&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 32&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 33&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 34&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 35&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 36&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 37&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 38&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 39&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 40&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 41&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 42&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 43&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 44&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 45&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 46&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 47&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 48&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 49&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 50&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 51&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 52&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 53&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 54&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 55&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 56&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 57&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 58&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 59&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 60&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 61&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 62&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 63&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 64&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 65&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 66&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 67&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 68&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 69&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 70&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 71&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 72&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 73&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 74&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 75&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 76&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 77&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 78&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 79&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 80&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;One person, one vote&#34;,&#34;legendgroup&#34;:&#34;One person, one vote&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:46.3196347031963,&#34;r&#34;:7.30593607305936,&#34;b&#34;:16.4383561643836,&#34;l&#34;:60.6392694063927},&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;title&#34;:&#34;California Assembly&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:17.5342465753425},&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-2.95,83.95],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;20&#34;,&#34;40&#34;,&#34;60&#34;,&#34;80&#34;],&#34;tickvals&#34;:[0,20,40,60,80],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;20&#34;,&#34;40&#34;,&#34;60&#34;,&#34;80&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.055,0.055],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;-0.050&#34;,&#34;-0.025&#34;,&#34;0.000&#34;,&#34;0.025&#34;,&#34;0.050&#34;],&#34;tickvals&#34;:[-0.05,-0.025,0,0.025,0.05],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;-0.050&#34;,&#34;-0.025&#34;,&#34;0.000&#34;,&#34;0.025&#34;,&#34;0.050&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:&#34;Representation Index&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1}],&#34;showlegend&#34;:true,&#34;legend&#34;:{&#34;bgcolor&#34;:null,&#34;bordercolor&#34;:null,&#34;borderwidth&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;y&#34;:1,&#34;orientation&#34;:&#34;h&#34;},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;modeBarButtonsToAdd&#34;:[{&#34;name&#34;:&#34;Collaborate&#34;,&#34;icon&#34;:{&#34;width&#34;:1000,&#34;ascent&#34;:500,&#34;descent&#34;:-50,&#34;path&#34;:&#34;M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z&#34;},&#34;click&#34;:&#34;function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == &#39;?viewer_pane=1&#39;) {\n          alert(&#39;To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;);\n        } else {\n          window.open(&#39;https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;, &#39;_blank&#39;);\n        }\n      }&#34;}],&#34;cloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;38405fac269f&#34;:{&#34;x&#34;:{},&#34;ymin&#34;:{},&#34;ymax&#34;:{},&#34;type&#34;:&#34;scatter&#34;},&#34;38401f1bc1cb&#34;:{&#34;yintercept&#34;:{}},&#34;384057500661&#34;:{&#34;yintercept&#34;:{}},&#34;384046d2f70f&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;colour&#34;:{},&#34;label&#34;:{}}},&#34;cur_data&#34;:&#34;38405fac269f&#34;,&#34;visdat&#34;:{&#34;38405fac269f&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;38401f1bc1cb&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;384057500661&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;384046d2f70f&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[&#34;config.modeBarButtonsToAdd.0.click&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt; &lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:672px;height:384px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,40,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1],&#34;y&#34;:[-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-0.95,41.95],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-0.95,41.95],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],&#34;y&#34;:[-0.00427185762664409,0.00351926191511959,0.00342229190463547,-0.00707547106143568,-0.00835508767074867,-0.00530304058093501,0.00715595339639287,0.00175910462909477,-0.00988506726447462,0.00823904360920187,0.000532595323549103,-0.00200914926870539,0.00416273449030803,-0.00431462209280041,0.00297312019877842,0.00995534509832195,8.48235661770138e-06,0.00282128762781589,0.0026867035596748,-0.00491206422468258,0.00114619940698815,0.00220450299364808,-0.00263581336352611,-0.00231770990010286,0.0047505209520126,0.00386412034876342,-0.00461392216045318,0.00137196289167112,0.00630631638672219,0.00955092553516658,-0.00989676184664069,-0.00220629621024482,0.00471060524965552,0.00371754098278003,-0.00350071438735146,-0.00720446583519414,-0.00710105812461796,0.00170747707029238,0.00355481994178211,-0.00397138569097489],&#34;text&#34;:[&#34;District: 01&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 02&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 03&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 04&lt;br /&gt;&lt;br /&gt;% Pop: 2.52%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 05&lt;br /&gt;&lt;br /&gt;% Pop: 2.52%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 06&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 07&lt;br /&gt;&lt;br /&gt;% Pop: 2.48%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 08&lt;br /&gt;&lt;br /&gt;% Pop: 2.5%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 09&lt;br /&gt;&lt;br /&gt;% Pop: 2.52%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 10&lt;br /&gt;&lt;br /&gt;% Pop: 2.48%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 11&lt;br /&gt;&lt;br /&gt;% Pop: 2.5%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 12&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 13&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 14&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 15&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 16&lt;br /&gt;&lt;br /&gt;% Pop: 2.48%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 17&lt;br /&gt;&lt;br /&gt;% Pop: 2.5%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 18&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 19&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 20&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 21&lt;br /&gt;&lt;br /&gt;% Pop: 2.5%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 22&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 23&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 24&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 25&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 26&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 27&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 28&lt;br /&gt;&lt;br /&gt;% Pop: 2.5%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 29&lt;br /&gt;&lt;br /&gt;% Pop: 2.48%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 30&lt;br /&gt;&lt;br /&gt;% Pop: 2.48%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 31&lt;br /&gt;&lt;br /&gt;% Pop: 2.52%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 32&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 33&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 34&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 35&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 36&lt;br /&gt;&lt;br /&gt;% Pop: 2.52%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 37&lt;br /&gt;&lt;br /&gt;% Pop: 2.52%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 38&lt;br /&gt;&lt;br /&gt;% Pop: 2.5%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 39&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 40&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;One person, one vote&#34;,&#34;legendgroup&#34;:&#34;One person, one vote&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:46.3196347031963,&#34;r&#34;:7.30593607305936,&#34;b&#34;:16.4383561643836,&#34;l&#34;:60.6392694063927},&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;title&#34;:&#34;California Senate&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:17.5342465753425},&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.95,41.95],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;],&#34;tickvals&#34;:[-1.11022302462516e-16,10,20,30,40],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.055,0.055],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;-0.050&#34;,&#34;-0.025&#34;,&#34;0.000&#34;,&#34;0.025&#34;,&#34;0.050&#34;],&#34;tickvals&#34;:[-0.05,-0.025,0,0.025,0.05],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;-0.050&#34;,&#34;-0.025&#34;,&#34;0.000&#34;,&#34;0.025&#34;,&#34;0.050&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:&#34;Representation Index&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1}],&#34;showlegend&#34;:true,&#34;legend&#34;:{&#34;bgcolor&#34;:null,&#34;bordercolor&#34;:null,&#34;borderwidth&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;y&#34;:1,&#34;orientation&#34;:&#34;h&#34;},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;modeBarButtonsToAdd&#34;:[{&#34;name&#34;:&#34;Collaborate&#34;,&#34;icon&#34;:{&#34;width&#34;:1000,&#34;ascent&#34;:500,&#34;descent&#34;:-50,&#34;path&#34;:&#34;M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z&#34;},&#34;click&#34;:&#34;function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == &#39;?viewer_pane=1&#39;) {\n          alert(&#39;To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;);\n        } else {\n          window.open(&#39;https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;, &#39;_blank&#39;);\n        }\n      }&#34;}],&#34;cloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;384077aabd83&#34;:{&#34;x&#34;:{},&#34;ymin&#34;:{},&#34;ymax&#34;:{},&#34;type&#34;:&#34;scatter&#34;},&#34;38406a8020d5&#34;:{&#34;yintercept&#34;:{}},&#34;38401ebb693&#34;:{&#34;yintercept&#34;:{}},&#34;38401a1f6de1&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;colour&#34;:{},&#34;label&#34;:{}}},&#34;cur_data&#34;:&#34;384077aabd83&#34;,&#34;visdat&#34;:{&#34;384077aabd83&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;38406a8020d5&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;38401ebb693&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;38401a1f6de1&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[&#34;config.modeBarButtonsToAdd.0.click&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;The above example demonstrates the use of the representation index for both houses of the California legislature. This is good news as it demonstrates that the state upholds the &lt;a href=&#34;https://www.law.cornell.edu/constitution/amendmentxiv&#34;&gt;Equal Protection Clause&lt;/a&gt; of the Fourteenth Amendment and adheres to the Supreme Court decision &lt;a href=&#34;https://www.law.cornell.edu/supremecourt/text/377/533&#34;&gt;Reynolds v. Sims&lt;/a&gt;, in which the court held that state districts must be proportionally drawn (unlike US Senate districts).&lt;/p&gt;
&lt;p&gt;As Wikipedia &lt;a href=&#34;https://en.wikipedia.org/wiki/California_State_Assembly_districts&#34;&gt;states&lt;/a&gt;, “[given California]’s large population and relatively small legislature, the Assembly has the largest population per representative ratio of any lower house legislature in the United States; only the federal U.S. House of Representatives has a larger ratio.” California’s representative body differs greatly from that of, for example, New Hampshire.&lt;/p&gt;
&lt;p&gt;New Hampshire has arguably the most unique lower house legislature of any state: there are 400 representatives from 204 districts. House districts also include what are called &lt;a href=&#34;https://www.nhmagazine.com/2012/11/01/new-hampshire-districts/&#34;&gt;floterial districts&lt;/a&gt;, areas that represent multiple municipalities. The legality of such districts has been disputed in the state Supreme Court, but nonetheless they persist, and as a result, New Hampshire has one of the smallest constituent-to-representative ratios in the nation. This results in overrepresentation for almost every municipality.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:672px;height:384px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,234,234,233,232,231,230,229,228,227,226,225,224,223,222,221,220,219,218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1],&#34;ytext&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-10.65,245.65],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-10.65,245.65],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[17,21,31,42,55,61,68,72,112,115,119,133,138,146,170,179,182,187],&#34;y&#34;:[0.0254626239550565,-0.0208748027267547,-0.0034113941416318,0.0144883535674268,0.0158646497336756,0.0206890541451756,-0.0338230945596551,-0.0197557173405318,0.0130104596744076,0.0150477180230631,-0.0182210219686053,0.0042022713034326,0.0505341830364281,0.0277840726484736,0.023979332521771,-0.0232062589994743,-0.000504031184485847,0.0438063726884172],&#34;text&#34;:[&#34;Municipality: Bedford&lt;br /&gt;&lt;br /&gt;% Pop: 1.71%&lt;br /&gt;&lt;br /&gt;RI: 0.03&#34;,&#34;Municipality: Berlin&lt;br /&gt;&lt;br /&gt;% Pop: 0.77%&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;Municipality: Campton&lt;br /&gt;&lt;br /&gt;% Pop: 0.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;Municipality: Claremont&lt;br /&gt;&lt;br /&gt;% Pop: 0.99%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;Municipality: Derry&lt;br /&gt;&lt;br /&gt;% Pop: 2.46%&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;,&#34;Municipality: Durham&lt;br /&gt;&lt;br /&gt;% Pop: 1.22%&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;,&#34;Municipality: Epping&lt;br /&gt;&lt;br /&gt;% Pop: 0.52%&lt;br /&gt;&lt;br /&gt;RI: -0.03&#34;,&#34;Municipality: Farmington&lt;br /&gt;&lt;br /&gt;% Pop: 0.51%&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;Municipality: Keene&lt;br /&gt;&lt;br /&gt;% Pop: 1.73%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;Municipality: Laconia&lt;br /&gt;&lt;br /&gt;% Pop: 1.23%&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;,&#34;Municipality: Lebanon&lt;br /&gt;&lt;br /&gt;% Pop: 1.02%&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;Municipality: Manchester&lt;br /&gt;&lt;br /&gt;% Pop: 8.22%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;Municipality: Merrimack&lt;br /&gt;&lt;br /&gt;% Pop: 1.9%&lt;br /&gt;&lt;br /&gt;RI: 0.05&#34;,&#34;Municipality: Nashua&lt;br /&gt;&lt;br /&gt;% Pop: 6.57%&lt;br /&gt;&lt;br /&gt;RI: 0.03&#34;,&#34;Municipality: Peterborough&lt;br /&gt;&lt;br /&gt;% Pop: 0.49%&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;,&#34;Municipality: Raymond&lt;br /&gt;&lt;br /&gt;% Pop: 0.77%&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;Municipality: Rochester&lt;br /&gt;&lt;br /&gt;% Pop: 2.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;Municipality: Salem&lt;br /&gt;&lt;br /&gt;% Pop: 2.15%&lt;br /&gt;&lt;br /&gt;RI: 0.04&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;One person, one vote&#34;,&#34;legendgroup&#34;:&#34;One person, one vote&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,62,63,64,65,66,67,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,113,114,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,134,135,136,137,139,140,141,142,143,144,145,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,178,180,181,183,184,185,186,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,232,233,234],&#34;y&#34;:[2.01164009347833,2.61333144528822,1.81299615185143,0.437794740040622,0.543078329662793,0.641813170348482,0.163500992506756,1.04116492765135,1.63212116731475,1.57427163432798,0.89872815818628,1.11705312676682,0.367187663199129,0.120999854200485,0.867317997848372,1.80692817206767,0.320687198097477,1.93245435732009,2.88222101839064,1.36990343372891,0.515014296010478,0.256679131023901,1.39242957886184,0.378868522811885,2.21876562763809,1.18523995548987,2.93547592192618,0.241076203436264,0.532366674067865,1.23060033558418,1.44410158940616,2.13598694014568,1.12748609409938,0.270119498763906,3.67895723496003,1.19110507494227,1.30549314472832,1.3601814049862,3.19868205539246,1.07158063701735,2.17717680391885,0.163775859972659,0.280122524213841,1.80995755941928,2.17062799203994,1.91916852060844,1.73346858222286,0.404655075573231,1.08361447658107,1.9433155967517,2.92848777329225,0.0854263094683168,1.84452890348437,3.10469989703166,1.27171984163521,1.02692086612543,3.22082318126967,3.49614415689788,2.20448452807268,4.35746286552702,0.36482486540779,0.752850144011114,3.13505635951225,0.105121209822339,1.43530203545431,2.14676358960744,1.78449564774075,0.658748214979481,1.86227334878344,0.350552602694597,0.623954718084907,0.987497519806808,1.40813987176816,0.121336158222488,0.18128828505729,2.10372607792746,1.99909843148529,1.20260889942375,1.7167457844934,0.509296443266374,1.8682052299047,2.41654856366508,0.66105369150498,0.103401746400219,1.76603358490102,1.80511493494349,0.165168903177407,2.35661159844041,5.05061004608697,0.362681701278423,2.77952362015229,0.329415475906989,1.81512867360399,0.808948733459572,1.200709877262,1.56046517840832,0.254499223768404,0.579635925396591,0.385815614128905,2.07721850180758,0.624789094437027,1.7960977412933,1.15216720721585,1.00617255060759,0.644458174724461,2.77872393998173,2.26933820127373,0.429520732829095,1.74193603332196,0.662208426044376,1.42719977860356,0.462089324308042,0.532704969064326,0.592843327802859,2.51286091492459,2.056623481443,2.05895584401636,2.22867760306246,1.35362400444004,1.14558823611781,1.50931373805321,1.56901223898678,0.746230734498438,1.31849291291839,1.61138526883557,0.0881883382271057,0.382792661268019,2.12844921601426,1.39282933901108,0.901219549524053,1.52973650368707,0.573625654519899,1.94071886716999,0.943555896259918,0.399088991961005,0.251557480903847,0.451036889635595,1.13394666110232,2.06422363495122,2.13977721631946,0.36086361618322,0.442189334831429,0.305880162643004,0.391127870745137,0.734673523242077,1.09090490984375,0.459491613554528,0.980788537187813,3.00366767180009,1.68733189928711,1.11038386447215,1.00611328959244,0.350834650362522,2.14740114143012,2.03416356814541,0.905140162240283,1.43072346345998,0.77847614590047,0.389660519051187,0.0704225428425288,3.08496241419333,2.15765764159731,0.485293331541002,1.66228586736102,3.79674027061641,1.50326736424134,0.207705598374997,1.56401758001268,0.811125377265783,0.984888290178775,2.01909169278675,0.41565529874135,2.94534210484723,2.19976912694744,0.692879507941958,2.10984979577799,2.0198399157921,2.46968874305938,1.88621496467006,0.974255800899447,0.496733154486428,2.18774493398064,0.307364543186796,2.45744012098318,1.57907702560292,0.662786293728761,1.50662194638749,0.59194541986788,0.313867749956431,1.24757168661004,1.56972780252357,0.966002659142726,0.609053780124894,1.14652544330918,1.43655438377078,1.83390712289631,0.970513797517711,1.24938868905673,0.844183422446715,1.98309809013885,1.78272259763087,2.60927464459261,0.41565529874135,1.27278310595654,1.9961701717062,2.04159429682046,1.038636481298,0.894638172934755,1.2918466447438,0.437102618661049,4.11588561252398,0.0703540457821676,0.891726962727297],&#34;text&#34;:[&#34;Municipality: Acworth&lt;br /&gt;&lt;br /&gt;% Pop: 0.07%&lt;br /&gt;&lt;br /&gt;RI: 2.01&#34;,&#34;Municipality: Albany&lt;br /&gt;&lt;br /&gt;% Pop: 0.05%&lt;br /&gt;&lt;br /&gt;RI: 2.61&#34;,&#34;Municipality: Alexandria&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.81&#34;,&#34;Municipality: Allenstown&lt;br /&gt;&lt;br /&gt;% Pop: 0.32%&lt;br /&gt;&lt;br /&gt;RI: 0.44&#34;,&#34;Municipality: Alstead&lt;br /&gt;&lt;br /&gt;% Pop: 0.15%&lt;br /&gt;&lt;br /&gt;RI: 0.54&#34;,&#34;Municipality: Alton&lt;br /&gt;&lt;br /&gt;% Pop: 0.39%&lt;br /&gt;&lt;br /&gt;RI: 0.64&#34;,&#34;Municipality: Amherst&lt;br /&gt;&lt;br /&gt;% Pop: 0.85%&lt;br /&gt;&lt;br /&gt;RI: 0.16&#34;,&#34;Municipality: Andover&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;RI: 1.04&#34;,&#34;Municipality: Antrim&lt;br /&gt;&lt;br /&gt;% Pop: 0.2%&lt;br /&gt;&lt;br /&gt;RI: 1.63&#34;,&#34;Municipality: Ashland&lt;br /&gt;&lt;br /&gt;% Pop: 0.16%&lt;br /&gt;&lt;br /&gt;RI: 1.57&#34;,&#34;Municipality: Atkinson&lt;br /&gt;&lt;br /&gt;% Pop: 0.51%&lt;br /&gt;&lt;br /&gt;RI: 0.9&#34;,&#34;Municipality: Auburn&lt;br /&gt;&lt;br /&gt;% Pop: 0.41%&lt;br /&gt;&lt;br /&gt;RI: 1.12&#34;,&#34;Municipality: Barnstead&lt;br /&gt;&lt;br /&gt;% Pop: 0.35%&lt;br /&gt;&lt;br /&gt;RI: 0.37&#34;,&#34;Municipality: Barrington&lt;br /&gt;&lt;br /&gt;% Pop: 0.66%&lt;br /&gt;&lt;br /&gt;RI: 0.12&#34;,&#34;Municipality: Bartlett&lt;br /&gt;&lt;br /&gt;% Pop: 0.21%&lt;br /&gt;&lt;br /&gt;RI: 0.87&#34;,&#34;Municipality: Bath&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 1.81&#34;,&#34;Municipality: Belmont&lt;br /&gt;&lt;br /&gt;% Pop: 0.54%&lt;br /&gt;&lt;br /&gt;RI: 0.32&#34;,&#34;Municipality: Bennington&lt;br /&gt;&lt;br /&gt;% Pop: 0.11%&lt;br /&gt;&lt;br /&gt;RI: 1.93&#34;,&#34;Municipality: Benton&lt;br /&gt;&lt;br /&gt;% Pop: 0.03%&lt;br /&gt;&lt;br /&gt;RI: 2.88&#34;,&#34;Municipality: Bethlehem&lt;br /&gt;&lt;br /&gt;% Pop: 0.19%&lt;br /&gt;&lt;br /&gt;RI: 1.37&#34;,&#34;Municipality: Boscawen&lt;br /&gt;&lt;br /&gt;% Pop: 0.3%&lt;br /&gt;&lt;br /&gt;RI: 0.52&#34;,&#34;Municipality: Bow&lt;br /&gt;&lt;br /&gt;% Pop: 0.58%&lt;br /&gt;&lt;br /&gt;RI: 0.26&#34;,&#34;Municipality: Bradford&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.39&#34;,&#34;Municipality: Brentwood&lt;br /&gt;&lt;br /&gt;% Pop: 0.34%&lt;br /&gt;&lt;br /&gt;RI: 0.38&#34;,&#34;Municipality: Bridgewater&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 2.22&#34;,&#34;Municipality: Bristol&lt;br /&gt;&lt;br /&gt;% Pop: 0.23%&lt;br /&gt;&lt;br /&gt;RI: 1.19&#34;,&#34;Municipality: Brookfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.05%&lt;br /&gt;&lt;br /&gt;RI: 2.94&#34;,&#34;Municipality: Brookline&lt;br /&gt;&lt;br /&gt;% Pop: 0.39%&lt;br /&gt;&lt;br /&gt;RI: 0.24&#34;,&#34;Municipality: Canaan&lt;br /&gt;&lt;br /&gt;% Pop: 0.29%&lt;br /&gt;&lt;br /&gt;RI: 0.53&#34;,&#34;Municipality: Candia&lt;br /&gt;&lt;br /&gt;% Pop: 0.29%&lt;br /&gt;&lt;br /&gt;RI: 1.23&#34;,&#34;Municipality: Canterbury&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;RI: 1.44&#34;,&#34;Municipality: Carroll&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.14&#34;,&#34;Municipality: Center Harbor&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 1.13&#34;,&#34;Municipality: Charlestown&lt;br /&gt;&lt;br /&gt;% Pop: 0.38%&lt;br /&gt;&lt;br /&gt;RI: 0.27&#34;,&#34;Municipality: Chatham&lt;br /&gt;&lt;br /&gt;% Pop: 0.03%&lt;br /&gt;&lt;br /&gt;RI: 3.68&#34;,&#34;Municipality: Chester&lt;br /&gt;&lt;br /&gt;% Pop: 0.38%&lt;br /&gt;&lt;br /&gt;RI: 1.19&#34;,&#34;Municipality: Chesterfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.27%&lt;br /&gt;&lt;br /&gt;RI: 1.31&#34;,&#34;Municipality: Chichester&lt;br /&gt;&lt;br /&gt;% Pop: 0.19%&lt;br /&gt;&lt;br /&gt;RI: 1.36&#34;,&#34;Municipality: Clarksville&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 3.2&#34;,&#34;Municipality: Colebrook&lt;br /&gt;&lt;br /&gt;% Pop: 0.17%&lt;br /&gt;&lt;br /&gt;RI: 1.07&#34;,&#34;Municipality: Columbia&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.18&#34;,&#34;Municipality: Concord&lt;br /&gt;&lt;br /&gt;% Pop: 3.18%&lt;br /&gt;&lt;br /&gt;RI: 0.16&#34;,&#34;Municipality: Conway&lt;br /&gt;&lt;br /&gt;% Pop: 0.76%&lt;br /&gt;&lt;br /&gt;RI: 0.28&#34;,&#34;Municipality: Cornish&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.81&#34;,&#34;Municipality: Croydon&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.17&#34;,&#34;Municipality: Dalton&lt;br /&gt;&lt;br /&gt;% Pop: 0.07%&lt;br /&gt;&lt;br /&gt;RI: 1.92&#34;,&#34;Municipality: Danbury&lt;br /&gt;&lt;br /&gt;% Pop: 0.09%&lt;br /&gt;&lt;br /&gt;RI: 1.73&#34;,&#34;Municipality: Danville&lt;br /&gt;&lt;br /&gt;% Pop: 0.33%&lt;br /&gt;&lt;br /&gt;RI: 0.4&#34;,&#34;Municipality: Deerfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.34%&lt;br /&gt;&lt;br /&gt;RI: 1.08&#34;,&#34;Municipality: Deering&lt;br /&gt;&lt;br /&gt;% Pop: 0.14%&lt;br /&gt;&lt;br /&gt;RI: 1.94&#34;,&#34;Municipality: Dorchester&lt;br /&gt;&lt;br /&gt;% Pop: 0.03%&lt;br /&gt;&lt;br /&gt;RI: 2.93&#34;,&#34;Municipality: Dover&lt;br /&gt;&lt;br /&gt;% Pop: 2.3%&lt;br /&gt;&lt;br /&gt;RI: 0.09&#34;,&#34;Municipality: Dublin&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.84&#34;,&#34;Municipality: Dummer&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 3.1&#34;,&#34;Municipality: Dunbarton&lt;br /&gt;&lt;br /&gt;% Pop: 0.21%&lt;br /&gt;&lt;br /&gt;RI: 1.27&#34;,&#34;Municipality: East Kingston&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;RI: 1.03&#34;,&#34;Municipality: Easton&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 3.22&#34;,&#34;Municipality: Eaton&lt;br /&gt;&lt;br /&gt;% Pop: 0.03%&lt;br /&gt;&lt;br /&gt;RI: 3.5&#34;,&#34;Municipality: Effingham&lt;br /&gt;&lt;br /&gt;% Pop: 0.11%&lt;br /&gt;&lt;br /&gt;RI: 2.2&#34;,&#34;Municipality: Ellsworth&lt;br /&gt;&lt;br /&gt;% Pop: 0.01%&lt;br /&gt;&lt;br /&gt;RI: 4.36&#34;,&#34;Municipality: Enfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.35%&lt;br /&gt;&lt;br /&gt;RI: 0.36&#34;,&#34;Municipality: Epsom&lt;br /&gt;&lt;br /&gt;% Pop: 0.35%&lt;br /&gt;&lt;br /&gt;RI: 0.75&#34;,&#34;Municipality: Errol&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 3.14&#34;,&#34;Municipality: Exeter&lt;br /&gt;&lt;br /&gt;% Pop: 1.13%&lt;br /&gt;&lt;br /&gt;RI: 0.11&#34;,&#34;Municipality: Fitzwilliam&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;RI: 1.44&#34;,&#34;Municipality: Francestown&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 2.15&#34;,&#34;Municipality: Franconia&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 1.78&#34;,&#34;Municipality: Franklin&lt;br /&gt;&lt;br /&gt;% Pop: 0.65%&lt;br /&gt;&lt;br /&gt;RI: 0.66&#34;,&#34;Municipality: Freedom&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.86&#34;,&#34;Municipality: Fremont&lt;br /&gt;&lt;br /&gt;% Pop: 0.35%&lt;br /&gt;&lt;br /&gt;RI: 0.35&#34;,&#34;Municipality: Gilford&lt;br /&gt;&lt;br /&gt;% Pop: 0.54%&lt;br /&gt;&lt;br /&gt;RI: 0.62&#34;,&#34;Municipality: Gilmanton&lt;br /&gt;&lt;br /&gt;% Pop: 0.28%&lt;br /&gt;&lt;br /&gt;RI: 0.99&#34;,&#34;Municipality: Gilsum&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 1.41&#34;,&#34;Municipality: Goffstown&lt;br /&gt;&lt;br /&gt;% Pop: 1.33%&lt;br /&gt;&lt;br /&gt;RI: 0.12&#34;,&#34;Municipality: Gorham&lt;br /&gt;&lt;br /&gt;% Pop: 0.21%&lt;br /&gt;&lt;br /&gt;RI: 0.18&#34;,&#34;Municipality: Goshen&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.1&#34;,&#34;Municipality: Grafton&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 2&#34;,&#34;Municipality: Grantham&lt;br /&gt;&lt;br /&gt;% Pop: 0.23%&lt;br /&gt;&lt;br /&gt;RI: 1.2&#34;,&#34;Municipality: Greenfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 1.72&#34;,&#34;Municipality: Greenland&lt;br /&gt;&lt;br /&gt;% Pop: 0.3%&lt;br /&gt;&lt;br /&gt;RI: 0.51&#34;,&#34;Municipality: Greenville&lt;br /&gt;&lt;br /&gt;% Pop: 0.15%&lt;br /&gt;&lt;br /&gt;RI: 1.87&#34;,&#34;Municipality: Groton&lt;br /&gt;&lt;br /&gt;% Pop: 0.04%&lt;br /&gt;&lt;br /&gt;RI: 2.42&#34;,&#34;Municipality: Hampstead&lt;br /&gt;&lt;br /&gt;% Pop: 0.65%&lt;br /&gt;&lt;br /&gt;RI: 0.66&#34;,&#34;Municipality: Hampton&lt;br /&gt;&lt;br /&gt;% Pop: 1.13%&lt;br /&gt;&lt;br /&gt;RI: 0.1&#34;,&#34;Municipality: Hampton Falls&lt;br /&gt;&lt;br /&gt;% Pop: 0.17%&lt;br /&gt;&lt;br /&gt;RI: 1.77&#34;,&#34;Municipality: Hancock&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.81&#34;,&#34;Municipality: Hanover&lt;br /&gt;&lt;br /&gt;% Pop: 0.85%&lt;br /&gt;&lt;br /&gt;RI: 0.17&#34;,&#34;Municipality: Harrisville&lt;br /&gt;&lt;br /&gt;% Pop: 0.07%&lt;br /&gt;&lt;br /&gt;RI: 2.36&#34;,&#34;Municipality: Harts Location&lt;br /&gt;&lt;br /&gt;% Pop: 0%&lt;br /&gt;&lt;br /&gt;RI: 5.05&#34;,&#34;Municipality: Haverhill&lt;br /&gt;&lt;br /&gt;% Pop: 0.35%&lt;br /&gt;&lt;br /&gt;RI: 0.36&#34;,&#34;Municipality: Hebron&lt;br /&gt;&lt;br /&gt;% Pop: 0.05%&lt;br /&gt;&lt;br /&gt;RI: 2.78&#34;,&#34;Municipality: Henniker&lt;br /&gt;&lt;br /&gt;% Pop: 0.36%&lt;br /&gt;&lt;br /&gt;RI: 0.33&#34;,&#34;Municipality: Hill&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 1.82&#34;,&#34;Municipality: Hillsborough&lt;br /&gt;&lt;br /&gt;% Pop: 0.45%&lt;br /&gt;&lt;br /&gt;RI: 0.81&#34;,&#34;Municipality: Hinsdale&lt;br /&gt;&lt;br /&gt;% Pop: 0.3%&lt;br /&gt;&lt;br /&gt;RI: 1.2&#34;,&#34;Municipality: Holderness&lt;br /&gt;&lt;br /&gt;% Pop: 0.16%&lt;br /&gt;&lt;br /&gt;RI: 1.56&#34;,&#34;Municipality: Hollis&lt;br /&gt;&lt;br /&gt;% Pop: 0.58%&lt;br /&gt;&lt;br /&gt;RI: 0.25&#34;,&#34;Municipality: Hopkinton&lt;br /&gt;&lt;br /&gt;% Pop: 0.42%&lt;br /&gt;&lt;br /&gt;RI: 0.58&#34;,&#34;Municipality: Hudson&lt;br /&gt;&lt;br /&gt;% Pop: 1.87%&lt;br /&gt;&lt;br /&gt;RI: 0.39&#34;,&#34;Municipality: Jackson&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.08&#34;,&#34;Municipality: Jaffrey&lt;br /&gt;&lt;br /&gt;% Pop: 0.4%&lt;br /&gt;&lt;br /&gt;RI: 0.62&#34;,&#34;Municipality: Jefferson&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 1.8&#34;,&#34;Municipality: Kensington&lt;br /&gt;&lt;br /&gt;% Pop: 0.16%&lt;br /&gt;&lt;br /&gt;RI: 1.15&#34;,&#34;Municipality: Kingston&lt;br /&gt;&lt;br /&gt;% Pop: 0.46%&lt;br /&gt;&lt;br /&gt;RI: 1.01&#34;,&#34;Municipality: Lancaster&lt;br /&gt;&lt;br /&gt;% Pop: 0.26%&lt;br /&gt;&lt;br /&gt;RI: 0.64&#34;,&#34;Municipality: Landaff&lt;br /&gt;&lt;br /&gt;% Pop: 0.03%&lt;br /&gt;&lt;br /&gt;RI: 2.78&#34;,&#34;Municipality: Langdon&lt;br /&gt;&lt;br /&gt;% Pop: 0.05%&lt;br /&gt;&lt;br /&gt;RI: 2.27&#34;,&#34;Municipality: Lee&lt;br /&gt;&lt;br /&gt;% Pop: 0.33%&lt;br /&gt;&lt;br /&gt;RI: 0.43&#34;,&#34;Municipality: Lempster&lt;br /&gt;&lt;br /&gt;% Pop: 0.09%&lt;br /&gt;&lt;br /&gt;RI: 1.74&#34;,&#34;Municipality: Lincoln&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 0.66&#34;,&#34;Municipality: Lisbon&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.43&#34;,&#34;Municipality: Litchfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.63%&lt;br /&gt;&lt;br /&gt;RI: 0.46&#34;,&#34;Municipality: Littleton&lt;br /&gt;&lt;br /&gt;% Pop: 0.44%&lt;br /&gt;&lt;br /&gt;RI: 0.53&#34;,&#34;Municipality: Loudon&lt;br /&gt;&lt;br /&gt;% Pop: 0.41%&lt;br /&gt;&lt;br /&gt;RI: 0.59&#34;,&#34;Municipality: Lyman&lt;br /&gt;&lt;br /&gt;% Pop: 0.04%&lt;br /&gt;&lt;br /&gt;RI: 2.51&#34;,&#34;Municipality: Lyme&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 2.06&#34;,&#34;Municipality: Lyndeborough&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 2.06&#34;,&#34;Municipality: Madbury&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 2.23&#34;,&#34;Municipality: Madison&lt;br /&gt;&lt;br /&gt;% Pop: 0.19%&lt;br /&gt;&lt;br /&gt;RI: 1.35&#34;,&#34;Municipality: Marlborough&lt;br /&gt;&lt;br /&gt;% Pop: 0.16%&lt;br /&gt;&lt;br /&gt;RI: 1.15&#34;,&#34;Municipality: Marlow&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 1.51&#34;,&#34;Municipality: Mason&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 1.57&#34;,&#34;Municipality: Meredith&lt;br /&gt;&lt;br /&gt;% Pop: 0.47%&lt;br /&gt;&lt;br /&gt;RI: 0.75&#34;,&#34;Municipality: Middleton&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 1.32&#34;,&#34;Municipality: Milan&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 1.61&#34;,&#34;Municipality: Milford&lt;br /&gt;&lt;br /&gt;% Pop: 1.14%&lt;br /&gt;&lt;br /&gt;RI: 0.09&#34;,&#34;Municipality: Milton&lt;br /&gt;&lt;br /&gt;% Pop: 0.34%&lt;br /&gt;&lt;br /&gt;RI: 0.38&#34;,&#34;Municipality: Monroe&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.13&#34;,&#34;Municipality: Mont Vernon&lt;br /&gt;&lt;br /&gt;% Pop: 0.19%&lt;br /&gt;&lt;br /&gt;RI: 1.39&#34;,&#34;Municipality: Moultonborough&lt;br /&gt;&lt;br /&gt;% Pop: 0.3%&lt;br /&gt;&lt;br /&gt;RI: 0.9&#34;,&#34;Municipality: Nelson&lt;br /&gt;&lt;br /&gt;% Pop: 0.05%&lt;br /&gt;&lt;br /&gt;RI: 1.53&#34;,&#34;Municipality: New Boston&lt;br /&gt;&lt;br /&gt;% Pop: 0.42%&lt;br /&gt;&lt;br /&gt;RI: 0.57&#34;,&#34;Municipality: New Castle&lt;br /&gt;&lt;br /&gt;% Pop: 0.07%&lt;br /&gt;&lt;br /&gt;RI: 1.94&#34;,&#34;Municipality: New Durham&lt;br /&gt;&lt;br /&gt;% Pop: 0.19%&lt;br /&gt;&lt;br /&gt;RI: 0.94&#34;,&#34;Municipality: New Hampton&lt;br /&gt;&lt;br /&gt;% Pop: 0.17%&lt;br /&gt;&lt;br /&gt;RI: 0.4&#34;,&#34;Municipality: New Ipswich&lt;br /&gt;&lt;br /&gt;% Pop: 0.39%&lt;br /&gt;&lt;br /&gt;RI: 0.25&#34;,&#34;Municipality: New London&lt;br /&gt;&lt;br /&gt;% Pop: 0.32%&lt;br /&gt;&lt;br /&gt;RI: 0.45&#34;,&#34;Municipality: Newbury&lt;br /&gt;&lt;br /&gt;% Pop: 0.16%&lt;br /&gt;&lt;br /&gt;RI: 1.13&#34;,&#34;Municipality: Newfields&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 2.06&#34;,&#34;Municipality: Newington&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.14&#34;,&#34;Municipality: Newmarket&lt;br /&gt;&lt;br /&gt;% Pop: 0.7%&lt;br /&gt;&lt;br /&gt;RI: 0.36&#34;,&#34;Municipality: Newport&lt;br /&gt;&lt;br /&gt;% Pop: 0.48%&lt;br /&gt;&lt;br /&gt;RI: 0.44&#34;,&#34;Municipality: Newton&lt;br /&gt;&lt;br /&gt;% Pop: 0.37%&lt;br /&gt;&lt;br /&gt;RI: 0.31&#34;,&#34;Municipality: North Hampton&lt;br /&gt;&lt;br /&gt;% Pop: 0.34%&lt;br /&gt;&lt;br /&gt;RI: 0.39&#34;,&#34;Municipality: Northfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.36%&lt;br /&gt;&lt;br /&gt;RI: 0.73&#34;,&#34;Municipality: Northumberland&lt;br /&gt;&lt;br /&gt;% Pop: 0.17%&lt;br /&gt;&lt;br /&gt;RI: 1.09&#34;,&#34;Municipality: Northwood&lt;br /&gt;&lt;br /&gt;% Pop: 0.32%&lt;br /&gt;&lt;br /&gt;RI: 0.46&#34;,&#34;Municipality: Nottingham&lt;br /&gt;&lt;br /&gt;% Pop: 0.38%&lt;br /&gt;&lt;br /&gt;RI: 0.98&#34;,&#34;Municipality: Orange&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 3&#34;,&#34;Municipality: Orford&lt;br /&gt;&lt;br /&gt;% Pop: 0.09%&lt;br /&gt;&lt;br /&gt;RI: 1.69&#34;,&#34;Municipality: Ossipee&lt;br /&gt;&lt;br /&gt;% Pop: 0.33%&lt;br /&gt;&lt;br /&gt;RI: 1.11&#34;,&#34;Municipality: Pelham&lt;br /&gt;&lt;br /&gt;% Pop: 1.01%&lt;br /&gt;&lt;br /&gt;RI: 1.01&#34;,&#34;Municipality: Pembroke&lt;br /&gt;&lt;br /&gt;% Pop: 0.53%&lt;br /&gt;&lt;br /&gt;RI: 0.35&#34;,&#34;Municipality: Piermont&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.15&#34;,&#34;Municipality: Pittsburg&lt;br /&gt;&lt;br /&gt;% Pop: 0.07%&lt;br /&gt;&lt;br /&gt;RI: 2.03&#34;,&#34;Municipality: Pittsfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.3%&lt;br /&gt;&lt;br /&gt;RI: 0.91&#34;,&#34;Municipality: Plainfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;RI: 1.43&#34;,&#34;Municipality: Plaistow&lt;br /&gt;&lt;br /&gt;% Pop: 0.57%&lt;br /&gt;&lt;br /&gt;RI: 0.78&#34;,&#34;Municipality: Plymouth&lt;br /&gt;&lt;br /&gt;% Pop: 0.51%&lt;br /&gt;&lt;br /&gt;RI: 0.39&#34;,&#34;Municipality: Portsmouth&lt;br /&gt;&lt;br /&gt;% Pop: 1.63%&lt;br /&gt;&lt;br /&gt;RI: 0.07&#34;,&#34;Municipality: Randolph&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 3.08&#34;,&#34;Municipality: Richmond&lt;br /&gt;&lt;br /&gt;% Pop: 0.09%&lt;br /&gt;&lt;br /&gt;RI: 2.16&#34;,&#34;Municipality: Rindge&lt;br /&gt;&lt;br /&gt;% Pop: 0.46%&lt;br /&gt;&lt;br /&gt;RI: 0.49&#34;,&#34;Municipality: Rollinsford&lt;br /&gt;&lt;br /&gt;% Pop: 0.19%&lt;br /&gt;&lt;br /&gt;RI: 1.66&#34;,&#34;Municipality: Roxbury&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 3.8&#34;,&#34;Municipality: Rumney&lt;br /&gt;&lt;br /&gt;% Pop: 0.11%&lt;br /&gt;&lt;br /&gt;RI: 1.5&#34;,&#34;Municipality: Rye&lt;br /&gt;&lt;br /&gt;% Pop: 0.41%&lt;br /&gt;&lt;br /&gt;RI: 0.21&#34;,&#34;Municipality: Salisbury&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 1.56&#34;,&#34;Municipality: Sanbornton&lt;br /&gt;&lt;br /&gt;% Pop: 0.22%&lt;br /&gt;&lt;br /&gt;RI: 0.81&#34;,&#34;Municipality: Sandown&lt;br /&gt;&lt;br /&gt;% Pop: 0.47%&lt;br /&gt;&lt;br /&gt;RI: 0.98&#34;,&#34;Municipality: Sandwich&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 2.02&#34;,&#34;Municipality: Seabrook&lt;br /&gt;&lt;br /&gt;% Pop: 0.66%&lt;br /&gt;&lt;br /&gt;RI: 0.42&#34;,&#34;Municipality: Sharon&lt;br /&gt;&lt;br /&gt;% Pop: 0.03%&lt;br /&gt;&lt;br /&gt;RI: 2.95&#34;,&#34;Municipality: Shelburne&lt;br /&gt;&lt;br /&gt;% Pop: 0.03%&lt;br /&gt;&lt;br /&gt;RI: 2.2&#34;,&#34;Municipality: Somersworth&lt;br /&gt;&lt;br /&gt;% Pop: 0.88%&lt;br /&gt;&lt;br /&gt;RI: 0.69&#34;,&#34;Municipality: South Hampton&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.11&#34;,&#34;Municipality: Springfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 2.02&#34;,&#34;Municipality: Stark&lt;br /&gt;&lt;br /&gt;% Pop: 0.04%&lt;br /&gt;&lt;br /&gt;RI: 2.47&#34;,&#34;Municipality: Stewartstown&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 1.89&#34;,&#34;Municipality: Stoddard&lt;br /&gt;&lt;br /&gt;% Pop: 0.09%&lt;br /&gt;&lt;br /&gt;RI: 0.97&#34;,&#34;Municipality: Strafford&lt;br /&gt;&lt;br /&gt;% Pop: 0.3%&lt;br /&gt;&lt;br /&gt;RI: 0.5&#34;,&#34;Municipality: Stratford&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.19&#34;,&#34;Municipality: Stratham&lt;br /&gt;&lt;br /&gt;% Pop: 0.55%&lt;br /&gt;&lt;br /&gt;RI: 0.31&#34;,&#34;Municipality: Sugar Hill&lt;br /&gt;&lt;br /&gt;% Pop: 0.04%&lt;br /&gt;&lt;br /&gt;RI: 2.46&#34;,&#34;Municipality: Sullivan&lt;br /&gt;&lt;br /&gt;% Pop: 0.05%&lt;br /&gt;&lt;br /&gt;RI: 1.58&#34;,&#34;Municipality: Sunapee&lt;br /&gt;&lt;br /&gt;% Pop: 0.26%&lt;br /&gt;&lt;br /&gt;RI: 0.66&#34;,&#34;Municipality: Surry&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 1.51&#34;,&#34;Municipality: Sutton&lt;br /&gt;&lt;br /&gt;% Pop: 0.14%&lt;br /&gt;&lt;br /&gt;RI: 0.59&#34;,&#34;Municipality: Swanzey&lt;br /&gt;&lt;br /&gt;% Pop: 0.55%&lt;br /&gt;&lt;br /&gt;RI: 0.31&#34;,&#34;Municipality: Tamworth&lt;br /&gt;&lt;br /&gt;% Pop: 0.22%&lt;br /&gt;&lt;br /&gt;RI: 1.25&#34;,&#34;Municipality: Temple&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 1.57&#34;,&#34;Municipality: Thornton&lt;br /&gt;&lt;br /&gt;% Pop: 0.19%&lt;br /&gt;&lt;br /&gt;RI: 0.97&#34;,&#34;Municipality: Tilton&lt;br /&gt;&lt;br /&gt;% Pop: 0.27%&lt;br /&gt;&lt;br /&gt;RI: 0.61&#34;,&#34;Municipality: Troy&lt;br /&gt;&lt;br /&gt;% Pop: 0.16%&lt;br /&gt;&lt;br /&gt;RI: 1.15&#34;,&#34;Municipality: Tuftonboro&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;RI: 1.44&#34;,&#34;Municipality: Unity&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.83&#34;,&#34;Municipality: Wakefield&lt;br /&gt;&lt;br /&gt;% Pop: 0.38%&lt;br /&gt;&lt;br /&gt;RI: 0.97&#34;,&#34;Municipality: Walpole&lt;br /&gt;&lt;br /&gt;% Pop: 0.29%&lt;br /&gt;&lt;br /&gt;RI: 1.25&#34;,&#34;Municipality: Warner&lt;br /&gt;&lt;br /&gt;% Pop: 0.21%&lt;br /&gt;&lt;br /&gt;RI: 0.84&#34;,&#34;Municipality: Warren&lt;br /&gt;&lt;br /&gt;% Pop: 0.07%&lt;br /&gt;&lt;br /&gt;RI: 1.98&#34;,&#34;Municipality: Washington&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 1.78&#34;,&#34;Municipality: Waterville Valley&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 2.61&#34;,&#34;Municipality: Weare&lt;br /&gt;&lt;br /&gt;% Pop: 0.66%&lt;br /&gt;&lt;br /&gt;RI: 0.42&#34;,&#34;Municipality: Webster&lt;br /&gt;&lt;br /&gt;% Pop: 0.14%&lt;br /&gt;&lt;br /&gt;RI: 1.27&#34;,&#34;Municipality: Wentworth&lt;br /&gt;&lt;br /&gt;% Pop: 0.07%&lt;br /&gt;&lt;br /&gt;RI: 2&#34;,&#34;Municipality: Westmoreland&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 2.04&#34;,&#34;Municipality: Whitefield&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;RI: 1.04&#34;,&#34;Municipality: Wilmot&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 0.89&#34;,&#34;Municipality: Wilton&lt;br /&gt;&lt;br /&gt;% Pop: 0.27%&lt;br /&gt;&lt;br /&gt;RI: 1.29&#34;,&#34;Municipality: Winchester&lt;br /&gt;&lt;br /&gt;% Pop: 0.32%&lt;br /&gt;&lt;br /&gt;RI: 0.44&#34;,&#34;Municipality: Windsor&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 4.12&#34;,&#34;Municipality: Wolfeboro&lt;br /&gt;&lt;br /&gt;% Pop: 0.47%&lt;br /&gt;&lt;br /&gt;RI: 0.07&#34;,&#34;Municipality: Woodstock&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 0.89&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Overrepresented&#34;,&#34;legendgroup&#34;:&#34;Overrepresented&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[106,126,231],&#34;y&#34;:[-0.0788757585005983,-0.0885440988102656,-0.0762566929742518],&#34;text&#34;:[&#34;Municipality: Hooksett&lt;br /&gt;&lt;br /&gt;% Pop: 1.08%&lt;br /&gt;&lt;br /&gt;RI: -0.08&#34;,&#34;Municipality: Londonderry&lt;br /&gt;&lt;br /&gt;% Pop: 1.91%&lt;br /&gt;&lt;br /&gt;RI: -0.09&#34;,&#34;Municipality: Windham&lt;br /&gt;&lt;br /&gt;% Pop: 1.08%&lt;br /&gt;&lt;br /&gt;RI: -0.08&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Underrepresented&#34;,&#34;legendgroup&#34;:&#34;Underrepresented&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:46.3196347031963,&#34;r&#34;:7.30593607305936,&#34;b&#34;:16.4383561643836,&#34;l&#34;:31.4155251141553},&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;title&#34;:&#34;New Hampshire House of Representatives&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:17.5342465753425},&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-10.65,245.65],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;50&#34;,&#34;100&#34;,&#34;150&#34;,&#34;200&#34;],&#34;tickvals&#34;:[0,50,100,150,200],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;50&#34;,&#34;100&#34;,&#34;150&#34;,&#34;200&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.345501806055127,5.30756775333183],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;1&#34;,&#34;2&#34;,&#34;3&#34;,&#34;4&#34;,&#34;5&#34;],&#34;tickvals&#34;:[0,1,2,3,4,5],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;1&#34;,&#34;2&#34;,&#34;3&#34;,&#34;4&#34;,&#34;5&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:&#34;Representation Index&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1}],&#34;showlegend&#34;:true,&#34;legend&#34;:{&#34;bgcolor&#34;:null,&#34;bordercolor&#34;:null,&#34;borderwidth&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;y&#34;:1,&#34;orientation&#34;:&#34;h&#34;},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;modeBarButtonsToAdd&#34;:[{&#34;name&#34;:&#34;Collaborate&#34;,&#34;icon&#34;:{&#34;width&#34;:1000,&#34;ascent&#34;:500,&#34;descent&#34;:-50,&#34;path&#34;:&#34;M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z&#34;},&#34;click&#34;:&#34;function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == &#39;?viewer_pane=1&#39;) {\n          alert(&#39;To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;);\n        } else {\n          window.open(&#39;https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;, &#39;_blank&#39;);\n        }\n      }&#34;}],&#34;cloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;38406d562588&#34;:{&#34;x&#34;:{},&#34;ymin&#34;:{},&#34;ymax&#34;:{},&#34;type&#34;:&#34;scatter&#34;},&#34;384032ba3bcc&#34;:{&#34;yintercept&#34;:{}},&#34;384060abe818&#34;:{&#34;yintercept&#34;:{}},&#34;38403612b13d&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;colour&#34;:{},&#34;label&#34;:{}}},&#34;cur_data&#34;:&#34;38406d562588&#34;,&#34;visdat&#34;:{&#34;38406d562588&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;384032ba3bcc&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;384060abe818&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;38403612b13d&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[&#34;config.modeBarButtonsToAdd.0.click&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;The above chart illustrates this phenomenon. Interestingly, the most populous cities and towns in the region are represented according to the one person, one vote paradigm. When applied to the state senate, the results are much different.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-5&#34; style=&#34;width:672px;height:384px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-5&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,23,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1],&#34;y&#34;:[-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-0.1,24.1],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-0.1,24.1],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[18,21],&#34;y&#34;:[0.0291424359290335,0.015725584940145],&#34;text&#34;:[&#34;District: 19&lt;br /&gt;&lt;br /&gt;% Pop: 4.05%&lt;br /&gt;&lt;br /&gt;RI: 0.03&#34;,&#34;District: 22&lt;br /&gt;&lt;br /&gt;% Pop: 4.1%&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;One person, one vote&#34;,&#34;legendgroup&#34;:&#34;One person, one vote&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[4,6,10,12,14,15,17,19],&#34;y&#34;:[0.068247836824423,0.493807266783699,0.195609420759472,0.726748574774862,1.01006660612559,0.283066126913002,1.92280409489139,0.483438640137724],&#34;text&#34;:[&#34;District: 4&lt;br /&gt;&lt;br /&gt;% Pop: 3.89%&lt;br /&gt;&lt;br /&gt;RI: 0.07&#34;,&#34;District: 6&lt;br /&gt;&lt;br /&gt;% Pop: 2.54%&lt;br /&gt;&lt;br /&gt;RI: 0.49&#34;,&#34;District: 10&lt;br /&gt;&lt;br /&gt;% Pop: 3.43%&lt;br /&gt;&lt;br /&gt;RI: 0.2&#34;,&#34;District: 12&lt;br /&gt;&lt;br /&gt;% Pop: 2.01%&lt;br /&gt;&lt;br /&gt;RI: 0.73&#34;,&#34;District: 15&lt;br /&gt;&lt;br /&gt;% Pop: 1.52%&lt;br /&gt;&lt;br /&gt;RI: 1.01&#34;,&#34;District: 16&lt;br /&gt;&lt;br /&gt;% Pop: 3.14%&lt;br /&gt;&lt;br /&gt;RI: 0.28&#34;,&#34;District: 18&lt;br /&gt;&lt;br /&gt;% Pop: 0.61%&lt;br /&gt;&lt;br /&gt;RI: 1.92&#34;,&#34;District: 20&lt;br /&gt;&lt;br /&gt;% Pop: 2.57%&lt;br /&gt;&lt;br /&gt;RI: 0.48&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Overrepresented&#34;,&#34;legendgroup&#34;:&#34;Overrepresented&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,2,3,5,7,8,9,11,13,16,20,22,23],&#34;y&#34;:[-0.143366997051457,-0.248699057263395,-0.305831261423659,-0.388316235485188,-0.099355577982888,-0.304710342152587,-0.232172675776813,-0.401545266348269,-0.615285762438233,-0.279935840479816,-0.0687335630323309,-0.296417380715288,-0.21457391366389],&#34;text&#34;:[&#34;District: 1&lt;br /&gt;&lt;br /&gt;% Pop: 4.81%&lt;br /&gt;&lt;br /&gt;RI: -0.14&#34;,&#34;District: 2&lt;br /&gt;&lt;br /&gt;% Pop: 5.34%&lt;br /&gt;&lt;br /&gt;RI: -0.25&#34;,&#34;District: 3&lt;br /&gt;&lt;br /&gt;% Pop: 5.66%&lt;br /&gt;&lt;br /&gt;RI: -0.31&#34;,&#34;District: 5&lt;br /&gt;&lt;br /&gt;% Pop: 6.14%&lt;br /&gt;&lt;br /&gt;RI: -0.39&#34;,&#34;District: 7&lt;br /&gt;&lt;br /&gt;% Pop: 4.6%&lt;br /&gt;&lt;br /&gt;RI: -0.1&#34;,&#34;District: 8&lt;br /&gt;&lt;br /&gt;% Pop: 5.65%&lt;br /&gt;&lt;br /&gt;RI: -0.3&#34;,&#34;District: 9&lt;br /&gt;&lt;br /&gt;% Pop: 5.26%&lt;br /&gt;&lt;br /&gt;RI: -0.23&#34;,&#34;District: 11&lt;br /&gt;&lt;br /&gt;% Pop: 6.23%&lt;br /&gt;&lt;br /&gt;RI: -0.4&#34;,&#34;District: 14&lt;br /&gt;&lt;br /&gt;% Pop: 7.71%&lt;br /&gt;&lt;br /&gt;RI: -0.62&#34;,&#34;District: 17&lt;br /&gt;&lt;br /&gt;% Pop: 5.51%&lt;br /&gt;&lt;br /&gt;RI: -0.28&#34;,&#34;District: 21&lt;br /&gt;&lt;br /&gt;% Pop: 4.46%&lt;br /&gt;&lt;br /&gt;RI: -0.07&#34;,&#34;District: 23&lt;br /&gt;&lt;br /&gt;% Pop: 5.6%&lt;br /&gt;&lt;br /&gt;RI: -0.3&#34;,&#34;District: 24&lt;br /&gt;&lt;br /&gt;% Pop: 5.16%&lt;br /&gt;&lt;br /&gt;RI: -0.21&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Underrepresented&#34;,&#34;legendgroup&#34;:&#34;Underrepresented&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:46.3196347031963,&#34;r&#34;:7.30593607305936,&#34;b&#34;:16.4383561643836,&#34;l&#34;:31.4155251141553},&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;title&#34;:&#34;New Hampshire Senate&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:17.5342465753425},&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.1,24.1],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;5&#34;,&#34;10&#34;,&#34;15&#34;,&#34;20&#34;],&#34;tickvals&#34;:[1.38777878078145e-17,5,10,15,20],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;5&#34;,&#34;10&#34;,&#34;15&#34;,&#34;20&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.742190255304714,2.04970858775787],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;1&#34;,&#34;2&#34;],&#34;tickvals&#34;:[0,1,2],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;1&#34;,&#34;2&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:&#34;Representation Index&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1}],&#34;showlegend&#34;:true,&#34;legend&#34;:{&#34;bgcolor&#34;:null,&#34;bordercolor&#34;:null,&#34;borderwidth&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;y&#34;:1,&#34;orientation&#34;:&#34;h&#34;},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;modeBarButtonsToAdd&#34;:[{&#34;name&#34;:&#34;Collaborate&#34;,&#34;icon&#34;:{&#34;width&#34;:1000,&#34;ascent&#34;:500,&#34;descent&#34;:-50,&#34;path&#34;:&#34;M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z&#34;},&#34;click&#34;:&#34;function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == &#39;?viewer_pane=1&#39;) {\n          alert(&#39;To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;);\n        } else {\n          window.open(&#39;https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;, &#39;_blank&#39;);\n        }\n      }&#34;}],&#34;cloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;3840315027be&#34;:{&#34;x&#34;:{},&#34;ymin&#34;:{},&#34;ymax&#34;:{},&#34;type&#34;:&#34;scatter&#34;},&#34;3840561443d&#34;:{&#34;yintercept&#34;:{}},&#34;384034c7038d&#34;:{&#34;yintercept&#34;:{}},&#34;384075ba390c&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;colour&#34;:{},&#34;label&#34;:{}}},&#34;cur_data&#34;:&#34;3840315027be&#34;,&#34;visdat&#34;:{&#34;3840315027be&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;3840561443d&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;384034c7038d&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;384075ba390c&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[&#34;config.modeBarButtonsToAdd.0.click&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;The representation index for the New Hampshire Senate trends toward underrepresentation. The median value is shown with a dotted red line. It is apparent that the representation of the Senate of New Hampshire is not as equally representative as that of California. The population distribution across the state is highly unequal with a vast majority residents living close to the Maine and Massachusetts borders plausibly contributing to this inequality.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;further-directions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Further Directions&lt;/h2&gt;
&lt;p&gt;The ability to compare representation across governing bodies has large implications for comparative political analysis. Further development of the representation index allows scholars and researchers to compare constituency representation among similar bodies—as demonstrated with the case of California and New Hampshire.&lt;/p&gt;
&lt;p&gt;The new formulation of the representation index is conducive to inter-governmental body analysis. This is possible by the index’s ability to place bodies of different size on the same scale. A result of this is the ability to perform hypothesis testing among groups. As a motivating example, the representation indexes of states are compared along partisanship lines.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-6&#34; style=&#34;width:672px;height:384px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-6&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[5,7,8,11,14,19,20,22,23,30,31,32,33,34,37,39,45,47,47,45,39,37,34,33,32,31,30,23,22,20,19,14,11,8,7,5,5],&#34;y&#34;:[-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,3,9,10,12,13,15,16,17,18,21,24,25,27,28,29,36,40,41,42,43,44,50,50,50,44,43,42,41,40,36,29,28,27,25,24,21,18,17,16,15,13,12,10,9,3,1,1],&#34;y&#34;:[-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x2&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[2,4,6,26,35,38,46,48,49,49,48,46,38,35,26,6,4,2,2],&#34;y&#34;:[-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x3&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x2&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x3&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x2&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x3&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,29,45,40,5,14,19,8,21,42,11,36,35,3,27,43,12,13],&#34;y&#34;:[-1.79921454014402,0.544831043557061,1.92620231042506,1.51083760159594,-0.733291836577397,-0.0605593989971765,0.0652561113472588,-0.472337264577165,0.150096487872778,1.54358968838493,-0.355286560228847,1.09623624071235,0.825087774120795,-1.14560006526519,0.475398418747457,1.76731165787931,-0.261025933103664,-0.0872199212765543],&#34;text&#34;:[&#34;State: California&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -1.8&#34;,&#34;State: Connecticut&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 0.54&#34;,&#34;State: Delaware&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 1.93&#34;,&#34;State: Hawaii&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 1.51&#34;,&#34;State: Illinois&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -0.73&#34;,&#34;State: Massachusetts&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -0.06&#34;,&#34;State: Maryland&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 0.07&#34;,&#34;State: Michigan&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -0.47&#34;,&#34;State: Minnesota&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 0.15&#34;,&#34;State: New Hampshire&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 1.54&#34;,&#34;State: New Jersey&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -0.36&#34;,&#34;State: New Mexico&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 1.1&#34;,&#34;State: Nevada&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 0.83&#34;,&#34;State: New York&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -1.15&#34;,&#34;State: Oregon&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 0.48&#34;,&#34;State: Rhode Island&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 1.77&#34;,&#34;State: Virginia&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -0.26&#34;,&#34;State: Washington&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -0.09&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Democrat&#34;,&#34;legendgroup&#34;:&#34;Democrat&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[47,32,4,9,30,39,15,33,26,25,41,18,31,10,48,38,28,24,46,17,2,34,50],&#34;y&#34;:[2.16070861013449,0.74835890734716,-1.1153829478745,-0.452308587718264,0.704597806412676,1.36900929562851,-0.0507634663165665,0.770131169036849,0.350815115444635,0.307077566935585,1.53459774892231,0.0286313361900235,0.730892162973734,-0.436476292864377,2.21516146106027,1.21622908865919,0.496427558616338,0.286988529814675,2.02411740758902,-0.0292976384949085,-1.40613777958871,0.8019063017126,2.39190796839801],&#34;text&#34;:[&#34;State: Alaska&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 2.16&#34;,&#34;State: Arkansas&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.75&#34;,&#34;State: Florida&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: -1.12&#34;,&#34;State: Georgia&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: -0.45&#34;,&#34;State: Iowa&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.7&#34;,&#34;State: Idaho&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 1.37&#34;,&#34;State: Indiana&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: -0.05&#34;,&#34;State: Kansas&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.77&#34;,&#34;State: Kentucky&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.35&#34;,&#34;State: Louisiana&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.31&#34;,&#34;State: Maine&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 1.53&#34;,&#34;State: Missouri&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.03&#34;,&#34;State: Mississippi&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.73&#34;,&#34;State: North Carolina&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: -0.44&#34;,&#34;State: North Dakota&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 2.22&#34;,&#34;State: Nebraska&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 1.22&#34;,&#34;State: Oklahoma&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.5&#34;,&#34;State: South Carolina&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.29&#34;,&#34;State: South Dakota&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 2.02&#34;,&#34;State: Tennessee&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: -0.03&#34;,&#34;State: Texas&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: -1.41&#34;,&#34;State: Utah&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.8&#34;,&#34;State: Wyoming&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 2.39&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Republican&#34;,&#34;legendgroup&#34;:&#34;Republican&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x2&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[23,16,22,44,7,6,49,20,37],&#34;y&#34;:[0.254158285532269,-0.0365062676500336,0.203283470003425,1.82918501998487,-0.62697266852376,-0.723245698371588,2.28736233189927,0.0803631938181184,1.20174089107934],&#34;text&#34;:[&#34;State: Alabama&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: 0.25&#34;,&#34;State: Arizona&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: -0.04&#34;,&#34;State: Colorado&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: 0.2&#34;,&#34;State: Montana&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: 1.83&#34;,&#34;State: Ohio&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: -0.63&#34;,&#34;State: Pennsylvania&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: -0.72&#34;,&#34;State: Vermont&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: 2.29&#34;,&#34;State: Wisconsin&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: 0.08&#34;,&#34;State: West Virginia&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: 1.2&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Split / Other&#34;,&#34;legendgroup&#34;:&#34;Split / Other&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x3&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:58.0091324200913,&#34;r&#34;:7.30593607305936,&#34;b&#34;:16.4383561643836,&#34;l&#34;:37.2602739726027},&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;title&#34;:&#34;US Senate&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:17.5342465753425},&#34;xaxis&#34;:{&#34;domain&#34;:[0,0.322461404653185],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-1.45,52.45],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;tickvals&#34;:[0,10,20,30,40,50],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-2.00877066557112,2.60146409382512],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;-2&#34;,&#34;-1&#34;,&#34;0&#34;,&#34;1&#34;,&#34;2&#34;],&#34;tickvals&#34;:[-2,-1,0,1,2],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;-2&#34;,&#34;-1&#34;,&#34;0&#34;,&#34;1&#34;,&#34;2&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;annotations&#34;:[{&#34;text&#34;:&#34;Representation Index&#34;,&#34;x&#34;:-0.0337029789084584,&#34;y&#34;:0.5,&#34;showarrow&#34;:false,&#34;ax&#34;:0,&#34;ay&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;xref&#34;:&#34;paper&#34;,&#34;yref&#34;:&#34;paper&#34;,&#34;textangle&#34;:-90,&#34;xanchor&#34;:&#34;right&#34;,&#34;yanchor&#34;:&#34;center&#34;,&#34;annotationType&#34;:&#34;axis&#34;},{&#34;text&#34;:&#34;Democrat&#34;,&#34;x&#34;:0.161230702326593,&#34;y&#34;:1,&#34;showarrow&#34;:false,&#34;ax&#34;:0,&#34;ay&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(26,26,26,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;xref&#34;:&#34;paper&#34;,&#34;yref&#34;:&#34;paper&#34;,&#34;textangle&#34;:-0,&#34;xanchor&#34;:&#34;center&#34;,&#34;yanchor&#34;:&#34;bottom&#34;},{&#34;text&#34;:&#34;Republican&#34;,&#34;x&#34;:0.5,&#34;y&#34;:1,&#34;showarrow&#34;:false,&#34;ax&#34;:0,&#34;ay&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(26,26,26,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;xref&#34;:&#34;paper&#34;,&#34;yref&#34;:&#34;paper&#34;,&#34;textangle&#34;:-0,&#34;xanchor&#34;:&#34;center&#34;,&#34;yanchor&#34;:&#34;bottom&#34;},{&#34;text&#34;:&#34;Split / Other&#34;,&#34;x&#34;:0.838769297673407,&#34;y&#34;:1,&#34;showarrow&#34;:false,&#34;ax&#34;:0,&#34;ay&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(26,26,26,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;xref&#34;:&#34;paper&#34;,&#34;yref&#34;:&#34;paper&#34;,&#34;textangle&#34;:-0,&#34;xanchor&#34;:&#34;center&#34;,&#34;yanchor&#34;:&#34;bottom&#34;}],&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:0.322461404653185,&#34;y0&#34;:0,&#34;y1&#34;:1},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:0.322461404653185,&#34;y0&#34;:0,&#34;y1&#34;:23.37899543379,&#34;yanchor&#34;:1,&#34;ysizemode&#34;:&#34;pixel&#34;},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0.344205262013481,&#34;x1&#34;:0.655794737986519,&#34;y0&#34;:0,&#34;y1&#34;:1},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0.344205262013481,&#34;x1&#34;:0.655794737986519,&#34;y0&#34;:0,&#34;y1&#34;:23.37899543379,&#34;yanchor&#34;:1,&#34;ysizemode&#34;:&#34;pixel&#34;},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0.677538595346814,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0.677538595346814,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:23.37899543379,&#34;yanchor&#34;:1,&#34;ysizemode&#34;:&#34;pixel&#34;}],&#34;xaxis2&#34;:{&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-1.45,52.45],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;tickvals&#34;:[0,10,20,30,40,50],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;domain&#34;:[0.344205262013481,0.655794737986519],&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;xaxis3&#34;:{&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-1.45,52.45],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;tickvals&#34;:[0,10,20,30,40,50],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;domain&#34;:[0.677538595346814,1],&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;showlegend&#34;:false,&#34;legend&#34;:{&#34;bgcolor&#34;:null,&#34;bordercolor&#34;:null,&#34;borderwidth&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895}},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;modeBarButtonsToAdd&#34;:[{&#34;name&#34;:&#34;Collaborate&#34;,&#34;icon&#34;:{&#34;width&#34;:1000,&#34;ascent&#34;:500,&#34;descent&#34;:-50,&#34;path&#34;:&#34;M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z&#34;},&#34;click&#34;:&#34;function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == &#39;?viewer_pane=1&#39;) {\n          alert(&#39;To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;);\n        } else {\n          window.open(&#39;https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;, &#39;_blank&#39;);\n        }\n      }&#34;}],&#34;cloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;3840589f1151&#34;:{&#34;x&#34;:{},&#34;ymin&#34;:{},&#34;ymax&#34;:{},&#34;type&#34;:&#34;scatter&#34;},&#34;3840332a0a4b&#34;:{&#34;yintercept&#34;:{}},&#34;3840d09dc2b&#34;:{&#34;yintercept&#34;:{}},&#34;384025591bd&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;colour&#34;:{},&#34;label&#34;:{}}},&#34;cur_data&#34;:&#34;3840589f1151&#34;,&#34;visdat&#34;:{&#34;3840589f1151&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;3840332a0a4b&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;3840d09dc2b&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;384025591bd&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[&#34;config.modeBarButtonsToAdd.0.click&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;State Senate representation indexes were calculated using the general representation index formula for all 50 states. A two-sample t-test was performed comparing states with two Republican senators to those with two Democratic senators. In doing so, we fail to reject the null hypothesis &lt;span class=&#34;math inline&#34;&gt;\(( \ t(39) = 1.117, \ p = 0.27 \ )\)&lt;/span&gt; that there is a difference of representation index based solely on partisanship.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-17-the-fallacy-of-one-person-one-vote_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Party&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;n&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Mean&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;SD&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;SE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Democrat&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.28&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.03&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Republican&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.02&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Split / Other&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.50&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.05&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.35&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Total&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.48&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.02&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0.14&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It has been demonstrated that the representation index is an informative measure that can be utilized to examine over and underrepresentation of a governing body. This new formulation of the representation index is useful in its ability to evaluate both over and under-representation and to compare different political entities. One could imagine, for example, a comparison of constituency representation between the United States and France’s upper and lower legislative houses.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I would like to thank &lt;a href=&#34;https://twitter.com/harleyphleger?lang=en&#34;&gt;Harley Phleger&lt;/a&gt; for his help in editing this piece. The cogency of this writing would be entirely lacking without his superb editing abilities. If you are in need of an editor, give him a message. Also, his poetry is wonderful.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The Cost of Gridlock</title>
      <link>/post/shutdown-politics/</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/shutdown-politics/</guid>
      <description>


&lt;p&gt;&lt;em&gt;Originally &lt;a href=&#34;https://www.northeastern.edu/csshresearch/bostonarearesearchinitiative/2019/02/06/the-cost-of-gridlock-shutdown-politics-and-their-impact-on-greater-boston/&#34;&gt;posted&lt;/a&gt; via Boston Area Research Initiative&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The nation heaved a sigh of relief as President Trump signed a bill on Friday, January 25th, that ended the longest government shutdown in US history. This bill, the &lt;em&gt;Continuing Appropriation Act&lt;/em&gt;, provides enough funding to keep the government open until February 15th. After thirty-four days of turmoil for federal workers, it is hard to believe that in another three short weeks, the government can shutdown once again. During this last shutdown over 800,000 federal workers and numerous contractors across the country went without paychecks.&lt;/p&gt;
&lt;p&gt;The Boston area is home to major government contractors such as Raytheon and American Science and Engineering Inc. and as such, has undoubtedly been affected by the shutdown. At BARI, we are taking steps to understand just how much another shutdown could affect the region. The recent release of new demographic estimates from the American Community Survey are being used to aid us in this endeavor.&lt;/p&gt;
&lt;p&gt;During a government shutdown, federal employees are hit the hardest, and in the Boston-Cambridge-Newton area, there are 68 thousand of them (margin of error: 2,400). When the government shuts down, non-essential employees are furloughed. While furloughed, they are not allowed to work, and thereby unable to collect paychecks. The remaining federal workers who are deemed essential are then required to work without pay or the promise of repayment—workers are only repaid if new spending bills allocate funding for it. Due to these circumstances any government shutdown puts federal employees at risk. And based on the distribution of federal employees in the Greater Boston area, another shutdown might disproportionately affect suburban areas.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/shutdown/fed_emp.png&#34; alt=&#34;Federal Employees&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Federal Employees&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Without funding, government aid sources are also in danger of running out of money. One such aid program is the Supplemental Nutrition Assistance Program (SNAP), which 1 in 10 (11%, margin of error: 1.5%) families in the region utilizes. Throughout the region, reliance on SNAP assistance varies greatly. In some census tracts nearly 7 out of 10 families receive assistance from SNAP. Areas that would be hardest hit by another shutdown are Lawrence and Brockton, where SNAP utilization is highest.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/shutdown/snap_region.png&#34; alt=&#34;SNAP Recipients Boston-Cambridge-Newton&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;SNAP Recipients Boston-Cambridge-Newton&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In anticipation of funds running out, SNAP payments for the month of February were disbursed on January 20th, leaving recipients to budget their February payments for a period of nearly 40 days. This may cause financial discomfort for some families later in the month. As some research has suggested, families who receive food assistance tend to increase their spending right when payments have been disbursed (Hastings and Washington, 2010), and another shutdown could exacerbate already tight budgets.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Hastings, Justine, and Ebonya Washington. “The first of the month effect: consumer behavior and store responses.” &lt;em&gt;American economic Journal: economic policy&lt;/em&gt; 2, no. 2 (2010): 142-62.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>xgboost feature importance</title>
      <link>/post/xgb-feature-importance/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/xgb-feature-importance/</guid>
      <description>


&lt;p&gt;This post will go over extracting feature (variable) importance and creating a function for creating a ggplot object for it. I will draw on the simplicity of Chris Albon’s post. For steps to do the following in Python, I recommend his &lt;a href=&#34;https://chrisalbon.com/machine_learning/trees_and_forests/feature_importance/&#34;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Feature Importance by Chris Albon&#34; src=&#34;https://chrisalbon.com/images/machine_learning_flashcards/Feature_Importance_print.png&#34;/&gt;&lt;/p&gt;
&lt;p&gt;If you’ve ever created a decision tree, you’ve probably looked at measures of feature importance. In the above flashcard, impurity refers to how many times a feature was use and lead to a misclassification. Here, we’re looking at the importance of a feature, so how much it helped in the classification or prediction of an outcome.&lt;/p&gt;
&lt;p&gt;This example will draw on the build in data &lt;code&gt;Sonar&lt;/code&gt; from the &lt;code&gt;mlbench&lt;/code&gt; package.&lt;/p&gt;
&lt;div id=&#34;prepping-the-environment&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Prepping the Environment&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(caret)
library(xgboost)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-the-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Loading the data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(&amp;quot;Sonar&amp;quot;, package = &amp;quot;mlbench&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;train-the-decision-tree&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Train the decision tree&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xgb_fit &amp;lt;- train(Class ~ .,
                 data = Sonar,
                 method = &amp;quot;xgbLinear&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xgb_fit&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## eXtreme Gradient Boosting 
## 
## 208 samples
##  60 predictor
##   2 classes: &amp;#39;M&amp;#39;, &amp;#39;R&amp;#39; 
## 
## No pre-processing
## Resampling: Bootstrapped (25 reps) 
## Summary of sample sizes: 208, 208, 208, 208, 208, 208, ... 
## Resampling results across tuning parameters:
## 
##   lambda  alpha  nrounds  Accuracy   Kappa    
##   0e+00   0e+00   50      0.7954411  0.5856736
##   0e+00   0e+00  100      0.7955067  0.5859968
##   0e+00   0e+00  150      0.7955067  0.5859968
##   0e+00   1e-04   50      0.7931161  0.5807902
##   0e+00   1e-04  100      0.7896880  0.5736899
##   0e+00   1e-04  150      0.7896880  0.5736899
##   0e+00   1e-01   50      0.7974045  0.5899654
##   0e+00   1e-01  100      0.8007978  0.5965433
##   0e+00   1e-01  150      0.8018652  0.5987027
##   1e-04   0e+00   50      0.7936100  0.5817500
##   1e-04   0e+00  100      0.7902008  0.5746993
##   1e-04   0e+00  150      0.7902008  0.5746993
##   1e-04   1e-04   50      0.7916874  0.5777943
##   1e-04   1e-04  100      0.7883283  0.5708511
##   1e-04   1e-04  150      0.7883283  0.5708511
##   1e-04   1e-01   50      0.7974045  0.5899654
##   1e-04   1e-01  100      0.8007978  0.5965433
##   1e-04   1e-01  150      0.8018652  0.5987027
##   1e-01   0e+00   50      0.7937810  0.5824365
##   1e-01   0e+00  100      0.7958099  0.5863334
##   1e-01   0e+00  150      0.7958099  0.5863334
##   1e-01   1e-04   50      0.7953707  0.5854209
##   1e-01   1e-04  100      0.7963228  0.5873658
##   1e-01   1e-04  150      0.7963228  0.5873658
##   1e-01   1e-01   50      0.7987849  0.5923712
##   1e-01   1e-01  100      0.8034709  0.6018293
##   1e-01   1e-01  150      0.8049729  0.6047501
## 
## Tuning parameter &amp;#39;eta&amp;#39; was held constant at a value of 0.3
## Accuracy was used to select the optimal model using the largest value.
## The final values used for the model were nrounds = 150, lambda =
##  0.1, alpha = 0.1 and eta = 0.3.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-feature-importance&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Extract feature importance&lt;/h3&gt;
&lt;p&gt;Since we are using the &lt;code&gt;caret&lt;/code&gt; package we can use the built in function to extract feature importance, or the function from the &lt;code&gt;xgboost&lt;/code&gt; package. We will do both.&lt;/p&gt;
&lt;div id=&#34;caret-feature-importance&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;caret&lt;/code&gt; feature importance&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;caret_imp &amp;lt;- varImp(xgb_fit)
caret_imp&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## xgbLinear variable importance
## 
##   only 20 most important variables shown (out of 60)
## 
##     Overall
## V11 100.000
## V45  26.941
## V16  24.354
## V21  21.665
## V51  18.798
## V4   18.140
## V48  14.366
## V9   12.607
## V31  12.489
## V27  12.347
## V15  11.269
## V34   9.125
## V37   8.805
## V20   8.792
## V52   8.114
## V28   7.162
## V32   5.897
## V55   4.584
## V17   4.490
## V49   4.129&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;xgboost-feature-importance&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;xgboost&lt;/code&gt; feature importance&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xgb_imp &amp;lt;- xgb.importance(feature_names = xgb_fit$finalModel$feature_names,
               model = xgb_fit$finalModel)

head(xgb_imp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Feature       Gain      Cover  Frequency
## 1:     V11 0.25619824 0.12851517 0.03283582
## 2:     V45 0.06902206 0.04458378 0.03582090
## 3:     V16 0.06239349 0.04163116 0.01492537
## 4:     V21 0.05550596 0.03471532 0.02686567
## 5:     V51 0.04816044 0.04527492 0.05373134
## 6:      V4 0.04647540 0.03484923 0.03880597&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting-feature-importance&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plotting feature importance&lt;/h3&gt;
&lt;div id=&#34;caret&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;caret&lt;/h4&gt;
&lt;p&gt;You have a few options when it comes to plotting feature importance. You can call plot on the saved object from caret as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(caret_imp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-12-1-plot_xgboost_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(caret_imp) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-12-1-plot_xgboost_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;xgboost&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;xgboost&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;You can use the plot functionality from &lt;code&gt;xgboost&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xgb.plot.importance(xgb_imp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-12-1-plot_xgboost_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt; Or use their ggplot feature&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xgb.ggplot.importance(xgb_imp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-12-1-plot_xgboost_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>[Not so] generic functions</title>
      <link>/post/function-methods/</link>
      <pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/function-methods/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-jargon&#34;&gt;The Jargon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-generic-method&#34;&gt;The Generic Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-default-method&#34;&gt;The Default Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sf-method&#34;&gt;&lt;code&gt;sf&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tbl_graph-method&#34;&gt;&lt;code&gt;tbl_graph&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#review-tldr&#34;&gt;Review (tl;dr)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Lately I have been doing more of my spatial analysis work in R with the help of the &lt;code&gt;sf&lt;/code&gt; package. One shapefile I was working with had some horrendously named columns, and naturally, I tried to clean them using the &lt;code&gt;clean_names()&lt;/code&gt; function from the &lt;code&gt;janitor&lt;/code&gt; package. But lo, an egregious error occurred. To this end, I officially filed my complaint as an &lt;a href=&#34;https://github.com/sfirke/janitor/pull/249&#34;&gt;issue&lt;/a&gt;. The solution presented was to &lt;em&gt;simply&lt;/em&gt; create a method for &lt;code&gt;sf&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;Yeah, methods, how tough can those be? Apparently the process isn’t at all difficult. But figuring out the process? That was difficult. This post will explain how I went about the process for converting the &lt;code&gt;clean_names()&lt;/code&gt; function into a &lt;em&gt;generic&lt;/em&gt; (I’ll explain this in a second), and creating a &lt;em&gt;method&lt;/em&gt; for &lt;code&gt;sf&lt;/code&gt; and &lt;code&gt;tbl_graph&lt;/code&gt; objects.&lt;/p&gt;
&lt;div id=&#34;the-jargon&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The Jargon&lt;/h3&gt;
&lt;p&gt;Okay, I want to address the jargon. What the hell is a &lt;em&gt;generic&lt;/em&gt; function, and what is a &lt;em&gt;method&lt;/em&gt;? But first, I want to give a quick tl;dr on what a function is. I define as function as bit of code that takes an input, changes it in some way, and produces an output. Even simpler, a function takes an input and creates an output.&lt;/p&gt;
&lt;div id=&#34;generic-functions&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Generic Functions&lt;/h4&gt;
&lt;p&gt;Now, what is a &lt;em&gt;&lt;strong&gt;generic&lt;/strong&gt;&lt;/em&gt; function? My favorite definition that I’ve seen so far comes from &lt;em&gt;LispWorks Ltd&lt;/em&gt; (their website is a historic landmark, I recommend you give it a look for a reminder of what the internet used to be). They define a &lt;a href=&#34;http://clhs.lisp.se/Body/07_fa.htm&#34;&gt;generic function&lt;/a&gt; as&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a function whose behavior depends on the classes or identities of the arguments supplied to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means that we have to create a function that looks at the class of an object and perform an operation based on the object class. That means if there is &lt;code&gt;&amp;quot;numeric&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;list&amp;quot;&lt;/code&gt; object, they will be treated differently. These are called &lt;code&gt;methods&lt;/code&gt;. Note: you can find the class of an object by using the &lt;code&gt;class()&lt;/code&gt; function on any object.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;methods&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Methods&lt;/h4&gt;
&lt;p&gt;To steal from &lt;em&gt;LispWorks Ltd&lt;/em&gt; again, a &lt;a href=&#34;http://clhs.lisp.se/Body/26_glo_m.htm#method&#34;&gt;method&lt;/a&gt; is&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;part of a generic function which provides information about how that generic function should behave [for] certain classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means that a method is part of a generic function and has to be defined separately. Imagine we have a generic function called &lt;code&gt;f&lt;/code&gt; with methods for &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;numeric&lt;/code&gt; objects. The way that we would denote these methods is by putting a period after the function name and indicating the type of object the function is to be used on. These would look like &lt;code&gt;f.list&lt;/code&gt; and &lt;code&gt;f.numeric&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;But to save time you can always create a &lt;code&gt;default&lt;/code&gt; method which will be dispatched (used) on any object that it hasn’t been explicitly told how to operate on (by a specific method).&lt;/p&gt;
&lt;p&gt;Now that the intuition of what generic functions and methods R, we can begin the work of actually creating them. This tutorial will walk through the steps I took in changing the &lt;code&gt;clean_names()&lt;/code&gt; from a standard function into a generic function with methods for &lt;code&gt;sf&lt;/code&gt; objects and &lt;code&gt;tbl_graph&lt;/code&gt; objects from the &lt;a href=&#34;https://github.com/r-spatial/sf&#34;&gt;&lt;code&gt;sf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/thomasp85/tidygraph&#34;&gt;&lt;code&gt;tidygraph&lt;/code&gt;&lt;/a&gt; packages respectively.&lt;/p&gt;
&lt;p&gt;A brief overview of the process:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Define the generic function&lt;/li&gt;
&lt;li&gt;Create a default method&lt;/li&gt;
&lt;li&gt;Create additional methods&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A quick note: The code that follows is not identical to that of the package. I will be changing it up to make it simpler to read and understand what is happening.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-generic-method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The Generic Method&lt;/h3&gt;
&lt;p&gt;The first step, as described above, is to create a generic function. Generic functions are made by creating a new function with the body containing only a call to the &lt;code&gt;UseMethod()&lt;/code&gt; function. The only argument to this is the name of your generic function—this should be the same as the name of the function you are making. This tells R that you are creating a generic function. Additionally, you should add any arguments that will be necessary for your function. Here, there are two arguments: &lt;code&gt;dat&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt;. These indicate the data to be cleaned and the preferred style for them to be cleaned according to.&lt;/p&gt;
&lt;p&gt;I am not setting any default values for &lt;code&gt;dat&lt;/code&gt; to make it required, whereas I am setting &lt;code&gt;case&lt;/code&gt; to &lt;code&gt;&amp;quot;snake&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_names &amp;lt;- function(dat, case = &amp;quot;snake&amp;quot;) {
  UseMethod(&amp;quot;clean_names&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have created a generic function. But this function doesn’t know how to run on any given object types. In other words, there are no methods associated with it. To illustrate this try using the &lt;code&gt;clean_names()&lt;/code&gt; function we just defined on objects of different types.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clean_names(1) # numeric 
clean_names(&amp;quot;test&amp;quot;) # character 
clean_names(TRUE) # logical &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;no applicable method for &amp;#39;clean_names&amp;#39; applied to an object of class \&amp;quot;c(&amp;#39;double&amp;#39;, &amp;#39;numeric&amp;#39;)\&amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;no applicable method for &amp;#39;clean_names&amp;#39; applied to an object of class \&amp;quot;character\&amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;no applicable method for &amp;#39;clean_names&amp;#39; applied to an object of class \&amp;quot;logical\&amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of these calls say &lt;code&gt;no applicable method for &#39;x&#39; applied to an object of [class]&lt;/code&gt;. In order to prevent this from happening, we can create a default method. A default method will always be used if the function doesn’t have a method for the provided object type.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-default-method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The Default Method&lt;/h3&gt;
&lt;p&gt;Remember that methods are indicated by writing &lt;code&gt;function.method&lt;/code&gt;. It is also important to note that the &lt;code&gt;method&lt;/code&gt; should indicate an object class. To figure out what class an object is you can use the &lt;code&gt;class()&lt;/code&gt; function. For example &lt;code&gt;class(1)&lt;/code&gt; tells you that the number &lt;code&gt;1&lt;/code&gt; is “numeric”.&lt;/p&gt;
&lt;p&gt;In this next step I want to create a default method that will be used on every object that there isn’t a method explicitly for. To do this I will create a function called &lt;code&gt;clean_names.default&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As background, the &lt;code&gt;clean_names()&lt;/code&gt; function takes a data frame and changes column headers to fit a given style. &lt;code&gt;clean_names()&lt;/code&gt; in the &lt;a href=&#34;https://github.com/sfirke/janitor&#34;&gt;development version&lt;/a&gt; is based on the function &lt;code&gt;make_clean_names()&lt;/code&gt; which takes a character vector and makes each value match a given style (the default is snake, and you should only use snake case because everything else is wrong * sarcasm * ).&lt;/p&gt;
&lt;p&gt;To prevent us from loading the entire &lt;code&gt;janitor&lt;/code&gt; package and overwriting our version of the &lt;code&gt;clean_names()&lt;/code&gt; function, we can import the &lt;code&gt;make_clean_names()&lt;/code&gt; function directly from GitHub by reading the file directly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;source(&amp;quot;https://raw.githubusercontent.com/sfirke/janitor/master/R/make_clean_names.R&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s see how this function works. For this we will use the ugliest character vector I have ever seen from the &lt;a href=&#34;https://github.com/sfirke/janitor/blob/master/tests/testthat/test-clean-names.R&#34;&gt;tests&lt;/a&gt; for &lt;code&gt;clean_names()&lt;/code&gt; (h/t &lt;span class=&#34;citation&#34;&gt;@sfirke&lt;/span&gt; for making this).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ugly_names &amp;lt;- c(
  &amp;quot;sp ace&amp;quot;, &amp;quot;repeated&amp;quot;, &amp;quot;a**^@&amp;quot;, &amp;quot;%&amp;quot;, &amp;quot;*&amp;quot;, &amp;quot;!&amp;quot;,
  &amp;quot;d(!)9&amp;quot;, &amp;quot;REPEATED&amp;quot;, &amp;quot;can\&amp;quot;&amp;#39;t&amp;quot;, &amp;quot;hi_`there`&amp;quot;, &amp;quot;  leading spaces&amp;quot;,
  &amp;quot;€&amp;quot;, &amp;quot;ação&amp;quot;, &amp;quot;Farœ&amp;quot;, &amp;quot;a b c d e f&amp;quot;, &amp;quot;testCamelCase&amp;quot;, &amp;quot;!leadingpunct&amp;quot;,
  &amp;quot;average # of days&amp;quot;, &amp;quot;jan2009sales&amp;quot;, &amp;quot;jan 2009 sales&amp;quot;
)

ugly_names&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;sp ace&amp;quot;            &amp;quot;repeated&amp;quot;          &amp;quot;a**^@&amp;quot;            
##  [4] &amp;quot;%&amp;quot;                 &amp;quot;*&amp;quot;                 &amp;quot;!&amp;quot;                
##  [7] &amp;quot;d(!)9&amp;quot;             &amp;quot;REPEATED&amp;quot;          &amp;quot;can\&amp;quot;&amp;#39;t&amp;quot;          
## [10] &amp;quot;hi_`there`&amp;quot;        &amp;quot;  leading spaces&amp;quot;  &amp;quot;€&amp;quot;                
## [13] &amp;quot;ação&amp;quot;              &amp;quot;Farœ&amp;quot;              &amp;quot;a b c d e f&amp;quot;      
## [16] &amp;quot;testCamelCase&amp;quot;     &amp;quot;!leadingpunct&amp;quot;     &amp;quot;average # of days&amp;quot;
## [19] &amp;quot;jan2009sales&amp;quot;      &amp;quot;jan 2009 sales&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now to see how this function works:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;make_clean_names(ugly_names)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;sp_ace&amp;quot;                 &amp;quot;repeated&amp;quot;              
##  [3] &amp;quot;a&amp;quot;                      &amp;quot;percent&amp;quot;               
##  [5] &amp;quot;x&amp;quot;                      &amp;quot;x_2&amp;quot;                   
##  [7] &amp;quot;d_9&amp;quot;                    &amp;quot;repeated_2&amp;quot;            
##  [9] &amp;quot;cant&amp;quot;                   &amp;quot;hi_there&amp;quot;              
## [11] &amp;quot;leading_spaces&amp;quot;         &amp;quot;x_3&amp;quot;                   
## [13] &amp;quot;acao&amp;quot;                   &amp;quot;faroe&amp;quot;                 
## [15] &amp;quot;a_b_c_d_e_f&amp;quot;            &amp;quot;test_camel_case&amp;quot;       
## [17] &amp;quot;leadingpunct&amp;quot;           &amp;quot;average_number_of_days&amp;quot;
## [19] &amp;quot;jan2009sales&amp;quot;           &amp;quot;jan_2009_sales&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Très magnifique!&lt;/p&gt;
&lt;p&gt;The body of the default method will take column names from a dataframe, clean them, and reassign them. Before we can do this, a dataframe is needed!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create a data frame with 20 columns
test_df &amp;lt;- as_tibble(matrix(sample(100, 20), ncol = 20))

# makes the column names the `ugly_names` vector
names(test_df) &amp;lt;- ugly_names

# print the data frame.
test_df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 20
##   `sp ace` repeated `a**^@`   `%`   `*`   `!` `d(!)9` REPEATED `can&amp;quot;&amp;#39;t`
##      &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
## 1       95        7      17     6     9    11       1       37       69
## # ... with 11 more variables: `hi_\`there\`` &amp;lt;int&amp;gt;, ` leading
## #   spaces` &amp;lt;int&amp;gt;, `€` &amp;lt;int&amp;gt;, ação &amp;lt;int&amp;gt;, Farœ &amp;lt;int&amp;gt;, `a b c d e f` &amp;lt;int&amp;gt;,
## #   testCamelCase &amp;lt;int&amp;gt;, `!leadingpunct` &amp;lt;int&amp;gt;, `average # of days` &amp;lt;int&amp;gt;,
## #   jan2009sales &amp;lt;int&amp;gt;, `jan 2009 sales` &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The process for writing this function is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;take a dataframe&lt;/li&gt;
&lt;li&gt;take the old column names and clean them&lt;/li&gt;
&lt;li&gt;reassign the column names as the new clean names&lt;/li&gt;
&lt;li&gt;return the object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_names.default &amp;lt;- function(dat, case = &amp;quot;snake&amp;quot;) { 
  # retrieve the old names
  old_names &amp;lt;- names(dat)
  # clean the old names
  new_names &amp;lt;- make_clean_names(old_names, case = case)
  # assign the column names as the clean names vector
  names(dat) &amp;lt;- new_names
  # return the data
  return(dat)
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the default method has been defined. Try running the function on our test dataframe!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_names(test_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 20
##   sp_ace repeated     a percent     x   x_2   d_9 repeated_2  cant hi_there
##    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
## 1     95        7    17       6     9    11     1         37    69       49
## # ... with 10 more variables: leading_spaces &amp;lt;int&amp;gt;, x_3 &amp;lt;int&amp;gt;, acao &amp;lt;int&amp;gt;,
## #   faroe &amp;lt;int&amp;gt;, a_b_c_d_e_f &amp;lt;int&amp;gt;, test_camel_case &amp;lt;int&amp;gt;,
## #   leadingpunct &amp;lt;int&amp;gt;, average_number_of_days &amp;lt;int&amp;gt;, jan2009sales &amp;lt;int&amp;gt;,
## #   jan_2009_sales &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh, my gorsh. Look at that! We can try replicating this with a named vector to see how the default method dispatched on unknown objects!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create a vector with 20 elements
test_vect &amp;lt;- c(1:20)

# name each element with the ugly_names vector 
names(test_vect) &amp;lt;- ugly_names

# try cleaning!
clean_names(test_vect)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 sp_ace               repeated                      a 
##                      1                      2                      3 
##                percent                      x                    x_2 
##                      4                      5                      6 
##                    d_9             repeated_2                   cant 
##                      7                      8                      9 
##               hi_there         leading_spaces                    x_3 
##                     10                     11                     12 
##                   acao                  faroe            a_b_c_d_e_f 
##                     13                     14                     15 
##        test_camel_case           leadingpunct average_number_of_days 
##                     16                     17                     18 
##           jan2009sales         jan_2009_sales 
##                     19                     20&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks like this default function works super well with named objects! Now, we will broach the problem I started with, &lt;code&gt;sf&lt;/code&gt; objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sf-method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;sf&lt;/code&gt; method&lt;/h3&gt;
&lt;p&gt;This section will go over the process for creating the &lt;code&gt;sf&lt;/code&gt; method. If you have not ever used the &lt;code&gt;sf&lt;/code&gt; package, I suggest you give it a try! It makes dataframe objects with spatial data associated with it. This allows you to perform many of the functions from the &lt;code&gt;tidyverse&lt;/code&gt; to spatial data.&lt;/p&gt;
&lt;p&gt;Before getting into it, I want to create a test object to work with. I will take the &lt;code&gt;test_df&lt;/code&gt; column, create longitude and latitude columns, and then convert it into an &lt;code&gt;sf&lt;/code&gt; object. The details of &lt;code&gt;sf&lt;/code&gt; objects is out of the scope of this post.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sf)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Linking to GEOS 3.6.1, GDAL 2.1.3, PROJ 4.9.3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test_sf &amp;lt;- test_df %&amp;gt;%
  # create xy columns
  mutate(long = -80, 
         lat = 40) %&amp;gt;% 
  # convert to sf object 
  st_as_sf(coords = c(&amp;quot;long&amp;quot;, &amp;quot;lat&amp;quot;))

# converting geometry column name to poor style
names(test_sf)[21] &amp;lt;- &amp;quot;Geometry&amp;quot;

# telling sf which column is now the geometry
st_geometry(test_sf) &amp;lt;- &amp;quot;Geometry&amp;quot;

test_sf&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 1 feature and 20 fields
## geometry type:  POINT
## dimension:      XY
## bbox:           xmin: -80 ymin: 40 xmax: -80 ymax: 40
## epsg (SRID):    NA
## proj4string:    NA
## # A tibble: 1 x 21
##   `sp ace` repeated `a**^@`   `%`   `*`   `!` `d(!)9` REPEATED `can&amp;quot;&amp;#39;t`
##      &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
## 1       95        7      17     6     9    11       1       37       69
## # ... with 12 more variables: `hi_\`there\`` &amp;lt;int&amp;gt;, ` leading
## #   spaces` &amp;lt;int&amp;gt;, `€` &amp;lt;int&amp;gt;, ação &amp;lt;int&amp;gt;, Farœ &amp;lt;int&amp;gt;, `a b c d e f` &amp;lt;int&amp;gt;,
## #   testCamelCase &amp;lt;int&amp;gt;, `!leadingpunct` &amp;lt;int&amp;gt;, `average # of days` &amp;lt;int&amp;gt;,
## #   jan2009sales &amp;lt;int&amp;gt;, `jan 2009 sales` &amp;lt;int&amp;gt;, Geometry &amp;lt;POINT&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;sf&lt;/code&gt; object has been created. But now how does our default method of the &lt;code&gt;clean_names()&lt;/code&gt; function work on this object? There is only one way to know, try it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clean_names(test_sf)

Error in st_geometry.sf(x) : attr(obj, &amp;quot;sf_column&amp;quot;) does not point to a geometry column. Did you rename it, without setting st_geometry(obj) &amp;lt;- &amp;quot;newname&amp;quot;?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how it fails. &lt;code&gt;sf&lt;/code&gt; noticed that I changed the name of the geometry column without explicitly telling it I did so. Since the geometry column is &lt;em&gt;almost&lt;/em&gt; always the last column of an sf object, we can use the &lt;code&gt;make_clean_names()&lt;/code&gt; function on every column but the last one! To do this we will use the &lt;code&gt;rename_at()&lt;/code&gt; function from &lt;code&gt;dplyr&lt;/code&gt;. This function allows you rename columns based on their name or position, and a function that renames it (in this case, &lt;code&gt;make_clean_names()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;For this example dataset, say I wanted to clean the first column. How would I do that? Note that the first column is called &lt;code&gt;sp ace&lt;/code&gt;. How this works can be seen in a simple example. In the below function call we are using the &lt;code&gt;rename_at()&lt;/code&gt; function (for more, go &lt;a href=&#34;https://dplyr.tidyverse.org/reference/select.html&#34;&gt;here&lt;/a&gt;), selecting the first column name, and renaming it using the &lt;code&gt;make_clean_names()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rename_at(test_df, .vars = vars(1), .funs = make_clean_names)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 20
##   sp_ace repeated `a**^@`   `%`   `*`   `!` `d(!)9` REPEATED `can&amp;quot;&amp;#39;t`
##    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
## 1     95        7      17     6     9    11       1       37       69
## # ... with 11 more variables: `hi_\`there\`` &amp;lt;int&amp;gt;, ` leading
## #   spaces` &amp;lt;int&amp;gt;, `€` &amp;lt;int&amp;gt;, ação &amp;lt;int&amp;gt;, Farœ &amp;lt;int&amp;gt;, `a b c d e f` &amp;lt;int&amp;gt;,
## #   testCamelCase &amp;lt;int&amp;gt;, `!leadingpunct` &amp;lt;int&amp;gt;, `average # of days` &amp;lt;int&amp;gt;,
## #   jan2009sales &amp;lt;int&amp;gt;, `jan 2009 sales` &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how only the first column has been cleaned. It went from &lt;code&gt;sp ace&lt;/code&gt; to &lt;code&gt;sp_ace&lt;/code&gt;. The goal is to replicate this for all columns &lt;em&gt;except&lt;/em&gt; the last one.&lt;/p&gt;
&lt;p&gt;To write the sf method, the above line of code can be adapted to select columns 1 through the number of columns &lt;em&gt;minus&lt;/em&gt; 1 (so geometry isn’t selected). In order to make this work, we need to identify the second to last column—this will be supplied as the ending value of our selected variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_names.sf &amp;lt;- function(dat, case = &amp;quot;snake&amp;quot;) {
  # identify last column that is not geometry
  last_col_to_clean &amp;lt;- ncol(dat) - 1
  # create a new dat object
  dat &amp;lt;- rename_at(dat, 
                   # rename the first up until the second to last
                   .vars = vars(1:last_col_to_clean), 
                   # clean using the make_clean_names
                   .funs = make_clean_names)
  return(dat)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voilà! Our first non-default method has been created. This means that when an &lt;code&gt;sf&lt;/code&gt; object is supplied to our generic function &lt;code&gt;clean_names()&lt;/code&gt; it looks at the class of the object—&lt;code&gt;class(sf_object)&lt;/code&gt;—notices it’s an &lt;code&gt;sf&lt;/code&gt; object, then dispatches (uses) the &lt;code&gt;clean_names.sf()&lt;/code&gt; method instead of the default.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_names(test_sf)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 1 feature and 20 fields
## geometry type:  POINT
## dimension:      XY
## bbox:           xmin: -80 ymin: 40 xmax: -80 ymax: 40
## epsg (SRID):    NA
## proj4string:    NA
## # A tibble: 1 x 21
##   sp_ace repeated     a percent     x   x_2   d_9 repeated_2  cant hi_there
##    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
## 1     95        7    17       6     9    11     1         37    69       49
## # ... with 11 more variables: leading_spaces &amp;lt;int&amp;gt;, x_3 &amp;lt;int&amp;gt;, acao &amp;lt;int&amp;gt;,
## #   faroe &amp;lt;int&amp;gt;, a_b_c_d_e_f &amp;lt;int&amp;gt;, test_camel_case &amp;lt;int&amp;gt;,
## #   leadingpunct &amp;lt;int&amp;gt;, average_number_of_days &amp;lt;int&amp;gt;, jan2009sales &amp;lt;int&amp;gt;,
## #   jan_2009_sales &amp;lt;int&amp;gt;, Geometry &amp;lt;POINT&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we see that it worked exactly as we hoped. Every column but the last has been altered. This allows &lt;code&gt;sf&lt;/code&gt; to name it’s geometry columns whatever it would like without disrupting it.&lt;/p&gt;
&lt;p&gt;Shortly after this addition was added to the package I became aware of another type of object that had problems using &lt;code&gt;clean_names()&lt;/code&gt;. This is the &lt;code&gt;tbl_graph&lt;/code&gt; object from the &lt;code&gt;tidygraph&lt;/code&gt; package from Thomas Lin Pederson.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tbl_graph-method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;tbl_graph&lt;/code&gt; method&lt;/h3&gt;
&lt;p&gt;In issue &lt;a href=&#34;https://github.com/sfirke/janitor/issues/252&#34;&gt;#252&lt;/a&gt; &lt;a href=&#34;https://github.com/gvdr&#34;&gt;@gvdr&lt;/a&gt; noted that calling &lt;code&gt;clean_names()&lt;/code&gt; on a &lt;code&gt;tbl_graph&lt;/code&gt; doesn’t execute. Thankfully &lt;a href=&#34;https://github.com/Tazinho&#34;&gt;@Tazinho&lt;/a&gt; noted that you could easily clean the column headers by using the &lt;code&gt;rename_all()&lt;/code&gt; function from &lt;code&gt;dplyr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here the solution was even easier than above. As a reminder, in order to make the &lt;code&gt;tbl_graph&lt;/code&gt; method, we need to specify the name of the generic followed by the object class.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_names.tbl_graph &amp;lt;- function(dat, case = &amp;quot;snake&amp;quot;) { 
  # rename all columns
  dat &amp;lt;- rename_all(dat, make_clean_names)
  return(dat)
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to test the function, we will need a graph to test it on. This example draws on the example used in the issue.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidygraph)
# create test graph to test clean_names
test_graph &amp;lt;- play_erdos_renyi(0, 0.5) %&amp;gt;% 
  # attach test_df as columns 
  bind_nodes(test_df)

test_graph&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tbl_graph: 1 nodes and 0 edges
## #
## # A rooted tree
## #
## # Node Data: 1 x 20 (active)
##   `sp ace` repeated `a**^@`   `%`   `*`   `!` `d(!)9` REPEATED `can&amp;quot;&amp;#39;t`
##      &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
## 1       95        7      17     6     9    11       1       37       69
## # ... with 11 more variables: `hi_\`there\`` &amp;lt;int&amp;gt;, ` leading
## #   spaces` &amp;lt;int&amp;gt;, `€` &amp;lt;int&amp;gt;, ação &amp;lt;int&amp;gt;, Farœ &amp;lt;int&amp;gt;, `a b c d e f` &amp;lt;int&amp;gt;,
## #   testCamelCase &amp;lt;int&amp;gt;, `!leadingpunct` &amp;lt;int&amp;gt;, `average # of days` &amp;lt;int&amp;gt;,
## #   jan2009sales &amp;lt;int&amp;gt;, `jan 2009 sales` &amp;lt;int&amp;gt;
## #
## # Edge Data: 0 x 2
## # ... with 2 variables: from &amp;lt;int&amp;gt;, to &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we see that there is a graph with only 1 node and 0 edges (relations) with bad column headers (for more, visit the &lt;a href=&#34;https://github.com/thomasp85/tidygraph/&#34;&gt;GitHub page&lt;/a&gt;). Now we can test this as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_names(test_graph)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tbl_graph: 1 nodes and 0 edges
## #
## # A rooted tree
## #
## # Node Data: 1 x 20 (active)
##   sp_ace repeated     a percent     x   x_2   d_9 repeated_2  cant hi_there
##    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
## 1     95        7    17       6     9    11     1         37    69       49
## # ... with 10 more variables: leading_spaces &amp;lt;int&amp;gt;, x_3 &amp;lt;int&amp;gt;, acao &amp;lt;int&amp;gt;,
## #   faroe &amp;lt;int&amp;gt;, a_b_c_d_e_f &amp;lt;int&amp;gt;, test_camel_case &amp;lt;int&amp;gt;,
## #   leadingpunct &amp;lt;int&amp;gt;, average_number_of_days &amp;lt;int&amp;gt;, jan2009sales &amp;lt;int&amp;gt;,
## #   jan_2009_sales &amp;lt;int&amp;gt;
## #
## # Edge Data: 0 x 2
## # ... with 2 variables: from &amp;lt;int&amp;gt;, to &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It worked as anticipated!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;review-tldr&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Review (tl;dr)&lt;/h3&gt;
&lt;p&gt;In the preceding sections we learned what generic functions and methods are. How to create a generic function, a default method, and methods for objects of different classes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;generic function&lt;/strong&gt;: “A generic function is a function whose behavior depends on the classes or identities of the arguments supplied to it”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;generic function method&lt;/strong&gt;: “part of a generic function and which provides information about how that generic function should behave [for] certain classes”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The process to create a function with a method is to:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Create a generic function with:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f_x &amp;lt;- function() { UseMethod(&amp;quot;f_x&amp;quot;) }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Define the default method with:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f_x.default &amp;lt;- function() { do something }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Define object class specific methods with:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f_x.class &amp;lt;- function() { do something else}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;notes&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Notes&lt;/h4&gt;
&lt;p&gt;If you have not yet encountered the &lt;code&gt;janitor&lt;/code&gt; package it will help you tremendously with various data cleaning processes. Clearly, &lt;code&gt;clean_names()&lt;/code&gt; is my favorite function as it helps me enforce my preferred style (and the only). If you are not aware of &lt;em&gt;“proper”&lt;/em&gt; R style, I suggest you read the &lt;a href=&#34;http://adv-r.had.co.nz/Style.html&#34;&gt;style guide&lt;/a&gt; in &lt;a href=&#34;http://adv-r.had.co.nz/&#34;&gt;Advanced R&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While on the subject of &lt;em&gt;Advanced R&lt;/em&gt;, I suggest you read the “Creating new methods and generics” &lt;a href=&#34;http://adv-r.had.co.nz/OO-essentials.html&#34;&gt;section&lt;/a&gt; of it. I struggled comprehending it at first because I didn’t even know what a method was. However, if after reading this you feel like you want more, that’s the place to go.&lt;/p&gt;
&lt;p&gt;I’d like to thank &lt;a href=&#34;https://github.com/sfirke&#34;&gt;@sfirke&lt;/a&gt; for being exceptionally helpful in guiding my contributions to the &lt;code&gt;janitor&lt;/code&gt; package.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>US Representation: Part I</title>
      <link>/post/us-representation-i/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/us-representation-i/</guid>
      <description>


&lt;p&gt;Before the United States created the Constitution, something called the &lt;a href=&#34;https://history.state.gov/milestones/1776-1783/articles&#34;&gt;&lt;em&gt;Articles of Confederation&lt;/em&gt;&lt;/a&gt; defined what the US Government would look like. It was the first attempt at creating some sort of agreement between the 13 original states to form a central government. In the end, the Articles of Confederation made the new central government too weak to accomplish anything. Then, in 1787 representatives from each state met in Philadelphia to entirely scrap the Articles of Confederation in a meeting that became known as the &lt;a href=&#34;https://history.state.gov/milestones/1784-1800/convention-and-ratification&#34;&gt;Constitutional Convention&lt;/a&gt;. They would then end up creating the Constitution of the United States of America which we all know today.&lt;/p&gt;
&lt;p&gt;During this time, there were three main issues at hand. Representatives of the convention sought to give each state enough autonomy to function independently. They engaged in heated debated about how much power each state should be given and eventually, the issue of slavery — (3) how would slaves be counted for tax and representation purposes?&lt;/p&gt;
&lt;p&gt;The debate surrounding how much power (or representation) that would be given to each state in the new government was the source of much rancour at the convention. There were two leading ideas that addressed this problem. One of which was that each state would have an equal say regardless of its physical size or the number of people within it. The other was that each state would have power relative to their total population.&lt;/p&gt;
&lt;p&gt;These ideas were presented as the &lt;a href=&#34;https://en.wikipedia.org/wiki/New_Jersey_Plan&#34;&gt;&lt;em&gt;New Jersey Plan&lt;/em&gt;&lt;/a&gt; and the &lt;a href=&#34;https://en.wikipedia.org/wiki/Virginia_Plan&#34;&gt;&lt;em&gt;Virginia Plan&lt;/em&gt;&lt;/a&gt;. James Madison drafted the Virginia Plan which also would be known as the “large-state-plan” and was intended to introduce proportional representation—effectively giving states with the most people the most power.&lt;/p&gt;
&lt;p&gt;Small states, feeling threatened by this, introduced the New Jersey plan. The New Jersey plan was an attempt to level the playing field between small and big states. The New Jersey plan would give each state 1 vote in the new government and would allow states like Delaware to have as much weight in votes as big states.&lt;/p&gt;
&lt;p&gt;In a move that would be known as the &lt;a href=&#34;https://www.senate.gov/artandhistory/history/minute/A_Great_Compromise.htm&#34;&gt;Great Compromise&lt;/a&gt; (or the Connecticut compromise), the representatives from Connecticut (a medium sized state) suggested that both ideas be put into effect. This idea created what is called a “bicameral legislature”—a legislative (law-making) body with two parts.&lt;/p&gt;
&lt;p&gt;One part of the new government would provide equal representation for each of the states. This became known as the &lt;em&gt;Senate&lt;/em&gt; which today has two representatives for each state. The other part of the new government became the &lt;em&gt;House of Representatives&lt;/em&gt; (also known more generally as “Congress”). This new body gave each state &lt;em&gt;“one [representative] for every Thirty Thousand [people]”&lt;/em&gt;. But as the US population grew so did the number of representatives in Washington DC. Eventually rules had to change to prevent the number of representatives from getting any more out of hand . Today, the House of Representatives has 435 congresspeople (more &lt;a href=&#34;https://en.wikipedia.org/wiki/United_States_congressional_apportionment#Past_increases&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Though the Connecticut compromise was an act of genius, it also implemented one of most reprehensible policies in US history: &lt;em&gt;the 3/5ths compromise&lt;/em&gt;. Slavery was the largest economic driving force in Southern states created by a seemingly endless supply of cost-free labor. Looking at the prospect of proportional representation, large slave owning states wanted each slave to be counted towards their population. For reference slaves composed 43% of the population of South Carolina, 41.6% of Virginia, 35.5% of Georgia, and 32% of North Carolina.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-11-25-representation-i_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;But there is one major catch, slaves were treated as property and not people. They were not given the same “inalienable rights” as everyone else. This was seen as unfair because slaves would not &lt;em&gt;actually&lt;/em&gt; be &lt;em&gt;represented&lt;/em&gt; in congress. If only free people were to be counted, that would punish slave holding states and empower Northern states.&lt;/p&gt;
&lt;p&gt;Eventually representatives of the convention came to a solution, one that still haunts our country until this very day. It was decided that 3 out of every 5 slaves would be counted for representation purposes (called apportionment). This compromise gave Southern states more representative power than their free population actually dictated. This rule stayed in effect until 1865 when the 13th Amendment was ratified.&lt;/p&gt;
&lt;p&gt;This compromise created the government that we have today. It paved the foundation for the Senate and the House of Representatives. The effects of this decision are being seen today. During the time of the Connecticut Compromise the United States was still a fledgling rural nation. Today, we are a leader in industry, play an outsized role in global economics, and we have seen an enormous push to city and suburban areas. This compromise is demonstrating an increasing rural bias in American politics.&lt;/p&gt;
&lt;p&gt;In a following post I will examine the implications of increasing urbanization on governing and legislation in the United States.&lt;/p&gt;
&lt;p&gt;If you still feel like you want more, check out &lt;a href=&#34;https://www.youtube.com/watch?v=kCCmuftyj8A&#34;&gt;this&lt;/a&gt; fun youtube video on constitutional compromises.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing: Letters to a layperson</title>
      <link>/post/introducing-letters-to-a-layperson/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/introducing-letters-to-a-layperson/</guid>
      <description>&lt;p&gt;I have been in the world of academia for nearly five years now. During this time I’ve read countless &lt;em&gt;scholarly&lt;/em&gt; journal articles that I’ve struggled to wrap my head around. The academic language is riddled with obfuscating words like “milieux” and “nexus” which are often used to explain relatively simple concepts in a not so simple language. I’ve had to train myself to understand the academic language and translate it to regular people (layperson) speak.&lt;/p&gt;

&lt;p&gt;The academic dialect is often associated with the &amp;ldquo;elitist media” (see &lt;a href=&#34;https://chomsky.info/199710__/&#34; target=&#34;_blank&#34;&gt;Chomsky&lt;/a&gt;) which has recently been blamed for creating a strong divide in American politics—as we’ve seen since the beginning of the 2016 presidential primaries. Many words, phrases, and ideas have been shrouded by this language barrier.  I have been trying to break down this barrier for myself for years now. I feel like I’ve only made a small dent. I have been trying to educate myself, a layperson, on these phrases and concepts.&lt;/p&gt;

&lt;p&gt;As an undergraduate student I studied sociology and anthropology, but I found that I was enamored with economics, political science, urban theory, data science, psychology, and other disciplines. Across these fields there are identical concepts represented by different words or phrases—an ever frustrating thing. This is a barrier to understanding these fields. You must know certain ideas, words, and histories to understand the content.&lt;/p&gt;

&lt;p&gt;I have been collecting notes on these ideas and often revisit them to remind myself of what they are, what they mean, and why they exist. These notes were created for a myself, a layperson.&lt;/p&gt;

&lt;p&gt;In this series of forthcoming posts, I will write about concepts that I wish I knew better in a language that I can understand. I call this collection of posts &lt;em&gt;Letters To a Layperson&lt;/em&gt;, inspired by the phenomenal book &lt;em&gt;Letters to a Young Contrarian&lt;/em&gt; by Christopher Hitchens.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Letters to a layperson</title>
      <link>/project/letters/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/project/letters/</guid>
      <description>&lt;p&gt;I have been in the world of academia for nearly five years now. During this time I’ve read countless &lt;em&gt;scholarly&lt;/em&gt; journal articles that I’ve struggled to wrap my head around. The academic language is riddled with obfuscating words like “milieux” and “nexus” which are often used to explain relatively simple concepts in a not so simple language. I’ve had to train myself to understand the academic language and translate it to regular people (layperson) speak.&lt;/p&gt;

&lt;p&gt;The academic dialect is often associated with the &amp;ldquo;elitist media” (see &lt;a href=&#34;https://chomsky.info/199710__/&#34; target=&#34;_blank&#34;&gt;Chomsky&lt;/a&gt;) which has recently been blamed for creating a strong divide in American politics—as we’ve seen since the beginning of the 2016 presidential primaries. Many words, phrases, and ideas have been shrouded by this language barrier.  I have been trying to break down this barrier for myself for years now. I feel like I’ve only made a small dent. I have been trying to educate myself, a layperson, on these phrases and concepts.&lt;/p&gt;

&lt;p&gt;As an undergraduate student I studied sociology and anthropology, but I found that I was enamored with economics, political science, urban theory, data science, psychology, and other disciplines. Across these fields there are identical concepts represented by different words or phrases—an ever frustrating thing. This is a barrier to understanding these fields. You must know certain ideas, words, and histories to understand the content.&lt;/p&gt;

&lt;p&gt;I have been collecting notes on these ideas and often revisit them to remind myself of what they are, what they mean, and why they exist. These notes were created for a myself, a layperson.&lt;/p&gt;

&lt;p&gt;In this series of forthcoming posts, I will write about concepts that I wish I knew better in a language that I can understand. I call this collection of posts &lt;em&gt;Letters To a Layperson&lt;/em&gt;, inspired by the phenomenal book &lt;em&gt;Letters to a Young Contrarian&lt;/em&gt; by Christopher Hitchens.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chunking your csv</title>
      <link>/post/write-chunked-csv/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/write-chunked-csv/</guid>
      <description>


&lt;p&gt;Sometimes due to limitations of software, file uploads often have a row limit. I recently encountered this while creating texting campaigns using &lt;a href=&#34;relaytxt.io&#34;&gt;Relay&lt;/a&gt;. Relay is a peer-to-peer texting platform. It has a limitation of 20k contacts per texting campaign. This is a limitation when running a massive Get Out the Vote (GOTV) texting initiative.&lt;/p&gt;
&lt;p&gt;In order to solve this problem, a large csv must be split into multiple csv’s for upload. Though this could be solved with excel and Google Sheets, who wants to labor over that?&lt;/p&gt;
&lt;p&gt;Here I will go through the methodology of writing a csv into multiple. I will use data from the &lt;a href=&#34;https://www.google.com/search?q=quantitative+social+science&amp;amp;oq=quantitative+social+science&amp;amp;aqs=chrome..69i57j69i61j69i65j69i60l2j69i59.5035j0j1&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;Quantitative Social Science&lt;/a&gt; book by Kosuke Imai.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

social &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/kosukeimai/qss/master/CAUSALITY/social.csv&amp;quot;)

dim(social)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 305866      6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This dataset has 305k observations and 6 columns. For this example let’s say we wanted to split this into files of 15,000 rows or fewer. We can use the following custom funciton:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv_chunk &amp;lt;- function(filepath, n, output_name) {
  df &amp;lt;- read_csv(filepath) # 1. read original file
  
  n_files &amp;lt;- ceiling(nrow(df)/n) # 2. identify how many files to make
  
  chunk_starts &amp;lt;- seq(1, n*n_files, by = n) #  3. identify the rown number to start on
  
  for (i in 1:n_files) { # 4. iterate through the csv to write the files
    chunk_end &amp;lt;- n*i # 4a
    df_to_write &amp;lt;- slice(df, chunk_starts[i]:chunk_end) # 4b
    fpath &amp;lt;- paste0(output_name, &amp;quot;_&amp;quot;, i, &amp;quot;.csv&amp;quot;) # 4c
    write_csv(df_to_write,  fpath) # 4d
    message(paste0(fpath, &amp;quot; was written.&amp;quot;)) # 4e
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function has a few steps. Let’s walk through them. The step numbers are commented above.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Read in the csv.&lt;/li&gt;
&lt;li&gt;Identify the number of files that will have to be created.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;This will be the number of rows of the data frame divided by the number of rows we want each file to have. This number will be rounded up to handle a remainder.&lt;/li&gt;
&lt;li&gt;In this case &lt;code&gt;ceiling(nrow(social) / 15000)&lt;/code&gt; is equal to 21.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Identify the row number to begin splitting the dataframe for each file.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;This will be a factor of our &lt;code&gt;n&lt;/code&gt; plus 1, but will never exceed the &lt;code&gt;nrow(df)&lt;/code&gt;,&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;This is the fun part, writing our files. The number of iterations is the number of files.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;4a&lt;/em&gt;: The ending row number is the iteration number multiplied by the number of rows.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;4b&lt;/em&gt;: use &lt;code&gt;slice()&lt;/code&gt; to cute the original data frame into the chunk beginning and chunk end&lt;/li&gt;
&lt;li&gt;&lt;em&gt;4c&lt;/em&gt;: Creating the file paththat will be written.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;4d&lt;/em&gt;: Write the csv!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;4e&lt;/em&gt;: Print a message about the file being printed.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;soc_fpath &amp;lt;- &amp;quot;https://raw.githubusercontent.com/kosukeimai/qss/master/CAUSALITY/social.csv&amp;quot;
write_csv_chunk(filepath = soc_fpath, n = 25000, &amp;quot;../../static/data/chunk_data/social_chunked&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_1.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_2.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_3.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_4.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_5.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_6.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_7.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_8.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_9.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_10.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_11.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_12.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_13.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have these files split up, it will be good to know how to get them back into one piece! Check out my blog post on reading multiple csvs in as one data frame &lt;a href=&#34;josiahparry.com/post/read-chunked-csv&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reading Multiple csvs as 1 data frame</title>
      <link>/post/read-chunked-csv/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/read-chunked-csv/</guid>
      <description>


&lt;p&gt;In an earlier &lt;a href=&#34;josiahparry.com/post/write-chunked-csv&#34;&gt;posting&lt;/a&gt; I wrote about having to break a single csv into multiple csvs. In other scenarios one data set maybe provided as multiple a csvs.&lt;/p&gt;
&lt;p&gt;Thankfully &lt;code&gt;purrr&lt;/code&gt; has a beautiful function called &lt;code&gt;map_df()&lt;/code&gt; which will make this into a two liner. This process has essentially 3 steps.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Create a vector of all &lt;code&gt;.csv&lt;/code&gt; files that should be merged together.&lt;/li&gt;
&lt;li&gt;Read each file using &lt;code&gt;readr::read_csv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Combine each dataframe into one.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;map_df()&lt;/code&gt; maps (applys) a function to each value of an object and produces a dataframe of all outputs.&lt;/p&gt;
&lt;p&gt;For this example I will use the csvs I created in a previous tutorial utilizing a dataset from the Quantitative Social Science book.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get all csv file names 
file_names &amp;lt;- list.files(&amp;quot;../../static/data/chunk_data&amp;quot;, pattern = &amp;quot;\\.csv&amp;quot;, full.names = TRUE)
file_names&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;../../static/data/chunk_data/social_chunked_1.csv&amp;quot; 
##  [2] &amp;quot;../../static/data/chunk_data/social_chunked_10.csv&amp;quot;
##  [3] &amp;quot;../../static/data/chunk_data/social_chunked_11.csv&amp;quot;
##  [4] &amp;quot;../../static/data/chunk_data/social_chunked_12.csv&amp;quot;
##  [5] &amp;quot;../../static/data/chunk_data/social_chunked_13.csv&amp;quot;
##  [6] &amp;quot;../../static/data/chunk_data/social_chunked_2.csv&amp;quot; 
##  [7] &amp;quot;../../static/data/chunk_data/social_chunked_3.csv&amp;quot; 
##  [8] &amp;quot;../../static/data/chunk_data/social_chunked_4.csv&amp;quot; 
##  [9] &amp;quot;../../static/data/chunk_data/social_chunked_5.csv&amp;quot; 
## [10] &amp;quot;../../static/data/chunk_data/social_chunked_6.csv&amp;quot; 
## [11] &amp;quot;../../static/data/chunk_data/social_chunked_7.csv&amp;quot; 
## [12] &amp;quot;../../static/data/chunk_data/social_chunked_8.csv&amp;quot; 
## [13] &amp;quot;../../static/data/chunk_data/social_chunked_9.csv&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ──────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.1.0     ✔ purrr   0.2.5
## ✔ tibble  1.4.2     ✔ dplyr   0.7.8
## ✔ tidyr   0.8.2     ✔ stringr 1.3.1
## ✔ readr   1.2.1     ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ─────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# apply 
all_csvs &amp;lt;- map_df(file_names, read_csv)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# preview the data
head(all_csvs)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##   sex    yearofbirth primary2004 messages   primary2006 hhsize
##   &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 male          1941           0 Civic Duty           0      2
## 2 female        1947           0 Civic Duty           0      2
## 3 male          1951           0 Hawthorne            1      3
## 4 female        1950           0 Hawthorne            1      3
## 5 female        1982           0 Hawthorne            1      3
## 6 male          1981           0 Control              0      3&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
