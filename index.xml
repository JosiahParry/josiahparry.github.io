<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Josiah Parry on Josiah Parry</title>
    <link>/</link>
    <description>Recent content in Josiah Parry on Josiah Parry</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 -0400</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Fallacy of one person, one vote</title>
      <link>/post/2019-03-17-the-fallacy-of-one-person-one-vote/</link>
      <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-03-17-the-fallacy-of-one-person-one-vote/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;/rmarkdown-libs/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;/rmarkdown-libs/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;/rmarkdown-libs/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;meta name=&#34;twitter:image&#34; content=&#34;static/img/us_house_ri.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;On October 6, 2018, the US Senate voted 50–48 in favor of the appointment of Associate Justice Brett Kavanaugh. This led many pundits to point out a &lt;a href=&#34;https://govtrackinsider.com/with-kavanaugh-vote-the-senate-reaches-a-historic-low-in-democratic-metric-dfb0f5fa7fa&#34;&gt;“disconnect”&lt;/a&gt; between the Senate and the body politic. The 50 senators who voted “yea” represent only 44% of the nation’s population. The year prior, Supreme Court Justice Neil Gorsuch was confirmed by 54 senators representing approximately 45% of the population. This trend of increasing control by a decreasing portion of the constituency has been attributed to increasing partisanship.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
In the age of minority rule, a Supreme Court justice appointed by a president who got fewer votes is confirmed by a party in the Senate that got fewer votes, to validate policies opposed by most Americans: &lt;a href=&#34;https://t.co/HoCoFnXnZV&#34;&gt;https://t.co/HoCoFnXnZV&lt;/a&gt;
&lt;/p&gt;
— Paul Waldman (&lt;span class=&#34;citation&#34;&gt;@paulwaldman1&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/paulwaldman1/status/1016784128753176577?ref_src=twsrc%5Etfw&#34;&gt;July 10, 2018&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
good morning! just sitting here drinking coffee and thinking about how the state of wyoming has two senators and a total population smaller than portland, oregon. hbu?
&lt;/p&gt;
— sarah jeong (&lt;span class=&#34;citation&#34;&gt;@sarahjeong&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/sarahjeong/status/1098590548590395392?ref_src=twsrc%5Etfw&#34;&gt;February 21, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Since the mid 90’s Dr. Frances E. Lee has been developing a body of literature on Senate apportionment, and her book &lt;a href=&#34;https://www.press.uchicago.edu/ucp/books/book/chicago/S/bo3636044.html&#34;&gt;&lt;em&gt;Sizing Up the Senate&lt;/em&gt;&lt;/a&gt; has become part of the current political milieu (&lt;a href=&#34;https://www.vox.com/2018/10/13/17971340/the-senate-represents-states-not-people-constitution-kavanaugh-supreme-court&#34;&gt;Vox&lt;/a&gt;, &lt;a href=&#34;https://www.cnn.com/2018/07/10/politics/small-states-supreme-court/index.html&#34;&gt;CNN&lt;/a&gt;, &lt;a href=&#34;http://archive.nytimes.com/www.nytimes.com/interactive/2013/03/11/us/politics/democracy-tested.html?_r=0#/%23smallstate&#34;&gt;New York Times&lt;/a&gt;). The book discusses, among many things, the relevant historical context surrounding the creation and organization of the Senate at the constitutional Convention. In her 1998 paper “The Consequences of Senate Apportionment for the Geographic Distribution of Federal Funds” &lt;a href=&#34;https://www.jstor.org/stable/2648000&#34;&gt;(Lee, 1998)&lt;/a&gt;, Dr. Lee describes the “representation index”, a measure to quantify the over- or underrepresentation of a state in the US senate. In the formulation described in the paper, “the index is simply the ratio of the state’s actual population to 1/50th of the nation’s population” (Lee, 1998). In the formulation described in the paper, “the index is simply the ratio of the state’s actual population to 1/50th of the nation’s population” (Lee, 1998). It is written mathematically as &lt;span class=&#34;math inline&#34;&gt;\(\frac{State \ Population}{1/50 \ * \ US \ Population}\)&lt;/span&gt;. This creates a number between &lt;span class=&#34;math inline&#34;&gt;\((0, \infty)\)&lt;/span&gt;. As it is put in &lt;em&gt;Sizing up the Senate&lt;/em&gt;,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;when the [index] is equal to one, the state is neither over- nor underrepresented by reference to a one person, one vote standard; when it is less than one, the state is overrepresented; when it is greater than one, the state is underrepresented. (Lee and Oppenheimer, 1999, p.161)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Many of Lee’s analyses utilize this index, and it has proved useful in temporal comparisons and modeling. However, it does not seem immediately capable of effectively evaluating other legislative bodies such as the House of Representatives. Here I will put forth an adaptation of this measure. That measure will then be adjusted to evaluate the House of Representatives. The House model will then be generalized to fit any representative body.&lt;/p&gt;
&lt;div id=&#34;interpretibility&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Interpretibility&lt;/h2&gt;
&lt;p&gt;The representation index has three main shortcomings, each of which are simple to address. First, the index produces a counter-intuitive number. An index of greater than 1 indicates an underrepresented state, and vice versa. Second, the interpretation of a middle value of 1 is useful for the “one person, one vote” standard. But the index is a divergent measure where 1 is the middle with the bounds (0,∞). Often, when one thinks of divergence, it is from an origin, or 0. Third, the index has a lower limit of 0 and no upper bound. This inhibits comparisons in both directions.&lt;/p&gt;
&lt;p&gt;To illustrate the point let’s take the populations of California and Wyoming based on 2010 Census figures.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Region&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Population&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;WY&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;563626&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;37253956&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;US&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;308745538&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If we calculate the representation index for these places, we get:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Region&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Population&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Representation Index&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;WY&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;563626&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;37253956&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this example, California has a representation index of 6. This means that it is vastly underrepresented, whereas Wyoming has an index value of nearly 0 meaning it is vastly overrepresented. To interpret this, we must remember that a larger value actually means less representation.&lt;/p&gt;
&lt;p&gt;But if we invert our formula, we obtain a more informative number.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Region&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Population&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;New Rep. Index&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;WY&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;563626&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;37253956&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this table it is clear that Wyoming is overrepresented and California is underrepresented. But still, in evaluating these numbers we are required to do the mental math to contextualize the divergence from a middle value. California has a value of 0.83 less than the one person, one vote standard. To handle this, we can center the score around 0 by simply subtracting 1.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Region&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Population&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Representation Index&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;New Rep. Index&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;WY&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;563626&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;37253956&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.83&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Thus the formula for the new representation index is &lt;span class=&#34;math inline&#34;&gt;\(\dfrac{\dfrac{1}{50} \ * \ US \ Population}{State \ Population} - 1\)&lt;/span&gt;. When the measures are compared, we see that the initial measure used by Dr. Lee emphasizes underrepresentation of California, whereas the measure I have suggested emphasises the overrepresentation of Wyoming. From here on I will refer to these as the underrepresentation index (URI) and the overrepresentation index (ORI), respectively.&lt;/p&gt;
&lt;p&gt;The URI and ORI are informative, but both are biased in scale. The bounds of the URI are &lt;span class=&#34;math inline&#34;&gt;\((0,\infty)\)&lt;/span&gt; and the ORI is &lt;span class=&#34;math inline&#34;&gt;\((-1, \infty)\)&lt;/span&gt;. A value is needed that can simultaneously demonstrate the over- and underrepresentation of a state.&lt;/p&gt;
&lt;p&gt;The ORI can be altered slightly to create this balanced measure. By taking the natural logarithm of the ratio 1/50th of the US population to a state’s population, a divergent scale naturally occurs. When the ratio is equal to 1 (or adhering to the one person, one vote standard), the value becomes 0. When the denominator is less than the numerator (or when the state has a smaller share of population than its share of votes), the value is positive and vice versa. Thus we arrive at the formula &lt;span class=&#34;math inline&#34;&gt;\(\ln\Bigg({\dfrac{\dfrac{1}{50} \ * \ US \ Population}{State \ Population}}\Bigg)\)&lt;/span&gt;. The following table compares these three measures.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Region&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Population&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;URI&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;ORI&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;New Rep. Index&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;WY&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;563626&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.96&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.393859&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;37253956&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.83&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.797264&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The new representation index can be generalized to the House of Representatives or any other representative body. In the following sections, the representation index is adapted to the House of Representatives, the California Assembly and Senate, and the New Hampshire House and Senate.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;representation-index-and-the-house-of-representatives&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Representation Index and the House of Representatives&lt;/h2&gt;
&lt;p&gt;Representation in the House of Representative is proportional, meaning that a state would have a number of legislative representatives proportional to its population. For example, a state were to have 50% of the nation’s population should represent 50% of the legislative body. This is the principle that the representation index evaluates.&lt;/p&gt;
&lt;p&gt;In the above adaptation of the representation index, the nation’s population is divided by 50. This would be the population of a single state if every state had the same number of citizens. Then, that number is scaled (divided) by the state’s actual population, and the logarithm of the result is the representation index. Thus if a state’s population is exactly equal to 1/50th of the nation’s population, its representation in the Senate is proportional.&lt;/p&gt;
&lt;p&gt;To adapt this measure to the House, we must think about how the relationship between proportional representation and population can be expressed numerically. As mentioned above, proportional representation would mean that a state comprising 50% of the national population would likewise comprise 50% of the House’s representatives. The ratio of these two proportions is 1, which creates a similar comparison to Lee’s ratio of 1/50th of national population to state population. This is the motivation for a formula of a representation index for the House of Representatives. The new formula, then, is &lt;span class=&#34;math inline&#34;&gt;\(\ln\Big(\frac{State \ share \ of \ reps}{State \ share \ of \ pop.}\Big)\)&lt;/span&gt;.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:672px;height:384px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,50,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1],&#34;y&#34;:[-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[37,26,27,13,31,20,22,33,34,38,24,19,23,16,17,14,28,10,39,12,36,21,11,18,29,30,32,35,15,25],&#34;y&#34;:[0.0367454089270444,-0.00261441552604539,-0.00260471597435235,-0.0286697571934874,0.00775434774756783,-0.0141294066018003,-0.00905406966937684,0.0171308924692928,0.0234257162364562,0.0406617564953452,-0.00624310434177001,-0.0168619146408852,-0.00689749550379842,-0.0207484409878478,-0.0186253726334433,-0.0266578473214952,0.00339703937755532,-0.0461365015669134,0.0480591095801477,-0.033702936101385,0.0315255037199173,-0.0130862249214013,-0.0348499610633781,-0.0177069719445167,0.00380303386403798,0.00460391318077289,0.0140581332068645,0.0248776371719525,-0.0264536859658312,-0.00351829016258368],&#34;text&#34;:[&#34;State: Alabama&lt;br /&gt;&lt;br /&gt;% Pop: 1.55%&lt;br /&gt;&lt;br /&gt;# Reps: 7&lt;br /&gt;&lt;br /&gt;RI: 0.04&#34;,&#34;State: Alaska&lt;br /&gt;&lt;br /&gt;% Pop: 0.23%&lt;br /&gt;&lt;br /&gt;# Reps: 1&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;State: Arizona&lt;br /&gt;&lt;br /&gt;% Pop: 2.07%&lt;br /&gt;&lt;br /&gt;# Reps: 9&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;State: Arkansas&lt;br /&gt;&lt;br /&gt;% Pop: 0.95%&lt;br /&gt;&lt;br /&gt;# Reps: 4&lt;br /&gt;&lt;br /&gt;RI: -0.03&#34;,&#34;State: California&lt;br /&gt;&lt;br /&gt;% Pop: 12.09%&lt;br /&gt;&lt;br /&gt;# Reps: 53&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;State: Colorado&lt;br /&gt;&lt;br /&gt;% Pop: 1.63%&lt;br /&gt;&lt;br /&gt;# Reps: 7&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;State: Connecticut&lt;br /&gt;&lt;br /&gt;% Pop: 1.16%&lt;br /&gt;&lt;br /&gt;# Reps: 5&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;State: Florida&lt;br /&gt;&lt;br /&gt;% Pop: 6.1%&lt;br /&gt;&lt;br /&gt;# Reps: 27&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;,&#34;State: Georgia&lt;br /&gt;&lt;br /&gt;% Pop: 3.14%&lt;br /&gt;&lt;br /&gt;# Reps: 14&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;,&#34;State: Hawaii&lt;br /&gt;&lt;br /&gt;% Pop: 0.44%&lt;br /&gt;&lt;br /&gt;# Reps: 2&lt;br /&gt;&lt;br /&gt;RI: 0.04&#34;,&#34;State: Illinois&lt;br /&gt;&lt;br /&gt;% Pop: 4.16%&lt;br /&gt;&lt;br /&gt;# Reps: 18&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;State: Indiana&lt;br /&gt;&lt;br /&gt;% Pop: 2.1%&lt;br /&gt;&lt;br /&gt;# Reps: 9&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;State: Kansas&lt;br /&gt;&lt;br /&gt;% Pop: 0.93%&lt;br /&gt;&lt;br /&gt;# Reps: 4&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;State: Kentucky&lt;br /&gt;&lt;br /&gt;% Pop: 1.41%&lt;br /&gt;&lt;br /&gt;# Reps: 6&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;State: Maryland&lt;br /&gt;&lt;br /&gt;% Pop: 1.87%&lt;br /&gt;&lt;br /&gt;# Reps: 8&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;State: Massachusetts&lt;br /&gt;&lt;br /&gt;% Pop: 2.12%&lt;br /&gt;&lt;br /&gt;# Reps: 9&lt;br /&gt;&lt;br /&gt;RI: -0.03&#34;,&#34;State: Michigan&lt;br /&gt;&lt;br /&gt;% Pop: 3.21%&lt;br /&gt;&lt;br /&gt;# Reps: 14&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;State: Mississippi&lt;br /&gt;&lt;br /&gt;% Pop: 0.96%&lt;br /&gt;&lt;br /&gt;# Reps: 4&lt;br /&gt;&lt;br /&gt;RI: -0.05&#34;,&#34;State: Nevada&lt;br /&gt;&lt;br /&gt;% Pop: 0.88%&lt;br /&gt;&lt;br /&gt;# Reps: 4&lt;br /&gt;&lt;br /&gt;RI: 0.05&#34;,&#34;State: New Jersey&lt;br /&gt;&lt;br /&gt;% Pop: 2.85%&lt;br /&gt;&lt;br /&gt;# Reps: 12&lt;br /&gt;&lt;br /&gt;RI: -0.03&#34;,&#34;State: New Mexico&lt;br /&gt;&lt;br /&gt;% Pop: 0.67%&lt;br /&gt;&lt;br /&gt;# Reps: 3&lt;br /&gt;&lt;br /&gt;RI: 0.03&#34;,&#34;State: New York&lt;br /&gt;&lt;br /&gt;% Pop: 6.29%&lt;br /&gt;&lt;br /&gt;# Reps: 27&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;State: North Carolina&lt;br /&gt;&lt;br /&gt;% Pop: 3.09%&lt;br /&gt;&lt;br /&gt;# Reps: 13&lt;br /&gt;&lt;br /&gt;RI: -0.03&#34;,&#34;State: Ohio&lt;br /&gt;&lt;br /&gt;% Pop: 3.74%&lt;br /&gt;&lt;br /&gt;# Reps: 16&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;State: Pennsylvania&lt;br /&gt;&lt;br /&gt;% Pop: 4.12%&lt;br /&gt;&lt;br /&gt;# Reps: 18&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;State: Tennessee&lt;br /&gt;&lt;br /&gt;% Pop: 2.06%&lt;br /&gt;&lt;br /&gt;# Reps: 9&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;State: Texas&lt;br /&gt;&lt;br /&gt;% Pop: 8.16%&lt;br /&gt;&lt;br /&gt;# Reps: 36&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;State: Utah&lt;br /&gt;&lt;br /&gt;% Pop: 0.9%&lt;br /&gt;&lt;br /&gt;# Reps: 4&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;,&#34;State: Virginia&lt;br /&gt;&lt;br /&gt;% Pop: 2.6%&lt;br /&gt;&lt;br /&gt;# Reps: 11&lt;br /&gt;&lt;br /&gt;RI: -0.03&#34;,&#34;State: Wisconsin&lt;br /&gt;&lt;br /&gt;% Pop: 1.85%&lt;br /&gt;&lt;br /&gt;# Reps: 8&lt;br /&gt;&lt;br /&gt;RI: 0&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;One person, one vote&#34;,&#34;legendgroup&#34;:&#34;One person, one vote&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[42,43,48,45,40,50,44,46,41,47,49],&#34;y&#34;:[0.0644219038217166,0.0662150038920755,0.151518351666763,0.0734138432843397,0.0518384353997281,0.297135812778716,0.0695756532094504,0.124039306238731,0.0520421460569533,0.137030154086907,0.228584942737477],&#34;text&#34;:[&#34;State: Maine&lt;br /&gt;&lt;br /&gt;% Pop: 0.43%&lt;br /&gt;&lt;br /&gt;# Reps: 2&lt;br /&gt;&lt;br /&gt;RI: 0.06&#34;,&#34;State: Minnesota&lt;br /&gt;&lt;br /&gt;% Pop: 1.72%&lt;br /&gt;&lt;br /&gt;# Reps: 8&lt;br /&gt;&lt;br /&gt;RI: 0.07&#34;,&#34;State: Nebraska&lt;br /&gt;&lt;br /&gt;% Pop: 0.59%&lt;br /&gt;&lt;br /&gt;# Reps: 3&lt;br /&gt;&lt;br /&gt;RI: 0.15&#34;,&#34;State: New Hampshire&lt;br /&gt;&lt;br /&gt;% Pop: 0.43%&lt;br /&gt;&lt;br /&gt;# Reps: 2&lt;br /&gt;&lt;br /&gt;RI: 0.07&#34;,&#34;State: North Dakota&lt;br /&gt;&lt;br /&gt;% Pop: 0.22%&lt;br /&gt;&lt;br /&gt;# Reps: 1&lt;br /&gt;&lt;br /&gt;RI: 0.05&#34;,&#34;State: Rhode Island&lt;br /&gt;&lt;br /&gt;% Pop: 0.34%&lt;br /&gt;&lt;br /&gt;# Reps: 2&lt;br /&gt;&lt;br /&gt;RI: 0.3&#34;,&#34;State: South Carolina&lt;br /&gt;&lt;br /&gt;% Pop: 1.5%&lt;br /&gt;&lt;br /&gt;# Reps: 7&lt;br /&gt;&lt;br /&gt;RI: 0.07&#34;,&#34;State: Vermont&lt;br /&gt;&lt;br /&gt;% Pop: 0.2%&lt;br /&gt;&lt;br /&gt;# Reps: 1&lt;br /&gt;&lt;br /&gt;RI: 0.12&#34;,&#34;State: Washington&lt;br /&gt;&lt;br /&gt;% Pop: 2.18%&lt;br /&gt;&lt;br /&gt;# Reps: 10&lt;br /&gt;&lt;br /&gt;RI: 0.05&#34;,&#34;State: West Virginia&lt;br /&gt;&lt;br /&gt;% Pop: 0.6%&lt;br /&gt;&lt;br /&gt;# Reps: 3&lt;br /&gt;&lt;br /&gt;RI: 0.14&#34;,&#34;State: Wyoming&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;# Reps: 1&lt;br /&gt;&lt;br /&gt;RI: 0.23&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Overrepresented&#34;,&#34;legendgroup&#34;:&#34;Overrepresented&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[2,4,6,7,9,1,8,5,3],&#34;y&#34;:[-0.237120715235475,-0.101166549472085,-0.0724308581279716,-0.0644859894968979,-0.0552501477906787,-0.334138005675672,-0.0574575546100993,-0.0784866944789803,-0.139205618071517],&#34;text&#34;:[&#34;State: Delaware&lt;br /&gt;&lt;br /&gt;% Pop: 0.29%&lt;br /&gt;&lt;br /&gt;# Reps: 1&lt;br /&gt;&lt;br /&gt;RI: -0.24&#34;,&#34;State: Idaho&lt;br /&gt;&lt;br /&gt;% Pop: 0.51%&lt;br /&gt;&lt;br /&gt;# Reps: 2&lt;br /&gt;&lt;br /&gt;RI: -0.1&#34;,&#34;State: Iowa&lt;br /&gt;&lt;br /&gt;% Pop: 0.99%&lt;br /&gt;&lt;br /&gt;# Reps: 4&lt;br /&gt;&lt;br /&gt;RI: -0.07&#34;,&#34;State: Louisiana&lt;br /&gt;&lt;br /&gt;% Pop: 1.47%&lt;br /&gt;&lt;br /&gt;# Reps: 6&lt;br /&gt;&lt;br /&gt;RI: -0.06&#34;,&#34;State: Missouri&lt;br /&gt;&lt;br /&gt;% Pop: 1.94%&lt;br /&gt;&lt;br /&gt;# Reps: 8&lt;br /&gt;&lt;br /&gt;RI: -0.06&#34;,&#34;State: Montana&lt;br /&gt;&lt;br /&gt;% Pop: 0.32%&lt;br /&gt;&lt;br /&gt;# Reps: 1&lt;br /&gt;&lt;br /&gt;RI: -0.33&#34;,&#34;State: Oklahoma&lt;br /&gt;&lt;br /&gt;% Pop: 1.22%&lt;br /&gt;&lt;br /&gt;# Reps: 5&lt;br /&gt;&lt;br /&gt;RI: -0.06&#34;,&#34;State: Oregon&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;# Reps: 5&lt;br /&gt;&lt;br /&gt;RI: -0.08&#34;,&#34;State: South Dakota&lt;br /&gt;&lt;br /&gt;% Pop: 0.26%&lt;br /&gt;&lt;br /&gt;# Reps: 1&lt;br /&gt;&lt;br /&gt;RI: -0.14&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Underrepresented&#34;,&#34;legendgroup&#34;:&#34;Underrepresented&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:46.3196347031963,&#34;r&#34;:7.30593607305936,&#34;b&#34;:16.4383561643836,&#34;l&#34;:48.9497716894977},&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;title&#34;:&#34;US House of Representatives&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:17.5342465753425},&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-1.45,52.45],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;tickvals&#34;:[0,10,20,30,40,50],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.365701696598392,0.328699503701436],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;-0.2&#34;,&#34;0.0&#34;,&#34;0.2&#34;],&#34;tickvals&#34;:[-0.2,0,0.2],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;-0.2&#34;,&#34;0.0&#34;,&#34;0.2&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:&#34;Representation Index&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1}],&#34;showlegend&#34;:true,&#34;legend&#34;:{&#34;bgcolor&#34;:null,&#34;bordercolor&#34;:null,&#34;borderwidth&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;y&#34;:1,&#34;orientation&#34;:&#34;h&#34;},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;modeBarButtonsToAdd&#34;:[{&#34;name&#34;:&#34;Collaborate&#34;,&#34;icon&#34;:{&#34;width&#34;:1000,&#34;ascent&#34;:500,&#34;descent&#34;:-50,&#34;path&#34;:&#34;M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z&#34;},&#34;click&#34;:&#34;function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == &#39;?viewer_pane=1&#39;) {\n          alert(&#39;To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;);\n        } else {\n          window.open(&#39;https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;, &#39;_blank&#39;);\n        }\n      }&#34;}],&#34;cloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;24867c0b4fe7&#34;:{&#34;x&#34;:{},&#34;ymin&#34;:{},&#34;ymax&#34;:{},&#34;type&#34;:&#34;scatter&#34;},&#34;24864aab0650&#34;:{&#34;yintercept&#34;:{}},&#34;2486222b947c&#34;:{&#34;yintercept&#34;:{}},&#34;24865b216a6a&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;colour&#34;:{},&#34;label&#34;:{}}},&#34;cur_data&#34;:&#34;24867c0b4fe7&#34;,&#34;visdat&#34;:{&#34;24867c0b4fe7&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;24864aab0650&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;2486222b947c&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;24865b216a6a&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[&#34;config.modeBarButtonsToAdd.0.click&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;In this case, if the share of the population is smaller than the share of representatives, the index is inflated, meaning the state is overrepresented. If the share of population is greater than the share of representatives, the index is deflated, meaning the state is underrepresented. This index ranges from &lt;span class=&#34;math inline&#34;&gt;\((-\infty, \infty)\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;generalizing-the-representation-index&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Generalizing the Representation Index&lt;/h2&gt;
&lt;p&gt;The representation index for the House of Representatives is written in such a way that it can be adapted for any representative body. The formula evaluates equality of the share of representatives and the share of the total constituency. In general, the formula can be written as &lt;span class=&#34;math inline&#34;&gt;\(\ln\Big(\frac{\%\ share \ of \ reps}{\% \ share \ of \ constituency}\Big)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;To illustrate, let’s use this formula to calculate the representation index of the Assembly and Senate of California. In 2011, after the most recent US Census, California redrew the districts for the Assembly and the Senate. The data used in this demonstration are from the &lt;a href=&#34;http://spreadsheets.latimes.com/stateAssembly-2011-0729/&#34;&gt;LA Times&lt;/a&gt;. The California assembly has 80 members and the senate has 40 members each representing one district.&lt;/p&gt;
&lt;p&gt;For this example, I consider a difference of 5% in either direction as adhering to the one person, one vote principle. To illustrate this, if the ratio is &lt;span class=&#34;math inline&#34;&gt;\(\frac{1%}{0.95}\)&lt;/span&gt; the index score is 0.05. Alternatively, if the ratio is &lt;span class=&#34;math inline&#34;&gt;\(\frac{1}{1.05}\)&lt;/span&gt;, the index score is -0.05.&lt;/p&gt;
&lt;p&gt;&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:672px;height:384px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,80,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1],&#34;y&#34;:[-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-2.95,83.95],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-2.95,83.95],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],&#34;y&#34;:[-0.00180124571805692,0.00488754102458868,-0.00707973561743144,-0.00152468844696496,0.00565390481719283,-0.00698591118420078,0.00293435224436477,0.00409157645799164,-0.00607493017392915,-0.000333975863337648,-0.00281249379566416,0.00842851557306099,0.00841552206331884,-0.00251693805234241,-0.00742297273048902,-0.00058081657184328,-0.00391470292674458,-0.00853288977109179,-0.00448352385758394,0.00930380052984447,0.00943602648902758,0.00633440988621225,-0.00537673211567997,0.00231211689230227,0.00964198698653246,-0.0095990389988916,0.00338027448679367,-0.00089196368792765,-0.000419840412064945,0.000522926818971367,-0.00554759014375334,-0.00252122209279231,-0.00772986763844217,-0.00237126975593257,-0.00355742062178917,0.00567766068462329,-0.00112794176451427,-0.0089969427069974,-0.00160401889800032,0.00690509485334389,0.00682509286406262,0.0058634078314548,-0.00584865636885262,0.00733548563967614,-0.00448138603882179,0.00265225295000313,-0.00979256893230247,0.00933848105716548,0.00674293532044042,-0.00934803231186174,6.75387323880951e-05,-7.6233224059172e-06,0.00378328348236586,-0.00165332924986096,0.00858011899612357,0.000800127693606861,-0.000366175933107304,-0.00553264123166014,0.00108815417683866,-0.00985636180113196,-0.00993716026005157,-0.00222772288388305,0.0097569097011333,-0.00155685019914014,0.00898306265662102,-0.00443649078905234,0.00625877533934064,0.00564526645986284,0.000767891085496818,-0.00607919899891375,0.00665862275425107,-0.00910334651380039,0.00986967689987724,-0.00977343027806834,0.000271578505817245,-0.00632035801457436,0.00346000134692278,0.00817084248948629,-0.00159115492805028,0.00230565973179542],&#34;text&#34;:[&#34;District: 01&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 02&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 03&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 04&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 05&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 06&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 07&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 08&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 09&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 10&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 11&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 12&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 13&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 14&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 15&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 16&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 17&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 18&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 19&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 20&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 21&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 22&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 23&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 24&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 25&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 26&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 27&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 28&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 29&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 30&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 31&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 32&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 33&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 34&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 35&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 36&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 37&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 38&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 39&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 40&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 41&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 42&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 43&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 44&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 45&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 46&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 47&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 48&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 49&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 50&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 51&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 52&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 53&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 54&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 55&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 56&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 57&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 58&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 59&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 60&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 61&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 62&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 63&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 64&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 65&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 66&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 67&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 68&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 69&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 70&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 71&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 72&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 73&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 74&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 75&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 76&lt;br /&gt;&lt;br /&gt;% Pop: 1.26%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 77&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 78&lt;br /&gt;&lt;br /&gt;% Pop: 1.24%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 79&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 80&lt;br /&gt;&lt;br /&gt;% Pop: 1.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;One person, one vote&#34;,&#34;legendgroup&#34;:&#34;One person, one vote&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:46.3196347031963,&#34;r&#34;:7.30593607305936,&#34;b&#34;:16.4383561643836,&#34;l&#34;:60.6392694063927},&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;title&#34;:&#34;California Assembly&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:17.5342465753425},&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-2.95,83.95],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;20&#34;,&#34;40&#34;,&#34;60&#34;,&#34;80&#34;],&#34;tickvals&#34;:[0,20,40,60,80],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;20&#34;,&#34;40&#34;,&#34;60&#34;,&#34;80&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.055,0.055],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;-0.050&#34;,&#34;-0.025&#34;,&#34;0.000&#34;,&#34;0.025&#34;,&#34;0.050&#34;],&#34;tickvals&#34;:[-0.05,-0.025,0,0.025,0.05],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;-0.050&#34;,&#34;-0.025&#34;,&#34;0.000&#34;,&#34;0.025&#34;,&#34;0.050&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:&#34;Representation Index&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1}],&#34;showlegend&#34;:true,&#34;legend&#34;:{&#34;bgcolor&#34;:null,&#34;bordercolor&#34;:null,&#34;borderwidth&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;y&#34;:1,&#34;orientation&#34;:&#34;h&#34;},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;modeBarButtonsToAdd&#34;:[{&#34;name&#34;:&#34;Collaborate&#34;,&#34;icon&#34;:{&#34;width&#34;:1000,&#34;ascent&#34;:500,&#34;descent&#34;:-50,&#34;path&#34;:&#34;M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z&#34;},&#34;click&#34;:&#34;function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == &#39;?viewer_pane=1&#39;) {\n          alert(&#39;To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;);\n        } else {\n          window.open(&#39;https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;, &#39;_blank&#39;);\n        }\n      }&#34;}],&#34;cloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;2486515000f&#34;:{&#34;x&#34;:{},&#34;ymin&#34;:{},&#34;ymax&#34;:{},&#34;type&#34;:&#34;scatter&#34;},&#34;248625b6db64&#34;:{&#34;yintercept&#34;:{}},&#34;24867fd9594&#34;:{&#34;yintercept&#34;:{}},&#34;248619672ba5&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;colour&#34;:{},&#34;label&#34;:{}}},&#34;cur_data&#34;:&#34;2486515000f&#34;,&#34;visdat&#34;:{&#34;2486515000f&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;248625b6db64&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;24867fd9594&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;248619672ba5&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[&#34;config.modeBarButtonsToAdd.0.click&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt; &lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:672px;height:384px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,40,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1],&#34;y&#34;:[-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-0.95,41.95],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-0.95,41.95],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],&#34;y&#34;:[-0.00427185762664409,0.00351926191511959,0.00342229190463547,-0.00707547106143568,-0.00835508767074867,-0.00530304058093501,0.00715595339639287,0.00175910462909477,-0.00988506726447462,0.00823904360920187,0.000532595323549103,-0.00200914926870539,0.00416273449030803,-0.00431462209280041,0.00297312019877842,0.00995534509832195,8.48235661770138e-06,0.00282128762781589,0.0026867035596748,-0.00491206422468258,0.00114619940698815,0.00220450299364808,-0.00263581336352611,-0.00231770990010286,0.0047505209520126,0.00386412034876342,-0.00461392216045318,0.00137196289167112,0.00630631638672219,0.00955092553516658,-0.00989676184664069,-0.00220629621024482,0.00471060524965552,0.00371754098278003,-0.00350071438735146,-0.00720446583519414,-0.00710105812461796,0.00170747707029238,0.00355481994178211,-0.00397138569097489],&#34;text&#34;:[&#34;District: 01&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 02&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 03&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 04&lt;br /&gt;&lt;br /&gt;% Pop: 2.52%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 05&lt;br /&gt;&lt;br /&gt;% Pop: 2.52%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 06&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 07&lt;br /&gt;&lt;br /&gt;% Pop: 2.48%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 08&lt;br /&gt;&lt;br /&gt;% Pop: 2.5%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 09&lt;br /&gt;&lt;br /&gt;% Pop: 2.52%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 10&lt;br /&gt;&lt;br /&gt;% Pop: 2.48%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 11&lt;br /&gt;&lt;br /&gt;% Pop: 2.5%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 12&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 13&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 14&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 15&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 16&lt;br /&gt;&lt;br /&gt;% Pop: 2.48%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 17&lt;br /&gt;&lt;br /&gt;% Pop: 2.5%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 18&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 19&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 20&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 21&lt;br /&gt;&lt;br /&gt;% Pop: 2.5%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 22&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 23&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 24&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 25&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 26&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 27&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 28&lt;br /&gt;&lt;br /&gt;% Pop: 2.5%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 29&lt;br /&gt;&lt;br /&gt;% Pop: 2.48%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 30&lt;br /&gt;&lt;br /&gt;% Pop: 2.48%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;District: 31&lt;br /&gt;&lt;br /&gt;% Pop: 2.52%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 32&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 33&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 34&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 35&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 36&lt;br /&gt;&lt;br /&gt;% Pop: 2.52%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 37&lt;br /&gt;&lt;br /&gt;% Pop: 2.52%&lt;br /&gt;&lt;br /&gt;RI: -0.01&#34;,&#34;District: 38&lt;br /&gt;&lt;br /&gt;% Pop: 2.5%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 39&lt;br /&gt;&lt;br /&gt;% Pop: 2.49%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;District: 40&lt;br /&gt;&lt;br /&gt;% Pop: 2.51%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;One person, one vote&#34;,&#34;legendgroup&#34;:&#34;One person, one vote&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:46.3196347031963,&#34;r&#34;:7.30593607305936,&#34;b&#34;:16.4383561643836,&#34;l&#34;:60.6392694063927},&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;title&#34;:&#34;California Senate&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:17.5342465753425},&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.95,41.95],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;],&#34;tickvals&#34;:[-1.11022302462516e-16,10,20,30,40],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.055,0.055],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;-0.050&#34;,&#34;-0.025&#34;,&#34;0.000&#34;,&#34;0.025&#34;,&#34;0.050&#34;],&#34;tickvals&#34;:[-0.05,-0.025,0,0.025,0.05],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;-0.050&#34;,&#34;-0.025&#34;,&#34;0.000&#34;,&#34;0.025&#34;,&#34;0.050&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:&#34;Representation Index&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1}],&#34;showlegend&#34;:true,&#34;legend&#34;:{&#34;bgcolor&#34;:null,&#34;bordercolor&#34;:null,&#34;borderwidth&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;y&#34;:1,&#34;orientation&#34;:&#34;h&#34;},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;modeBarButtonsToAdd&#34;:[{&#34;name&#34;:&#34;Collaborate&#34;,&#34;icon&#34;:{&#34;width&#34;:1000,&#34;ascent&#34;:500,&#34;descent&#34;:-50,&#34;path&#34;:&#34;M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z&#34;},&#34;click&#34;:&#34;function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == &#39;?viewer_pane=1&#39;) {\n          alert(&#39;To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;);\n        } else {\n          window.open(&#39;https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;, &#39;_blank&#39;);\n        }\n      }&#34;}],&#34;cloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;248662ad49a4&#34;:{&#34;x&#34;:{},&#34;ymin&#34;:{},&#34;ymax&#34;:{},&#34;type&#34;:&#34;scatter&#34;},&#34;24865ebde098&#34;:{&#34;yintercept&#34;:{}},&#34;24863e44bc0&#34;:{&#34;yintercept&#34;:{}},&#34;24861292c3f&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;colour&#34;:{},&#34;label&#34;:{}}},&#34;cur_data&#34;:&#34;248662ad49a4&#34;,&#34;visdat&#34;:{&#34;248662ad49a4&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;24865ebde098&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;24863e44bc0&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;24861292c3f&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[&#34;config.modeBarButtonsToAdd.0.click&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;The above example demonstrates the use of the representation index for both houses of the California legislature. This is good news as it demonstrates that the state upholds the &lt;a href=&#34;https://www.law.cornell.edu/constitution/amendmentxiv&#34;&gt;Equal Protection Clause&lt;/a&gt; of the Fourteenth Amendment and adheres to the Supreme Court decision &lt;a href=&#34;https://www.law.cornell.edu/supremecourt/text/377/533&#34;&gt;Reynolds v. Sims&lt;/a&gt;, in which the court held that state districts must be proportionally drawn (unlike US Senate districts).&lt;/p&gt;
&lt;p&gt;As Wikipedia &lt;a href=&#34;https://en.wikipedia.org/wiki/California_State_Assembly_districts&#34;&gt;states&lt;/a&gt; “[given California]’s large population and relatively small legislature, the Assembly has the largest population per representative ratio of any lower house legislature in the United States; only the federal U.S. House of Representatives has a larger ratio.” California’s representative body differs greatly from that of, for example, New Hampshire.&lt;/p&gt;
&lt;p&gt;New Hampshire has arguably the most unique lower house legislature of any state: there are 400 representatives from 204 districts. House districts also includes what are called &lt;a href=&#34;https://www.nhmagazine.com/2012/11/01/new-hampshire-districts/&#34;&gt;floterial districts&lt;/a&gt;, areas that represent multiple municipalities. The legality of such districts has been disputed in the state Supreme Court, but nonetheless they persist, and as a result, New Hampshire has one of the smallest constituent-to-representative ratios in the nation. This results in overrepresentation for almost every municipality.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:672px;height:384px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,234,234,233,232,231,230,229,228,227,226,225,224,223,222,221,220,219,218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1],&#34;ytext&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-10.65,245.65],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-10.65,245.65],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[17,21,31,42,55,61,68,72,112,115,119,133,138,146,170,179,182,187],&#34;y&#34;:[0.0254626239550565,-0.0208748027267547,-0.0034113941416318,0.0144883535674268,0.0158646497336756,0.0206890541451756,-0.0338230945596551,-0.0197557173405318,0.0130104596744076,0.0150477180230631,-0.0182210219686053,0.0042022713034326,0.0505341830364281,0.0277840726484736,0.023979332521771,-0.0232062589994743,-0.000504031184485847,0.0438063726884172],&#34;text&#34;:[&#34;Municipality: Bedford&lt;br /&gt;&lt;br /&gt;% Pop: 1.71%&lt;br /&gt;&lt;br /&gt;RI: 0.03&#34;,&#34;Municipality: Berlin&lt;br /&gt;&lt;br /&gt;% Pop: 0.77%&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;Municipality: Campton&lt;br /&gt;&lt;br /&gt;% Pop: 0.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;Municipality: Claremont&lt;br /&gt;&lt;br /&gt;% Pop: 0.99%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;Municipality: Derry&lt;br /&gt;&lt;br /&gt;% Pop: 2.46%&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;,&#34;Municipality: Durham&lt;br /&gt;&lt;br /&gt;% Pop: 1.22%&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;,&#34;Municipality: Epping&lt;br /&gt;&lt;br /&gt;% Pop: 0.52%&lt;br /&gt;&lt;br /&gt;RI: -0.03&#34;,&#34;Municipality: Farmington&lt;br /&gt;&lt;br /&gt;% Pop: 0.51%&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;Municipality: Keene&lt;br /&gt;&lt;br /&gt;% Pop: 1.73%&lt;br /&gt;&lt;br /&gt;RI: 0.01&#34;,&#34;Municipality: Laconia&lt;br /&gt;&lt;br /&gt;% Pop: 1.23%&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;,&#34;Municipality: Lebanon&lt;br /&gt;&lt;br /&gt;% Pop: 1.02%&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;Municipality: Manchester&lt;br /&gt;&lt;br /&gt;% Pop: 8.22%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;Municipality: Merrimack&lt;br /&gt;&lt;br /&gt;% Pop: 1.9%&lt;br /&gt;&lt;br /&gt;RI: 0.05&#34;,&#34;Municipality: Nashua&lt;br /&gt;&lt;br /&gt;% Pop: 6.57%&lt;br /&gt;&lt;br /&gt;RI: 0.03&#34;,&#34;Municipality: Peterborough&lt;br /&gt;&lt;br /&gt;% Pop: 0.49%&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;,&#34;Municipality: Raymond&lt;br /&gt;&lt;br /&gt;% Pop: 0.77%&lt;br /&gt;&lt;br /&gt;RI: -0.02&#34;,&#34;Municipality: Rochester&lt;br /&gt;&lt;br /&gt;% Pop: 2.25%&lt;br /&gt;&lt;br /&gt;RI: 0&#34;,&#34;Municipality: Salem&lt;br /&gt;&lt;br /&gt;% Pop: 2.15%&lt;br /&gt;&lt;br /&gt;RI: 0.04&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;One person, one vote&#34;,&#34;legendgroup&#34;:&#34;One person, one vote&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,62,63,64,65,66,67,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,110,111,113,114,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,134,135,136,137,139,140,141,142,143,144,145,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,172,173,174,175,176,177,178,180,181,183,184,185,186,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,232,233,234],&#34;y&#34;:[2.01164009347833,2.61333144528822,1.81299615185143,0.437794740040622,0.543078329662793,0.641813170348482,0.163500992506756,1.04116492765135,1.63212116731475,1.57427163432798,0.89872815818628,1.11705312676682,0.367187663199129,0.120999854200485,0.867317997848372,1.80692817206767,0.320687198097477,1.93245435732009,2.88222101839064,1.36990343372891,0.515014296010478,0.256679131023901,1.39242957886184,0.378868522811885,2.21876562763809,1.18523995548987,2.93547592192618,0.241076203436264,0.532366674067865,1.23060033558418,1.44410158940616,2.13598694014568,1.12748609409938,0.270119498763906,3.67895723496003,1.19110507494227,1.30549314472832,1.3601814049862,3.19868205539246,1.07158063701735,2.17717680391885,0.163775859972659,0.280122524213841,1.80995755941928,2.17062799203994,1.91916852060844,1.73346858222286,0.404655075573231,1.08361447658107,1.9433155967517,2.92848777329225,0.0854263094683168,1.84452890348437,3.10469989703166,1.27171984163521,1.02692086612543,3.22082318126967,3.49614415689788,2.20448452807268,4.35746286552702,0.36482486540779,0.752850144011114,3.13505635951225,0.105121209822339,1.43530203545431,2.14676358960744,1.78449564774075,0.658748214979481,1.86227334878344,0.350552602694597,0.623954718084907,0.987497519806808,1.40813987176816,0.121336158222488,0.18128828505729,2.10372607792746,1.99909843148529,1.20260889942375,1.7167457844934,0.509296443266374,1.8682052299047,2.41654856366508,0.66105369150498,0.103401746400219,1.76603358490102,1.80511493494349,0.165168903177407,2.35661159844041,5.05061004608697,0.362681701278423,2.77952362015229,0.329415475906989,1.81512867360399,0.808948733459572,1.200709877262,1.56046517840832,0.254499223768404,0.579635925396591,0.385815614128905,2.07721850180758,0.624789094437027,1.7960977412933,1.15216720721585,1.00617255060759,0.644458174724461,2.77872393998173,2.26933820127373,0.429520732829095,1.74193603332196,0.662208426044376,1.42719977860356,0.462089324308042,0.532704969064326,0.592843327802859,2.51286091492459,2.056623481443,2.05895584401636,2.22867760306246,1.35362400444004,1.14558823611781,1.50931373805321,1.56901223898678,0.746230734498438,1.31849291291839,1.61138526883557,0.0881883382271057,0.382792661268019,2.12844921601426,1.39282933901108,0.901219549524053,1.52973650368707,0.573625654519899,1.94071886716999,0.943555896259918,0.399088991961005,0.251557480903847,0.451036889635595,1.13394666110232,2.06422363495122,2.13977721631946,0.36086361618322,0.442189334831429,0.305880162643004,0.391127870745137,0.734673523242077,1.09090490984375,0.459491613554528,0.980788537187813,3.00366767180009,1.68733189928711,1.11038386447215,1.00611328959244,0.350834650362522,2.14740114143012,2.03416356814541,0.905140162240283,1.43072346345998,0.77847614590047,0.389660519051187,0.0704225428425288,3.08496241419333,2.15765764159731,0.485293331541002,1.66228586736102,3.79674027061641,1.50326736424134,0.207705598374997,1.56401758001268,0.811125377265783,0.984888290178775,2.01909169278675,0.41565529874135,2.94534210484723,2.19976912694744,0.692879507941958,2.10984979577799,2.0198399157921,2.46968874305938,1.88621496467006,0.974255800899447,0.496733154486428,2.18774493398064,0.307364543186796,2.45744012098318,1.57907702560292,0.662786293728761,1.50662194638749,0.59194541986788,0.313867749956431,1.24757168661004,1.56972780252357,0.966002659142726,0.609053780124894,1.14652544330918,1.43655438377078,1.83390712289631,0.970513797517711,1.24938868905673,0.844183422446715,1.98309809013885,1.78272259763087,2.60927464459261,0.41565529874135,1.27278310595654,1.9961701717062,2.04159429682046,1.038636481298,0.894638172934755,1.2918466447438,0.437102618661049,4.11588561252398,0.0703540457821676,0.891726962727297],&#34;text&#34;:[&#34;Municipality: Acworth&lt;br /&gt;&lt;br /&gt;% Pop: 0.07%&lt;br /&gt;&lt;br /&gt;RI: 2.01&#34;,&#34;Municipality: Albany&lt;br /&gt;&lt;br /&gt;% Pop: 0.05%&lt;br /&gt;&lt;br /&gt;RI: 2.61&#34;,&#34;Municipality: Alexandria&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.81&#34;,&#34;Municipality: Allenstown&lt;br /&gt;&lt;br /&gt;% Pop: 0.32%&lt;br /&gt;&lt;br /&gt;RI: 0.44&#34;,&#34;Municipality: Alstead&lt;br /&gt;&lt;br /&gt;% Pop: 0.15%&lt;br /&gt;&lt;br /&gt;RI: 0.54&#34;,&#34;Municipality: Alton&lt;br /&gt;&lt;br /&gt;% Pop: 0.39%&lt;br /&gt;&lt;br /&gt;RI: 0.64&#34;,&#34;Municipality: Amherst&lt;br /&gt;&lt;br /&gt;% Pop: 0.85%&lt;br /&gt;&lt;br /&gt;RI: 0.16&#34;,&#34;Municipality: Andover&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;RI: 1.04&#34;,&#34;Municipality: Antrim&lt;br /&gt;&lt;br /&gt;% Pop: 0.2%&lt;br /&gt;&lt;br /&gt;RI: 1.63&#34;,&#34;Municipality: Ashland&lt;br /&gt;&lt;br /&gt;% Pop: 0.16%&lt;br /&gt;&lt;br /&gt;RI: 1.57&#34;,&#34;Municipality: Atkinson&lt;br /&gt;&lt;br /&gt;% Pop: 0.51%&lt;br /&gt;&lt;br /&gt;RI: 0.9&#34;,&#34;Municipality: Auburn&lt;br /&gt;&lt;br /&gt;% Pop: 0.41%&lt;br /&gt;&lt;br /&gt;RI: 1.12&#34;,&#34;Municipality: Barnstead&lt;br /&gt;&lt;br /&gt;% Pop: 0.35%&lt;br /&gt;&lt;br /&gt;RI: 0.37&#34;,&#34;Municipality: Barrington&lt;br /&gt;&lt;br /&gt;% Pop: 0.66%&lt;br /&gt;&lt;br /&gt;RI: 0.12&#34;,&#34;Municipality: Bartlett&lt;br /&gt;&lt;br /&gt;% Pop: 0.21%&lt;br /&gt;&lt;br /&gt;RI: 0.87&#34;,&#34;Municipality: Bath&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 1.81&#34;,&#34;Municipality: Belmont&lt;br /&gt;&lt;br /&gt;% Pop: 0.54%&lt;br /&gt;&lt;br /&gt;RI: 0.32&#34;,&#34;Municipality: Bennington&lt;br /&gt;&lt;br /&gt;% Pop: 0.11%&lt;br /&gt;&lt;br /&gt;RI: 1.93&#34;,&#34;Municipality: Benton&lt;br /&gt;&lt;br /&gt;% Pop: 0.03%&lt;br /&gt;&lt;br /&gt;RI: 2.88&#34;,&#34;Municipality: Bethlehem&lt;br /&gt;&lt;br /&gt;% Pop: 0.19%&lt;br /&gt;&lt;br /&gt;RI: 1.37&#34;,&#34;Municipality: Boscawen&lt;br /&gt;&lt;br /&gt;% Pop: 0.3%&lt;br /&gt;&lt;br /&gt;RI: 0.52&#34;,&#34;Municipality: Bow&lt;br /&gt;&lt;br /&gt;% Pop: 0.58%&lt;br /&gt;&lt;br /&gt;RI: 0.26&#34;,&#34;Municipality: Bradford&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.39&#34;,&#34;Municipality: Brentwood&lt;br /&gt;&lt;br /&gt;% Pop: 0.34%&lt;br /&gt;&lt;br /&gt;RI: 0.38&#34;,&#34;Municipality: Bridgewater&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 2.22&#34;,&#34;Municipality: Bristol&lt;br /&gt;&lt;br /&gt;% Pop: 0.23%&lt;br /&gt;&lt;br /&gt;RI: 1.19&#34;,&#34;Municipality: Brookfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.05%&lt;br /&gt;&lt;br /&gt;RI: 2.94&#34;,&#34;Municipality: Brookline&lt;br /&gt;&lt;br /&gt;% Pop: 0.39%&lt;br /&gt;&lt;br /&gt;RI: 0.24&#34;,&#34;Municipality: Canaan&lt;br /&gt;&lt;br /&gt;% Pop: 0.29%&lt;br /&gt;&lt;br /&gt;RI: 0.53&#34;,&#34;Municipality: Candia&lt;br /&gt;&lt;br /&gt;% Pop: 0.29%&lt;br /&gt;&lt;br /&gt;RI: 1.23&#34;,&#34;Municipality: Canterbury&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;RI: 1.44&#34;,&#34;Municipality: Carroll&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.14&#34;,&#34;Municipality: Center Harbor&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 1.13&#34;,&#34;Municipality: Charlestown&lt;br /&gt;&lt;br /&gt;% Pop: 0.38%&lt;br /&gt;&lt;br /&gt;RI: 0.27&#34;,&#34;Municipality: Chatham&lt;br /&gt;&lt;br /&gt;% Pop: 0.03%&lt;br /&gt;&lt;br /&gt;RI: 3.68&#34;,&#34;Municipality: Chester&lt;br /&gt;&lt;br /&gt;% Pop: 0.38%&lt;br /&gt;&lt;br /&gt;RI: 1.19&#34;,&#34;Municipality: Chesterfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.27%&lt;br /&gt;&lt;br /&gt;RI: 1.31&#34;,&#34;Municipality: Chichester&lt;br /&gt;&lt;br /&gt;% Pop: 0.19%&lt;br /&gt;&lt;br /&gt;RI: 1.36&#34;,&#34;Municipality: Clarksville&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 3.2&#34;,&#34;Municipality: Colebrook&lt;br /&gt;&lt;br /&gt;% Pop: 0.17%&lt;br /&gt;&lt;br /&gt;RI: 1.07&#34;,&#34;Municipality: Columbia&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.18&#34;,&#34;Municipality: Concord&lt;br /&gt;&lt;br /&gt;% Pop: 3.18%&lt;br /&gt;&lt;br /&gt;RI: 0.16&#34;,&#34;Municipality: Conway&lt;br /&gt;&lt;br /&gt;% Pop: 0.76%&lt;br /&gt;&lt;br /&gt;RI: 0.28&#34;,&#34;Municipality: Cornish&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.81&#34;,&#34;Municipality: Croydon&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.17&#34;,&#34;Municipality: Dalton&lt;br /&gt;&lt;br /&gt;% Pop: 0.07%&lt;br /&gt;&lt;br /&gt;RI: 1.92&#34;,&#34;Municipality: Danbury&lt;br /&gt;&lt;br /&gt;% Pop: 0.09%&lt;br /&gt;&lt;br /&gt;RI: 1.73&#34;,&#34;Municipality: Danville&lt;br /&gt;&lt;br /&gt;% Pop: 0.33%&lt;br /&gt;&lt;br /&gt;RI: 0.4&#34;,&#34;Municipality: Deerfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.34%&lt;br /&gt;&lt;br /&gt;RI: 1.08&#34;,&#34;Municipality: Deering&lt;br /&gt;&lt;br /&gt;% Pop: 0.14%&lt;br /&gt;&lt;br /&gt;RI: 1.94&#34;,&#34;Municipality: Dorchester&lt;br /&gt;&lt;br /&gt;% Pop: 0.03%&lt;br /&gt;&lt;br /&gt;RI: 2.93&#34;,&#34;Municipality: Dover&lt;br /&gt;&lt;br /&gt;% Pop: 2.3%&lt;br /&gt;&lt;br /&gt;RI: 0.09&#34;,&#34;Municipality: Dublin&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.84&#34;,&#34;Municipality: Dummer&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 3.1&#34;,&#34;Municipality: Dunbarton&lt;br /&gt;&lt;br /&gt;% Pop: 0.21%&lt;br /&gt;&lt;br /&gt;RI: 1.27&#34;,&#34;Municipality: East Kingston&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;RI: 1.03&#34;,&#34;Municipality: Easton&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 3.22&#34;,&#34;Municipality: Eaton&lt;br /&gt;&lt;br /&gt;% Pop: 0.03%&lt;br /&gt;&lt;br /&gt;RI: 3.5&#34;,&#34;Municipality: Effingham&lt;br /&gt;&lt;br /&gt;% Pop: 0.11%&lt;br /&gt;&lt;br /&gt;RI: 2.2&#34;,&#34;Municipality: Ellsworth&lt;br /&gt;&lt;br /&gt;% Pop: 0.01%&lt;br /&gt;&lt;br /&gt;RI: 4.36&#34;,&#34;Municipality: Enfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.35%&lt;br /&gt;&lt;br /&gt;RI: 0.36&#34;,&#34;Municipality: Epsom&lt;br /&gt;&lt;br /&gt;% Pop: 0.35%&lt;br /&gt;&lt;br /&gt;RI: 0.75&#34;,&#34;Municipality: Errol&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 3.14&#34;,&#34;Municipality: Exeter&lt;br /&gt;&lt;br /&gt;% Pop: 1.13%&lt;br /&gt;&lt;br /&gt;RI: 0.11&#34;,&#34;Municipality: Fitzwilliam&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;RI: 1.44&#34;,&#34;Municipality: Francestown&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 2.15&#34;,&#34;Municipality: Franconia&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 1.78&#34;,&#34;Municipality: Franklin&lt;br /&gt;&lt;br /&gt;% Pop: 0.65%&lt;br /&gt;&lt;br /&gt;RI: 0.66&#34;,&#34;Municipality: Freedom&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.86&#34;,&#34;Municipality: Fremont&lt;br /&gt;&lt;br /&gt;% Pop: 0.35%&lt;br /&gt;&lt;br /&gt;RI: 0.35&#34;,&#34;Municipality: Gilford&lt;br /&gt;&lt;br /&gt;% Pop: 0.54%&lt;br /&gt;&lt;br /&gt;RI: 0.62&#34;,&#34;Municipality: Gilmanton&lt;br /&gt;&lt;br /&gt;% Pop: 0.28%&lt;br /&gt;&lt;br /&gt;RI: 0.99&#34;,&#34;Municipality: Gilsum&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 1.41&#34;,&#34;Municipality: Goffstown&lt;br /&gt;&lt;br /&gt;% Pop: 1.33%&lt;br /&gt;&lt;br /&gt;RI: 0.12&#34;,&#34;Municipality: Gorham&lt;br /&gt;&lt;br /&gt;% Pop: 0.21%&lt;br /&gt;&lt;br /&gt;RI: 0.18&#34;,&#34;Municipality: Goshen&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.1&#34;,&#34;Municipality: Grafton&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 2&#34;,&#34;Municipality: Grantham&lt;br /&gt;&lt;br /&gt;% Pop: 0.23%&lt;br /&gt;&lt;br /&gt;RI: 1.2&#34;,&#34;Municipality: Greenfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 1.72&#34;,&#34;Municipality: Greenland&lt;br /&gt;&lt;br /&gt;% Pop: 0.3%&lt;br /&gt;&lt;br /&gt;RI: 0.51&#34;,&#34;Municipality: Greenville&lt;br /&gt;&lt;br /&gt;% Pop: 0.15%&lt;br /&gt;&lt;br /&gt;RI: 1.87&#34;,&#34;Municipality: Groton&lt;br /&gt;&lt;br /&gt;% Pop: 0.04%&lt;br /&gt;&lt;br /&gt;RI: 2.42&#34;,&#34;Municipality: Hampstead&lt;br /&gt;&lt;br /&gt;% Pop: 0.65%&lt;br /&gt;&lt;br /&gt;RI: 0.66&#34;,&#34;Municipality: Hampton&lt;br /&gt;&lt;br /&gt;% Pop: 1.13%&lt;br /&gt;&lt;br /&gt;RI: 0.1&#34;,&#34;Municipality: Hampton Falls&lt;br /&gt;&lt;br /&gt;% Pop: 0.17%&lt;br /&gt;&lt;br /&gt;RI: 1.77&#34;,&#34;Municipality: Hancock&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.81&#34;,&#34;Municipality: Hanover&lt;br /&gt;&lt;br /&gt;% Pop: 0.85%&lt;br /&gt;&lt;br /&gt;RI: 0.17&#34;,&#34;Municipality: Harrisville&lt;br /&gt;&lt;br /&gt;% Pop: 0.07%&lt;br /&gt;&lt;br /&gt;RI: 2.36&#34;,&#34;Municipality: Harts Location&lt;br /&gt;&lt;br /&gt;% Pop: 0%&lt;br /&gt;&lt;br /&gt;RI: 5.05&#34;,&#34;Municipality: Haverhill&lt;br /&gt;&lt;br /&gt;% Pop: 0.35%&lt;br /&gt;&lt;br /&gt;RI: 0.36&#34;,&#34;Municipality: Hebron&lt;br /&gt;&lt;br /&gt;% Pop: 0.05%&lt;br /&gt;&lt;br /&gt;RI: 2.78&#34;,&#34;Municipality: Henniker&lt;br /&gt;&lt;br /&gt;% Pop: 0.36%&lt;br /&gt;&lt;br /&gt;RI: 0.33&#34;,&#34;Municipality: Hill&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 1.82&#34;,&#34;Municipality: Hillsborough&lt;br /&gt;&lt;br /&gt;% Pop: 0.45%&lt;br /&gt;&lt;br /&gt;RI: 0.81&#34;,&#34;Municipality: Hinsdale&lt;br /&gt;&lt;br /&gt;% Pop: 0.3%&lt;br /&gt;&lt;br /&gt;RI: 1.2&#34;,&#34;Municipality: Holderness&lt;br /&gt;&lt;br /&gt;% Pop: 0.16%&lt;br /&gt;&lt;br /&gt;RI: 1.56&#34;,&#34;Municipality: Hollis&lt;br /&gt;&lt;br /&gt;% Pop: 0.58%&lt;br /&gt;&lt;br /&gt;RI: 0.25&#34;,&#34;Municipality: Hopkinton&lt;br /&gt;&lt;br /&gt;% Pop: 0.42%&lt;br /&gt;&lt;br /&gt;RI: 0.58&#34;,&#34;Municipality: Hudson&lt;br /&gt;&lt;br /&gt;% Pop: 1.87%&lt;br /&gt;&lt;br /&gt;RI: 0.39&#34;,&#34;Municipality: Jackson&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.08&#34;,&#34;Municipality: Jaffrey&lt;br /&gt;&lt;br /&gt;% Pop: 0.4%&lt;br /&gt;&lt;br /&gt;RI: 0.62&#34;,&#34;Municipality: Jefferson&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 1.8&#34;,&#34;Municipality: Kensington&lt;br /&gt;&lt;br /&gt;% Pop: 0.16%&lt;br /&gt;&lt;br /&gt;RI: 1.15&#34;,&#34;Municipality: Kingston&lt;br /&gt;&lt;br /&gt;% Pop: 0.46%&lt;br /&gt;&lt;br /&gt;RI: 1.01&#34;,&#34;Municipality: Lancaster&lt;br /&gt;&lt;br /&gt;% Pop: 0.26%&lt;br /&gt;&lt;br /&gt;RI: 0.64&#34;,&#34;Municipality: Landaff&lt;br /&gt;&lt;br /&gt;% Pop: 0.03%&lt;br /&gt;&lt;br /&gt;RI: 2.78&#34;,&#34;Municipality: Langdon&lt;br /&gt;&lt;br /&gt;% Pop: 0.05%&lt;br /&gt;&lt;br /&gt;RI: 2.27&#34;,&#34;Municipality: Lee&lt;br /&gt;&lt;br /&gt;% Pop: 0.33%&lt;br /&gt;&lt;br /&gt;RI: 0.43&#34;,&#34;Municipality: Lempster&lt;br /&gt;&lt;br /&gt;% Pop: 0.09%&lt;br /&gt;&lt;br /&gt;RI: 1.74&#34;,&#34;Municipality: Lincoln&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 0.66&#34;,&#34;Municipality: Lisbon&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.43&#34;,&#34;Municipality: Litchfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.63%&lt;br /&gt;&lt;br /&gt;RI: 0.46&#34;,&#34;Municipality: Littleton&lt;br /&gt;&lt;br /&gt;% Pop: 0.44%&lt;br /&gt;&lt;br /&gt;RI: 0.53&#34;,&#34;Municipality: Loudon&lt;br /&gt;&lt;br /&gt;% Pop: 0.41%&lt;br /&gt;&lt;br /&gt;RI: 0.59&#34;,&#34;Municipality: Lyman&lt;br /&gt;&lt;br /&gt;% Pop: 0.04%&lt;br /&gt;&lt;br /&gt;RI: 2.51&#34;,&#34;Municipality: Lyme&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 2.06&#34;,&#34;Municipality: Lyndeborough&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 2.06&#34;,&#34;Municipality: Madbury&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 2.23&#34;,&#34;Municipality: Madison&lt;br /&gt;&lt;br /&gt;% Pop: 0.19%&lt;br /&gt;&lt;br /&gt;RI: 1.35&#34;,&#34;Municipality: Marlborough&lt;br /&gt;&lt;br /&gt;% Pop: 0.16%&lt;br /&gt;&lt;br /&gt;RI: 1.15&#34;,&#34;Municipality: Marlow&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 1.51&#34;,&#34;Municipality: Mason&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 1.57&#34;,&#34;Municipality: Meredith&lt;br /&gt;&lt;br /&gt;% Pop: 0.47%&lt;br /&gt;&lt;br /&gt;RI: 0.75&#34;,&#34;Municipality: Middleton&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 1.32&#34;,&#34;Municipality: Milan&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 1.61&#34;,&#34;Municipality: Milford&lt;br /&gt;&lt;br /&gt;% Pop: 1.14%&lt;br /&gt;&lt;br /&gt;RI: 0.09&#34;,&#34;Municipality: Milton&lt;br /&gt;&lt;br /&gt;% Pop: 0.34%&lt;br /&gt;&lt;br /&gt;RI: 0.38&#34;,&#34;Municipality: Monroe&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.13&#34;,&#34;Municipality: Mont Vernon&lt;br /&gt;&lt;br /&gt;% Pop: 0.19%&lt;br /&gt;&lt;br /&gt;RI: 1.39&#34;,&#34;Municipality: Moultonborough&lt;br /&gt;&lt;br /&gt;% Pop: 0.3%&lt;br /&gt;&lt;br /&gt;RI: 0.9&#34;,&#34;Municipality: Nelson&lt;br /&gt;&lt;br /&gt;% Pop: 0.05%&lt;br /&gt;&lt;br /&gt;RI: 1.53&#34;,&#34;Municipality: New Boston&lt;br /&gt;&lt;br /&gt;% Pop: 0.42%&lt;br /&gt;&lt;br /&gt;RI: 0.57&#34;,&#34;Municipality: New Castle&lt;br /&gt;&lt;br /&gt;% Pop: 0.07%&lt;br /&gt;&lt;br /&gt;RI: 1.94&#34;,&#34;Municipality: New Durham&lt;br /&gt;&lt;br /&gt;% Pop: 0.19%&lt;br /&gt;&lt;br /&gt;RI: 0.94&#34;,&#34;Municipality: New Hampton&lt;br /&gt;&lt;br /&gt;% Pop: 0.17%&lt;br /&gt;&lt;br /&gt;RI: 0.4&#34;,&#34;Municipality: New Ipswich&lt;br /&gt;&lt;br /&gt;% Pop: 0.39%&lt;br /&gt;&lt;br /&gt;RI: 0.25&#34;,&#34;Municipality: New London&lt;br /&gt;&lt;br /&gt;% Pop: 0.32%&lt;br /&gt;&lt;br /&gt;RI: 0.45&#34;,&#34;Municipality: Newbury&lt;br /&gt;&lt;br /&gt;% Pop: 0.16%&lt;br /&gt;&lt;br /&gt;RI: 1.13&#34;,&#34;Municipality: Newfields&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 2.06&#34;,&#34;Municipality: Newington&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.14&#34;,&#34;Municipality: Newmarket&lt;br /&gt;&lt;br /&gt;% Pop: 0.7%&lt;br /&gt;&lt;br /&gt;RI: 0.36&#34;,&#34;Municipality: Newport&lt;br /&gt;&lt;br /&gt;% Pop: 0.48%&lt;br /&gt;&lt;br /&gt;RI: 0.44&#34;,&#34;Municipality: Newton&lt;br /&gt;&lt;br /&gt;% Pop: 0.37%&lt;br /&gt;&lt;br /&gt;RI: 0.31&#34;,&#34;Municipality: North Hampton&lt;br /&gt;&lt;br /&gt;% Pop: 0.34%&lt;br /&gt;&lt;br /&gt;RI: 0.39&#34;,&#34;Municipality: Northfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.36%&lt;br /&gt;&lt;br /&gt;RI: 0.73&#34;,&#34;Municipality: Northumberland&lt;br /&gt;&lt;br /&gt;% Pop: 0.17%&lt;br /&gt;&lt;br /&gt;RI: 1.09&#34;,&#34;Municipality: Northwood&lt;br /&gt;&lt;br /&gt;% Pop: 0.32%&lt;br /&gt;&lt;br /&gt;RI: 0.46&#34;,&#34;Municipality: Nottingham&lt;br /&gt;&lt;br /&gt;% Pop: 0.38%&lt;br /&gt;&lt;br /&gt;RI: 0.98&#34;,&#34;Municipality: Orange&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 3&#34;,&#34;Municipality: Orford&lt;br /&gt;&lt;br /&gt;% Pop: 0.09%&lt;br /&gt;&lt;br /&gt;RI: 1.69&#34;,&#34;Municipality: Ossipee&lt;br /&gt;&lt;br /&gt;% Pop: 0.33%&lt;br /&gt;&lt;br /&gt;RI: 1.11&#34;,&#34;Municipality: Pelham&lt;br /&gt;&lt;br /&gt;% Pop: 1.01%&lt;br /&gt;&lt;br /&gt;RI: 1.01&#34;,&#34;Municipality: Pembroke&lt;br /&gt;&lt;br /&gt;% Pop: 0.53%&lt;br /&gt;&lt;br /&gt;RI: 0.35&#34;,&#34;Municipality: Piermont&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.15&#34;,&#34;Municipality: Pittsburg&lt;br /&gt;&lt;br /&gt;% Pop: 0.07%&lt;br /&gt;&lt;br /&gt;RI: 2.03&#34;,&#34;Municipality: Pittsfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.3%&lt;br /&gt;&lt;br /&gt;RI: 0.91&#34;,&#34;Municipality: Plainfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;RI: 1.43&#34;,&#34;Municipality: Plaistow&lt;br /&gt;&lt;br /&gt;% Pop: 0.57%&lt;br /&gt;&lt;br /&gt;RI: 0.78&#34;,&#34;Municipality: Plymouth&lt;br /&gt;&lt;br /&gt;% Pop: 0.51%&lt;br /&gt;&lt;br /&gt;RI: 0.39&#34;,&#34;Municipality: Portsmouth&lt;br /&gt;&lt;br /&gt;% Pop: 1.63%&lt;br /&gt;&lt;br /&gt;RI: 0.07&#34;,&#34;Municipality: Randolph&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 3.08&#34;,&#34;Municipality: Richmond&lt;br /&gt;&lt;br /&gt;% Pop: 0.09%&lt;br /&gt;&lt;br /&gt;RI: 2.16&#34;,&#34;Municipality: Rindge&lt;br /&gt;&lt;br /&gt;% Pop: 0.46%&lt;br /&gt;&lt;br /&gt;RI: 0.49&#34;,&#34;Municipality: Rollinsford&lt;br /&gt;&lt;br /&gt;% Pop: 0.19%&lt;br /&gt;&lt;br /&gt;RI: 1.66&#34;,&#34;Municipality: Roxbury&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 3.8&#34;,&#34;Municipality: Rumney&lt;br /&gt;&lt;br /&gt;% Pop: 0.11%&lt;br /&gt;&lt;br /&gt;RI: 1.5&#34;,&#34;Municipality: Rye&lt;br /&gt;&lt;br /&gt;% Pop: 0.41%&lt;br /&gt;&lt;br /&gt;RI: 0.21&#34;,&#34;Municipality: Salisbury&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 1.56&#34;,&#34;Municipality: Sanbornton&lt;br /&gt;&lt;br /&gt;% Pop: 0.22%&lt;br /&gt;&lt;br /&gt;RI: 0.81&#34;,&#34;Municipality: Sandown&lt;br /&gt;&lt;br /&gt;% Pop: 0.47%&lt;br /&gt;&lt;br /&gt;RI: 0.98&#34;,&#34;Municipality: Sandwich&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 2.02&#34;,&#34;Municipality: Seabrook&lt;br /&gt;&lt;br /&gt;% Pop: 0.66%&lt;br /&gt;&lt;br /&gt;RI: 0.42&#34;,&#34;Municipality: Sharon&lt;br /&gt;&lt;br /&gt;% Pop: 0.03%&lt;br /&gt;&lt;br /&gt;RI: 2.95&#34;,&#34;Municipality: Shelburne&lt;br /&gt;&lt;br /&gt;% Pop: 0.03%&lt;br /&gt;&lt;br /&gt;RI: 2.2&#34;,&#34;Municipality: Somersworth&lt;br /&gt;&lt;br /&gt;% Pop: 0.88%&lt;br /&gt;&lt;br /&gt;RI: 0.69&#34;,&#34;Municipality: South Hampton&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.11&#34;,&#34;Municipality: Springfield&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 2.02&#34;,&#34;Municipality: Stark&lt;br /&gt;&lt;br /&gt;% Pop: 0.04%&lt;br /&gt;&lt;br /&gt;RI: 2.47&#34;,&#34;Municipality: Stewartstown&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 1.89&#34;,&#34;Municipality: Stoddard&lt;br /&gt;&lt;br /&gt;% Pop: 0.09%&lt;br /&gt;&lt;br /&gt;RI: 0.97&#34;,&#34;Municipality: Strafford&lt;br /&gt;&lt;br /&gt;% Pop: 0.3%&lt;br /&gt;&lt;br /&gt;RI: 0.5&#34;,&#34;Municipality: Stratford&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 2.19&#34;,&#34;Municipality: Stratham&lt;br /&gt;&lt;br /&gt;% Pop: 0.55%&lt;br /&gt;&lt;br /&gt;RI: 0.31&#34;,&#34;Municipality: Sugar Hill&lt;br /&gt;&lt;br /&gt;% Pop: 0.04%&lt;br /&gt;&lt;br /&gt;RI: 2.46&#34;,&#34;Municipality: Sullivan&lt;br /&gt;&lt;br /&gt;% Pop: 0.05%&lt;br /&gt;&lt;br /&gt;RI: 1.58&#34;,&#34;Municipality: Sunapee&lt;br /&gt;&lt;br /&gt;% Pop: 0.26%&lt;br /&gt;&lt;br /&gt;RI: 0.66&#34;,&#34;Municipality: Surry&lt;br /&gt;&lt;br /&gt;% Pop: 0.06%&lt;br /&gt;&lt;br /&gt;RI: 1.51&#34;,&#34;Municipality: Sutton&lt;br /&gt;&lt;br /&gt;% Pop: 0.14%&lt;br /&gt;&lt;br /&gt;RI: 0.59&#34;,&#34;Municipality: Swanzey&lt;br /&gt;&lt;br /&gt;% Pop: 0.55%&lt;br /&gt;&lt;br /&gt;RI: 0.31&#34;,&#34;Municipality: Tamworth&lt;br /&gt;&lt;br /&gt;% Pop: 0.22%&lt;br /&gt;&lt;br /&gt;RI: 1.25&#34;,&#34;Municipality: Temple&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 1.57&#34;,&#34;Municipality: Thornton&lt;br /&gt;&lt;br /&gt;% Pop: 0.19%&lt;br /&gt;&lt;br /&gt;RI: 0.97&#34;,&#34;Municipality: Tilton&lt;br /&gt;&lt;br /&gt;% Pop: 0.27%&lt;br /&gt;&lt;br /&gt;RI: 0.61&#34;,&#34;Municipality: Troy&lt;br /&gt;&lt;br /&gt;% Pop: 0.16%&lt;br /&gt;&lt;br /&gt;RI: 1.15&#34;,&#34;Municipality: Tuftonboro&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;RI: 1.44&#34;,&#34;Municipality: Unity&lt;br /&gt;&lt;br /&gt;% Pop: 0.12%&lt;br /&gt;&lt;br /&gt;RI: 1.83&#34;,&#34;Municipality: Wakefield&lt;br /&gt;&lt;br /&gt;% Pop: 0.38%&lt;br /&gt;&lt;br /&gt;RI: 0.97&#34;,&#34;Municipality: Walpole&lt;br /&gt;&lt;br /&gt;% Pop: 0.29%&lt;br /&gt;&lt;br /&gt;RI: 1.25&#34;,&#34;Municipality: Warner&lt;br /&gt;&lt;br /&gt;% Pop: 0.21%&lt;br /&gt;&lt;br /&gt;RI: 0.84&#34;,&#34;Municipality: Warren&lt;br /&gt;&lt;br /&gt;% Pop: 0.07%&lt;br /&gt;&lt;br /&gt;RI: 1.98&#34;,&#34;Municipality: Washington&lt;br /&gt;&lt;br /&gt;% Pop: 0.08%&lt;br /&gt;&lt;br /&gt;RI: 1.78&#34;,&#34;Municipality: Waterville Valley&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 2.61&#34;,&#34;Municipality: Weare&lt;br /&gt;&lt;br /&gt;% Pop: 0.66%&lt;br /&gt;&lt;br /&gt;RI: 0.42&#34;,&#34;Municipality: Webster&lt;br /&gt;&lt;br /&gt;% Pop: 0.14%&lt;br /&gt;&lt;br /&gt;RI: 1.27&#34;,&#34;Municipality: Wentworth&lt;br /&gt;&lt;br /&gt;% Pop: 0.07%&lt;br /&gt;&lt;br /&gt;RI: 2&#34;,&#34;Municipality: Westmoreland&lt;br /&gt;&lt;br /&gt;% Pop: 0.13%&lt;br /&gt;&lt;br /&gt;RI: 2.04&#34;,&#34;Municipality: Whitefield&lt;br /&gt;&lt;br /&gt;% Pop: 0.18%&lt;br /&gt;&lt;br /&gt;RI: 1.04&#34;,&#34;Municipality: Wilmot&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 0.89&#34;,&#34;Municipality: Wilton&lt;br /&gt;&lt;br /&gt;% Pop: 0.27%&lt;br /&gt;&lt;br /&gt;RI: 1.29&#34;,&#34;Municipality: Winchester&lt;br /&gt;&lt;br /&gt;% Pop: 0.32%&lt;br /&gt;&lt;br /&gt;RI: 0.44&#34;,&#34;Municipality: Windsor&lt;br /&gt;&lt;br /&gt;% Pop: 0.02%&lt;br /&gt;&lt;br /&gt;RI: 4.12&#34;,&#34;Municipality: Wolfeboro&lt;br /&gt;&lt;br /&gt;% Pop: 0.47%&lt;br /&gt;&lt;br /&gt;RI: 0.07&#34;,&#34;Municipality: Woodstock&lt;br /&gt;&lt;br /&gt;% Pop: 0.1%&lt;br /&gt;&lt;br /&gt;RI: 0.89&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Overrepresented&#34;,&#34;legendgroup&#34;:&#34;Overrepresented&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[106,126,231],&#34;y&#34;:[-0.0788757585005983,-0.0885440988102656,-0.0762566929742518],&#34;text&#34;:[&#34;Municipality: Hooksett&lt;br /&gt;&lt;br /&gt;% Pop: 1.08%&lt;br /&gt;&lt;br /&gt;RI: -0.08&#34;,&#34;Municipality: Londonderry&lt;br /&gt;&lt;br /&gt;% Pop: 1.91%&lt;br /&gt;&lt;br /&gt;RI: -0.09&#34;,&#34;Municipality: Windham&lt;br /&gt;&lt;br /&gt;% Pop: 1.08%&lt;br /&gt;&lt;br /&gt;RI: -0.08&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Underrepresented&#34;,&#34;legendgroup&#34;:&#34;Underrepresented&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:46.3196347031963,&#34;r&#34;:7.30593607305936,&#34;b&#34;:16.4383561643836,&#34;l&#34;:31.4155251141553},&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;title&#34;:&#34;New Hampshire House of Representatives&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:17.5342465753425},&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-10.65,245.65],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;50&#34;,&#34;100&#34;,&#34;150&#34;,&#34;200&#34;],&#34;tickvals&#34;:[0,50,100,150,200],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;50&#34;,&#34;100&#34;,&#34;150&#34;,&#34;200&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.345501806055127,5.30756775333183],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;1&#34;,&#34;2&#34;,&#34;3&#34;,&#34;4&#34;,&#34;5&#34;],&#34;tickvals&#34;:[0,1,2,3,4,5],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;1&#34;,&#34;2&#34;,&#34;3&#34;,&#34;4&#34;,&#34;5&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:&#34;Representation Index&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1}],&#34;showlegend&#34;:true,&#34;legend&#34;:{&#34;bgcolor&#34;:null,&#34;bordercolor&#34;:null,&#34;borderwidth&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;y&#34;:1,&#34;orientation&#34;:&#34;h&#34;},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;modeBarButtonsToAdd&#34;:[{&#34;name&#34;:&#34;Collaborate&#34;,&#34;icon&#34;:{&#34;width&#34;:1000,&#34;ascent&#34;:500,&#34;descent&#34;:-50,&#34;path&#34;:&#34;M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z&#34;},&#34;click&#34;:&#34;function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == &#39;?viewer_pane=1&#39;) {\n          alert(&#39;To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;);\n        } else {\n          window.open(&#39;https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;, &#39;_blank&#39;);\n        }\n      }&#34;}],&#34;cloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;248616fd3813&#34;:{&#34;x&#34;:{},&#34;ymin&#34;:{},&#34;ymax&#34;:{},&#34;type&#34;:&#34;scatter&#34;},&#34;24864a6c732f&#34;:{&#34;yintercept&#34;:{}},&#34;248615fe38d5&#34;:{&#34;yintercept&#34;:{}},&#34;24866545333a&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;colour&#34;:{},&#34;label&#34;:{}}},&#34;cur_data&#34;:&#34;248616fd3813&#34;,&#34;visdat&#34;:{&#34;248616fd3813&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;24864a6c732f&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;248615fe38d5&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;24866545333a&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[&#34;config.modeBarButtonsToAdd.0.click&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;The above chart illustrates this phenomenon. Interestingly, the most populous cities and towns in the region are represented according to the one person, one vote paradigm. When applied to the state senate, the results are much different.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-5&#34; style=&#34;width:672px;height:384px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-5&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,23,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1],&#34;y&#34;:[-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-0.1,24.1],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-0.1,24.1],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[18,21],&#34;y&#34;:[0.0291424359290335,0.015725584940145],&#34;text&#34;:[&#34;District: 19&lt;br /&gt;&lt;br /&gt;% Pop: 4.05%&lt;br /&gt;&lt;br /&gt;RI: 0.03&#34;,&#34;District: 22&lt;br /&gt;&lt;br /&gt;% Pop: 4.1%&lt;br /&gt;&lt;br /&gt;RI: 0.02&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;One person, one vote&#34;,&#34;legendgroup&#34;:&#34;One person, one vote&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[4,6,10,12,14,15,17,19],&#34;y&#34;:[0.068247836824423,0.493807266783699,0.195609420759472,0.726748574774862,1.01006660612559,0.283066126913002,1.92280409489139,0.483438640137724],&#34;text&#34;:[&#34;District: 4&lt;br /&gt;&lt;br /&gt;% Pop: 3.89%&lt;br /&gt;&lt;br /&gt;RI: 0.07&#34;,&#34;District: 6&lt;br /&gt;&lt;br /&gt;% Pop: 2.54%&lt;br /&gt;&lt;br /&gt;RI: 0.49&#34;,&#34;District: 10&lt;br /&gt;&lt;br /&gt;% Pop: 3.43%&lt;br /&gt;&lt;br /&gt;RI: 0.2&#34;,&#34;District: 12&lt;br /&gt;&lt;br /&gt;% Pop: 2.01%&lt;br /&gt;&lt;br /&gt;RI: 0.73&#34;,&#34;District: 15&lt;br /&gt;&lt;br /&gt;% Pop: 1.52%&lt;br /&gt;&lt;br /&gt;RI: 1.01&#34;,&#34;District: 16&lt;br /&gt;&lt;br /&gt;% Pop: 3.14%&lt;br /&gt;&lt;br /&gt;RI: 0.28&#34;,&#34;District: 18&lt;br /&gt;&lt;br /&gt;% Pop: 0.61%&lt;br /&gt;&lt;br /&gt;RI: 1.92&#34;,&#34;District: 20&lt;br /&gt;&lt;br /&gt;% Pop: 2.57%&lt;br /&gt;&lt;br /&gt;RI: 0.48&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Overrepresented&#34;,&#34;legendgroup&#34;:&#34;Overrepresented&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,2,3,5,7,8,9,11,13,16,20,22,23],&#34;y&#34;:[-0.143366997051457,-0.248699057263395,-0.305831261423659,-0.388316235485188,-0.099355577982888,-0.304710342152587,-0.232172675776813,-0.401545266348269,-0.615285762438233,-0.279935840479816,-0.0687335630323309,-0.296417380715288,-0.21457391366389],&#34;text&#34;:[&#34;District: 1&lt;br /&gt;&lt;br /&gt;% Pop: 4.81%&lt;br /&gt;&lt;br /&gt;RI: -0.14&#34;,&#34;District: 2&lt;br /&gt;&lt;br /&gt;% Pop: 5.34%&lt;br /&gt;&lt;br /&gt;RI: -0.25&#34;,&#34;District: 3&lt;br /&gt;&lt;br /&gt;% Pop: 5.66%&lt;br /&gt;&lt;br /&gt;RI: -0.31&#34;,&#34;District: 5&lt;br /&gt;&lt;br /&gt;% Pop: 6.14%&lt;br /&gt;&lt;br /&gt;RI: -0.39&#34;,&#34;District: 7&lt;br /&gt;&lt;br /&gt;% Pop: 4.6%&lt;br /&gt;&lt;br /&gt;RI: -0.1&#34;,&#34;District: 8&lt;br /&gt;&lt;br /&gt;% Pop: 5.65%&lt;br /&gt;&lt;br /&gt;RI: -0.3&#34;,&#34;District: 9&lt;br /&gt;&lt;br /&gt;% Pop: 5.26%&lt;br /&gt;&lt;br /&gt;RI: -0.23&#34;,&#34;District: 11&lt;br /&gt;&lt;br /&gt;% Pop: 6.23%&lt;br /&gt;&lt;br /&gt;RI: -0.4&#34;,&#34;District: 14&lt;br /&gt;&lt;br /&gt;% Pop: 7.71%&lt;br /&gt;&lt;br /&gt;RI: -0.62&#34;,&#34;District: 17&lt;br /&gt;&lt;br /&gt;% Pop: 5.51%&lt;br /&gt;&lt;br /&gt;RI: -0.28&#34;,&#34;District: 21&lt;br /&gt;&lt;br /&gt;% Pop: 4.46%&lt;br /&gt;&lt;br /&gt;RI: -0.07&#34;,&#34;District: 23&lt;br /&gt;&lt;br /&gt;% Pop: 5.6%&lt;br /&gt;&lt;br /&gt;RI: -0.3&#34;,&#34;District: 24&lt;br /&gt;&lt;br /&gt;% Pop: 5.16%&lt;br /&gt;&lt;br /&gt;RI: -0.21&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Underrepresented&#34;,&#34;legendgroup&#34;:&#34;Underrepresented&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:46.3196347031963,&#34;r&#34;:7.30593607305936,&#34;b&#34;:16.4383561643836,&#34;l&#34;:31.4155251141553},&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;title&#34;:&#34;New Hampshire Senate&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:17.5342465753425},&#34;xaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.1,24.1],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;5&#34;,&#34;10&#34;,&#34;15&#34;,&#34;20&#34;],&#34;tickvals&#34;:[1.38777878078145e-17,5,10,15,20],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;5&#34;,&#34;10&#34;,&#34;15&#34;,&#34;20&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-0.742190255304714,2.04970858775787],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;1&#34;,&#34;2&#34;],&#34;tickvals&#34;:[0,1,2],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;1&#34;,&#34;2&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:&#34;Representation Index&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1}],&#34;showlegend&#34;:true,&#34;legend&#34;:{&#34;bgcolor&#34;:null,&#34;bordercolor&#34;:null,&#34;borderwidth&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;y&#34;:1,&#34;orientation&#34;:&#34;h&#34;},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;modeBarButtonsToAdd&#34;:[{&#34;name&#34;:&#34;Collaborate&#34;,&#34;icon&#34;:{&#34;width&#34;:1000,&#34;ascent&#34;:500,&#34;descent&#34;:-50,&#34;path&#34;:&#34;M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z&#34;},&#34;click&#34;:&#34;function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == &#39;?viewer_pane=1&#39;) {\n          alert(&#39;To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;);\n        } else {\n          window.open(&#39;https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;, &#39;_blank&#39;);\n        }\n      }&#34;}],&#34;cloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;24865f5338ab&#34;:{&#34;x&#34;:{},&#34;ymin&#34;:{},&#34;ymax&#34;:{},&#34;type&#34;:&#34;scatter&#34;},&#34;248650ad9371&#34;:{&#34;yintercept&#34;:{}},&#34;248633ab0918&#34;:{&#34;yintercept&#34;:{}},&#34;248621e22128&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;colour&#34;:{},&#34;label&#34;:{}}},&#34;cur_data&#34;:&#34;24865f5338ab&#34;,&#34;visdat&#34;:{&#34;24865f5338ab&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;248650ad9371&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;248633ab0918&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;248621e22128&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[&#34;config.modeBarButtonsToAdd.0.click&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;The representation index for the New Hampshire Senate trends toward underrepresentation. The median value is shown with a dotted red line. It is apparent that the representation of the Senate of New Hampshire is not as equally representative as that of California. The population distribution across the state is highly unequal with a vast majority residents living close to the Maine and Massachusetts borders plausibly contributing to this inequality.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;further-directions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Further Directions&lt;/h2&gt;
&lt;p&gt;The ability to compare representation across governing bodies has large implications for comparative political analysis. Further development of the representation index allows scholars and researchers to compare constituency representation among similar bodies—as demonstrated with the case of California and New Hampshire.&lt;/p&gt;
&lt;p&gt;The new formulation of the representation index is conducive to inter-governmental body analysis. This is possible by the index’s ability to place bodies of different size on the same scale. A result of this is the ability to perform hypothesis testing among groups. As a motivating example, the representation indexes of states are compared along partisanship lines.&lt;/p&gt;
&lt;div id=&#34;htmlwidget-6&#34; style=&#34;width:672px;height:384px;&#34; class=&#34;plotly html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-6&#34;&gt;{&#34;x&#34;:{&#34;data&#34;:[{&#34;x&#34;:[5,7,8,11,14,19,20,22,23,30,31,32,33,34,37,39,45,47,47,45,39,37,34,33,32,31,30,23,22,20,19,14,11,8,7,5,5],&#34;y&#34;:[-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,3,9,10,12,13,15,16,17,18,21,24,25,27,28,29,36,40,41,42,43,44,50,50,50,44,43,42,41,40,36,29,28,27,25,24,21,18,17,16,15,13,12,10,9,3,1,1],&#34;y&#34;:[-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x2&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[2,4,6,26,35,38,46,48,49,49,48,46,38,35,26,6,4,2,2],&#34;y&#34;:[-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,-0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;transparent&#34;,&#34;dash&#34;:&#34;solid&#34;},&#34;fill&#34;:&#34;toself&#34;,&#34;fillcolor&#34;:&#34;rgba(99,125,255,0.2)&#34;,&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x3&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x2&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[-0.05,-0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x3&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x2&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[-1.45,52.45],&#34;y&#34;:[0.05,0.05],&#34;text&#34;:&#34;&#34;,&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;lines&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,0.5)&#34;,&#34;dash&#34;:&#34;dash&#34;},&#34;hoveron&#34;:&#34;points&#34;,&#34;showlegend&#34;:false,&#34;xaxis&#34;:&#34;x3&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[1,29,45,40,5,14,19,8,21,42,11,36,35,3,27,43,12,13],&#34;y&#34;:[-1.79921454014402,0.544831043557061,1.92620231042506,1.51083760159594,-0.733291836577397,-0.0605593989971765,0.0652561113472588,-0.472337264577165,0.150096487872778,1.54358968838493,-0.355286560228847,1.09623624071235,0.825087774120795,-1.14560006526519,0.475398418747457,1.76731165787931,-0.261025933103664,-0.0872199212765543],&#34;text&#34;:[&#34;State: California&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -1.8&#34;,&#34;State: Connecticut&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 0.54&#34;,&#34;State: Delaware&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 1.93&#34;,&#34;State: Hawaii&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 1.51&#34;,&#34;State: Illinois&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -0.73&#34;,&#34;State: Massachusetts&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -0.06&#34;,&#34;State: Maryland&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 0.07&#34;,&#34;State: Michigan&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -0.47&#34;,&#34;State: Minnesota&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 0.15&#34;,&#34;State: New Hampshire&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 1.54&#34;,&#34;State: New Jersey&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -0.36&#34;,&#34;State: New Mexico&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 1.1&#34;,&#34;State: Nevada&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 0.83&#34;,&#34;State: New York&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -1.15&#34;,&#34;State: Oregon&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 0.48&#34;,&#34;State: Rhode Island&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: 1.77&#34;,&#34;State: Virginia&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -0.26&#34;,&#34;State: Washington&lt;br /&gt;# Dem: 2&lt;br /&gt;Rep. Index: -0.09&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(99,125,255,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Democrat&#34;,&#34;legendgroup&#34;:&#34;Democrat&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[47,32,4,9,30,39,15,33,26,25,41,18,31,10,48,38,28,24,46,17,2,34,50],&#34;y&#34;:[2.16070861013449,0.74835890734716,-1.1153829478745,-0.452308587718264,0.704597806412676,1.36900929562851,-0.0507634663165665,0.770131169036849,0.350815115444635,0.307077566935585,1.53459774892231,0.0286313361900235,0.730892162973734,-0.436476292864377,2.21516146106027,1.21622908865919,0.496427558616338,0.286988529814675,2.02411740758902,-0.0292976384949085,-1.40613777958871,0.8019063017126,2.39190796839801],&#34;text&#34;:[&#34;State: Alaska&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 2.16&#34;,&#34;State: Arkansas&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.75&#34;,&#34;State: Florida&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: -1.12&#34;,&#34;State: Georgia&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: -0.45&#34;,&#34;State: Iowa&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.7&#34;,&#34;State: Idaho&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 1.37&#34;,&#34;State: Indiana&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: -0.05&#34;,&#34;State: Kansas&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.77&#34;,&#34;State: Kentucky&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.35&#34;,&#34;State: Louisiana&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.31&#34;,&#34;State: Maine&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 1.53&#34;,&#34;State: Missouri&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.03&#34;,&#34;State: Mississippi&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.73&#34;,&#34;State: North Carolina&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: -0.44&#34;,&#34;State: North Dakota&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 2.22&#34;,&#34;State: Nebraska&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 1.22&#34;,&#34;State: Oklahoma&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.5&#34;,&#34;State: South Carolina&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.29&#34;,&#34;State: South Dakota&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 2.02&#34;,&#34;State: Tennessee&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: -0.03&#34;,&#34;State: Texas&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: -1.41&#34;,&#34;State: Utah&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 0.8&#34;,&#34;State: Wyoming&lt;br /&gt;# Dem: 0&lt;br /&gt;Rep. Index: 2.39&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(206,109,109,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Republican&#34;,&#34;legendgroup&#34;:&#34;Republican&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x2&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null},{&#34;x&#34;:[23,16,22,44,7,6,49,20,37],&#34;y&#34;:[0.254158285532269,-0.0365062676500336,0.203283470003425,1.82918501998487,-0.62697266852376,-0.723245698371588,2.28736233189927,0.0803631938181184,1.20174089107934],&#34;text&#34;:[&#34;State: Alabama&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: 0.25&#34;,&#34;State: Arizona&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: -0.04&#34;,&#34;State: Colorado&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: 0.2&#34;,&#34;State: Montana&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: 1.83&#34;,&#34;State: Ohio&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: -0.63&#34;,&#34;State: Pennsylvania&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: -0.72&#34;,&#34;State: Vermont&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: 2.29&#34;,&#34;State: Wisconsin&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: 0.08&#34;,&#34;State: West Virginia&lt;br /&gt;# Dem: 1&lt;br /&gt;Rep. Index: 1.2&#34;],&#34;type&#34;:&#34;scatter&#34;,&#34;mode&#34;:&#34;markers&#34;,&#34;marker&#34;:{&#34;autocolorscale&#34;:false,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;,&#34;opacity&#34;:1,&#34;size&#34;:5.66929133858268,&#34;symbol&#34;:&#34;circle&#34;,&#34;line&#34;:{&#34;width&#34;:1.88976377952756,&#34;color&#34;:&#34;rgba(252,176,106,1)&#34;}},&#34;hoveron&#34;:&#34;points&#34;,&#34;name&#34;:&#34;Split / Other&#34;,&#34;legendgroup&#34;:&#34;Split / Other&#34;,&#34;showlegend&#34;:true,&#34;xaxis&#34;:&#34;x3&#34;,&#34;yaxis&#34;:&#34;y&#34;,&#34;hoverinfo&#34;:&#34;text&#34;,&#34;frame&#34;:null}],&#34;layout&#34;:{&#34;margin&#34;:{&#34;t&#34;:58.0091324200913,&#34;r&#34;:7.30593607305936,&#34;b&#34;:16.4383561643836,&#34;l&#34;:37.2602739726027},&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;title&#34;:&#34;US Senate&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:17.5342465753425},&#34;xaxis&#34;:{&#34;domain&#34;:[0,0.322461404653185],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-1.45,52.45],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;tickvals&#34;:[0,10,20,30,40,50],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;yaxis&#34;:{&#34;domain&#34;:[0,1],&#34;automargin&#34;:true,&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-2.00877066557112,2.60146409382512],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;-2&#34;,&#34;-1&#34;,&#34;0&#34;,&#34;1&#34;,&#34;2&#34;],&#34;tickvals&#34;:[-2,-1,0,1,2],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;-2&#34;,&#34;-1&#34;,&#34;0&#34;,&#34;1&#34;,&#34;2&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:true,&#34;tickfont&#34;:{&#34;color&#34;:&#34;rgba(77,77,77,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;x&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;annotations&#34;:[{&#34;text&#34;:&#34;Representation Index&#34;,&#34;x&#34;:-0.0337029789084584,&#34;y&#34;:0.5,&#34;showarrow&#34;:false,&#34;ax&#34;:0,&#34;ay&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;xref&#34;:&#34;paper&#34;,&#34;yref&#34;:&#34;paper&#34;,&#34;textangle&#34;:-90,&#34;xanchor&#34;:&#34;right&#34;,&#34;yanchor&#34;:&#34;center&#34;,&#34;annotationType&#34;:&#34;axis&#34;},{&#34;text&#34;:&#34;Democrat&#34;,&#34;x&#34;:0.161230702326593,&#34;y&#34;:1,&#34;showarrow&#34;:false,&#34;ax&#34;:0,&#34;ay&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(26,26,26,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;xref&#34;:&#34;paper&#34;,&#34;yref&#34;:&#34;paper&#34;,&#34;textangle&#34;:-0,&#34;xanchor&#34;:&#34;center&#34;,&#34;yanchor&#34;:&#34;bottom&#34;},{&#34;text&#34;:&#34;Republican&#34;,&#34;x&#34;:0.5,&#34;y&#34;:1,&#34;showarrow&#34;:false,&#34;ax&#34;:0,&#34;ay&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(26,26,26,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;xref&#34;:&#34;paper&#34;,&#34;yref&#34;:&#34;paper&#34;,&#34;textangle&#34;:-0,&#34;xanchor&#34;:&#34;center&#34;,&#34;yanchor&#34;:&#34;bottom&#34;},{&#34;text&#34;:&#34;Split / Other&#34;,&#34;x&#34;:0.838769297673407,&#34;y&#34;:1,&#34;showarrow&#34;:false,&#34;ax&#34;:0,&#34;ay&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(26,26,26,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895},&#34;xref&#34;:&#34;paper&#34;,&#34;yref&#34;:&#34;paper&#34;,&#34;textangle&#34;:-0,&#34;xanchor&#34;:&#34;center&#34;,&#34;yanchor&#34;:&#34;bottom&#34;}],&#34;shapes&#34;:[{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:0.322461404653185,&#34;y0&#34;:0,&#34;y1&#34;:1},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0,&#34;x1&#34;:0.322461404653185,&#34;y0&#34;:0,&#34;y1&#34;:23.37899543379,&#34;yanchor&#34;:1,&#34;ysizemode&#34;:&#34;pixel&#34;},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0.344205262013481,&#34;x1&#34;:0.655794737986519,&#34;y0&#34;:0,&#34;y1&#34;:1},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0.344205262013481,&#34;x1&#34;:0.655794737986519,&#34;y0&#34;:0,&#34;y1&#34;:23.37899543379,&#34;yanchor&#34;:1,&#34;ysizemode&#34;:&#34;pixel&#34;},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0.677538595346814,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:1},{&#34;type&#34;:&#34;rect&#34;,&#34;fillcolor&#34;:null,&#34;line&#34;:{&#34;color&#34;:null,&#34;width&#34;:0,&#34;linetype&#34;:[]},&#34;yref&#34;:&#34;paper&#34;,&#34;xref&#34;:&#34;paper&#34;,&#34;x0&#34;:0.677538595346814,&#34;x1&#34;:1,&#34;y0&#34;:0,&#34;y1&#34;:23.37899543379,&#34;yanchor&#34;:1,&#34;ysizemode&#34;:&#34;pixel&#34;}],&#34;xaxis2&#34;:{&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-1.45,52.45],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;tickvals&#34;:[0,10,20,30,40,50],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;domain&#34;:[0.344205262013481,0.655794737986519],&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;xaxis3&#34;:{&#34;type&#34;:&#34;linear&#34;,&#34;autorange&#34;:false,&#34;range&#34;:[-1.45,52.45],&#34;tickmode&#34;:&#34;array&#34;,&#34;ticktext&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;tickvals&#34;:[0,10,20,30,40,50],&#34;categoryorder&#34;:&#34;array&#34;,&#34;categoryarray&#34;:[&#34;0&#34;,&#34;10&#34;,&#34;20&#34;,&#34;30&#34;,&#34;40&#34;,&#34;50&#34;],&#34;nticks&#34;:null,&#34;ticks&#34;:&#34;&#34;,&#34;tickcolor&#34;:null,&#34;ticklen&#34;:3.65296803652968,&#34;tickwidth&#34;:0,&#34;showticklabels&#34;:false,&#34;tickfont&#34;:{&#34;color&#34;:null,&#34;family&#34;:null,&#34;size&#34;:0},&#34;tickangle&#34;:-0,&#34;showline&#34;:false,&#34;linecolor&#34;:null,&#34;linewidth&#34;:0,&#34;showgrid&#34;:true,&#34;domain&#34;:[0.677538595346814,1],&#34;gridcolor&#34;:&#34;rgba(235,235,235,1)&#34;,&#34;gridwidth&#34;:0.66417600664176,&#34;zeroline&#34;:false,&#34;anchor&#34;:&#34;y&#34;,&#34;title&#34;:&#34;&#34;,&#34;titlefont&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:14.6118721461187},&#34;hoverformat&#34;:&#34;.2f&#34;},&#34;showlegend&#34;:false,&#34;legend&#34;:{&#34;bgcolor&#34;:null,&#34;bordercolor&#34;:null,&#34;borderwidth&#34;:0,&#34;font&#34;:{&#34;color&#34;:&#34;rgba(0,0,0,1)&#34;,&#34;family&#34;:&#34;&#34;,&#34;size&#34;:11.689497716895}},&#34;hovermode&#34;:&#34;closest&#34;,&#34;barmode&#34;:&#34;relative&#34;},&#34;config&#34;:{&#34;doubleClick&#34;:&#34;reset&#34;,&#34;modeBarButtonsToAdd&#34;:[{&#34;name&#34;:&#34;Collaborate&#34;,&#34;icon&#34;:{&#34;width&#34;:1000,&#34;ascent&#34;:500,&#34;descent&#34;:-50,&#34;path&#34;:&#34;M487 375c7-10 9-23 5-36l-79-259c-3-12-11-23-22-31-11-8-22-12-35-12l-263 0c-15 0-29 5-43 15-13 10-23 23-28 37-5 13-5 25-1 37 0 0 0 3 1 7 1 5 1 8 1 11 0 2 0 4-1 6 0 3-1 5-1 6 1 2 2 4 3 6 1 2 2 4 4 6 2 3 4 5 5 7 5 7 9 16 13 26 4 10 7 19 9 26 0 2 0 5 0 9-1 4-1 6 0 8 0 2 2 5 4 8 3 3 5 5 5 7 4 6 8 15 12 26 4 11 7 19 7 26 1 1 0 4 0 9-1 4-1 7 0 8 1 2 3 5 6 8 4 4 6 6 6 7 4 5 8 13 13 24 4 11 7 20 7 28 1 1 0 4 0 7-1 3-1 6-1 7 0 2 1 4 3 6 1 1 3 4 5 6 2 3 3 5 5 6 1 2 3 5 4 9 2 3 3 7 5 10 1 3 2 6 4 10 2 4 4 7 6 9 2 3 4 5 7 7 3 2 7 3 11 3 3 0 8 0 13-1l0-1c7 2 12 2 14 2l218 0c14 0 25-5 32-16 8-10 10-23 6-37l-79-259c-7-22-13-37-20-43-7-7-19-10-37-10l-248 0c-5 0-9-2-11-5-2-3-2-7 0-12 4-13 18-20 41-20l264 0c5 0 10 2 16 5 5 3 8 6 10 11l85 282c2 5 2 10 2 17 7-3 13-7 17-13z m-304 0c-1-3-1-5 0-7 1-1 3-2 6-2l174 0c2 0 4 1 7 2 2 2 4 4 5 7l6 18c0 3 0 5-1 7-1 1-3 2-6 2l-173 0c-3 0-5-1-8-2-2-2-4-4-4-7z m-24-73c-1-3-1-5 0-7 2-2 3-2 6-2l174 0c2 0 5 0 7 2 3 2 4 4 5 7l6 18c1 2 0 5-1 6-1 2-3 3-5 3l-174 0c-3 0-5-1-7-3-3-1-4-4-5-6z&#34;},&#34;click&#34;:&#34;function(gd) { \n        // is this being viewed in RStudio?\n        if (location.search == &#39;?viewer_pane=1&#39;) {\n          alert(&#39;To learn about plotly for collaboration, visit:\\n https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;);\n        } else {\n          window.open(&#39;https://cpsievert.github.io/plotly_book/plot-ly-for-collaboration.html&#39;, &#39;_blank&#39;);\n        }\n      }&#34;}],&#34;cloud&#34;:false},&#34;source&#34;:&#34;A&#34;,&#34;attrs&#34;:{&#34;24867061fbb3&#34;:{&#34;x&#34;:{},&#34;ymin&#34;:{},&#34;ymax&#34;:{},&#34;type&#34;:&#34;scatter&#34;},&#34;248630d3de69&#34;:{&#34;yintercept&#34;:{}},&#34;248625aed88a&#34;:{&#34;yintercept&#34;:{}},&#34;24867a0a5f59&#34;:{&#34;x&#34;:{},&#34;y&#34;:{},&#34;colour&#34;:{},&#34;label&#34;:{}}},&#34;cur_data&#34;:&#34;24867061fbb3&#34;,&#34;visdat&#34;:{&#34;24867061fbb3&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;248630d3de69&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;248625aed88a&#34;:[&#34;function (y) &#34;,&#34;x&#34;],&#34;24867a0a5f59&#34;:[&#34;function (y) &#34;,&#34;x&#34;]},&#34;highlight&#34;:{&#34;on&#34;:&#34;plotly_click&#34;,&#34;persistent&#34;:false,&#34;dynamic&#34;:false,&#34;selectize&#34;:false,&#34;opacityDim&#34;:0.2,&#34;selected&#34;:{&#34;opacity&#34;:1},&#34;debounce&#34;:0},&#34;base_url&#34;:&#34;https://plot.ly&#34;},&#34;evals&#34;:[&#34;config.modeBarButtonsToAdd.0.click&#34;],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;State Senate representation indexes were calculated using the general representation index formula for all 50 states. A two-sample t-test was performed comparing states with two Republican senators to those with two Democratic senators. In doing so, we fail to reject the null hypothesis &lt;span class=&#34;math inline&#34;&gt;\(( \ t(39) = 1.117, \ p = 0.27 \ )\)&lt;/span&gt; that there is a difference of representation index based solely on partisanship.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Party&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Democrat&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Republican&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Split / Other&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.35&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It has been demonstrated that the representation index is an informative measure that can be utilized to examine over and underrepresentation of a governing body. This new formulation of the representation index is useful in its ability to evaluate both over and under-representation and to compare different political entities. One could imagine, for example, a comparison of constituency representation between the United States and France’s upper and lower legislative houses.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I would like to thank &lt;a href=&#34;https://twitter.com/harleyphleger?lang=en&#34;&gt;Harley Phleger&lt;/a&gt; for his help in editing this piece. The cogency of this writing would be entirely lacking without his superb editing abilities. If you are in need of an editor, give him a message. Also, his poetry is wonderful.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The Cost of Gridlock</title>
      <link>/post/shutdown-politics/</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/shutdown-politics/</guid>
      <description>


&lt;p&gt;&lt;em&gt;Originally &lt;a href=&#34;https://www.northeastern.edu/csshresearch/bostonarearesearchinitiative/2019/02/06/the-cost-of-gridlock-shutdown-politics-and-their-impact-on-greater-boston/&#34;&gt;posted&lt;/a&gt; via Boston Area Research Initiative&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The nation heaved a sigh of relief as President Trump signed a bill on Friday, January 25th, that ended the longest government shutdown in US history. This bill, the &lt;em&gt;Continuing Appropriation Act&lt;/em&gt;, provides enough funding to keep the government open until February 15th. After thirty-four days of turmoil for federal workers, it is hard to believe that in another three short weeks, the government can shutdown once again. During this last shutdown over 800,000 federal workers and numerous contractors across the country went without paychecks.&lt;/p&gt;
&lt;p&gt;The Boston area is home to major government contractors such as Raytheon and American Science and Engineering Inc. and as such, has undoubtedly been affected by the shutdown. At BARI, we are taking steps to understand just how much another shutdown could affect the region. The recent release of new demographic estimates from the American Community Survey are being used to aid us in this endeavor.&lt;/p&gt;
&lt;p&gt;During a government shutdown, federal employees are hit the hardest, and in the Boston-Cambridge-Newton area, there are 68 thousand of them (margin of error: 2,400). When the government shuts down, non-essential employees are furloughed. While furloughed, they are not allowed to work, and thereby unable to collect paychecks. The remaining federal workers who are deemed essential are then required to work without pay or the promise of repayment—workers are only repaid if new spending bills allocate funding for it. Due to these circumstances any government shutdown puts federal employees at risk. And based on the distribution of federal employees in the Greater Boston area, another shutdown might disproportionately affect suburban areas.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/shutdown/fed_emp.png&#34; alt=&#34;Federal Employees&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Federal Employees&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Without funding, government aid sources are also in danger of running out of money. One such aid program is the Supplemental Nutrition Assistance Program (SNAP), which 1 in 10 (11%, margin of error: 1.5%) families in the region utilizes. Throughout the region, reliance on SNAP assistance varies greatly. In some census tracts nearly 7 out of 10 families receive assistance from SNAP. Areas that would be hardest hit by another shutdown are Lawrence and Brockton, where SNAP utilization is highest.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/shutdown/snap_region.png&#34; alt=&#34;SNAP Recipients Boston-Cambridge-Newton&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;SNAP Recipients Boston-Cambridge-Newton&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In anticipation of funds running out, SNAP payments for the month of February were disbursed on January 20th, leaving recipients to budget their February payments for a period of nearly 40 days. This may cause financial discomfort for some families later in the month. As some research has suggested, families who receive food assistance tend to increase their spending right when payments have been disbursed (Hastings and Washington, 2010), and another shutdown could exacerbate already tight budgets.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Hastings, Justine, and Ebonya Washington. “The first of the month effect: consumer behavior and store responses.” &lt;em&gt;American economic Journal: economic policy&lt;/em&gt; 2, no. 2 (2010): 142-62.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>xgboost feature importance</title>
      <link>/post/xgb-feature-importance/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/xgb-feature-importance/</guid>
      <description>


&lt;p&gt;This post will go over extracting feature (variable) importance and creating a function for creating a ggplot object for it. I will draw on the simplicity of Chris Albon’s post. For steps to do the following in Python, I recommend his &lt;a href=&#34;https://chrisalbon.com/machine_learning/trees_and_forests/feature_importance/&#34;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Feature Importance by Chris Albon&#34; src=&#34;https://chrisalbon.com/images/machine_learning_flashcards/Feature_Importance_print.png&#34;/&gt;&lt;/p&gt;
&lt;p&gt;If you’ve ever created a decision tree, you’ve probably looked at measures of feature importance. In the above flashcard, impurity refers to how many times a feature was use and lead to a misclassification. Here, we’re looking at the importance of a feature, so how much it helped in the classification or prediction of an outcome.&lt;/p&gt;
&lt;p&gt;This example will draw on the build in data &lt;code&gt;Sonar&lt;/code&gt; from the &lt;code&gt;mlbench&lt;/code&gt; package.&lt;/p&gt;
&lt;div id=&#34;prepping-the-environment&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Prepping the Environment&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(caret)
library(xgboost)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-the-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Loading the data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(&amp;quot;Sonar&amp;quot;, package = &amp;quot;mlbench&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;train-the-decision-tree&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Train the decision tree&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xgb_fit &amp;lt;- train(Class ~ .,
                 data = Sonar,
                 method = &amp;quot;xgbLinear&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xgb_fit&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## eXtreme Gradient Boosting 
## 
## 208 samples
##  60 predictor
##   2 classes: &amp;#39;M&amp;#39;, &amp;#39;R&amp;#39; 
## 
## No pre-processing
## Resampling: Bootstrapped (25 reps) 
## Summary of sample sizes: 208, 208, 208, 208, 208, 208, ... 
## Resampling results across tuning parameters:
## 
##   lambda  alpha  nrounds  Accuracy   Kappa    
##   0e+00   0e+00   50      0.7954411  0.5856736
##   0e+00   0e+00  100      0.7955067  0.5859968
##   0e+00   0e+00  150      0.7955067  0.5859968
##   0e+00   1e-04   50      0.7931161  0.5807902
##   0e+00   1e-04  100      0.7896880  0.5736899
##   0e+00   1e-04  150      0.7896880  0.5736899
##   0e+00   1e-01   50      0.7974045  0.5899654
##   0e+00   1e-01  100      0.8007978  0.5965433
##   0e+00   1e-01  150      0.8018652  0.5987027
##   1e-04   0e+00   50      0.7936100  0.5817500
##   1e-04   0e+00  100      0.7902008  0.5746993
##   1e-04   0e+00  150      0.7902008  0.5746993
##   1e-04   1e-04   50      0.7916874  0.5777943
##   1e-04   1e-04  100      0.7883283  0.5708511
##   1e-04   1e-04  150      0.7883283  0.5708511
##   1e-04   1e-01   50      0.7974045  0.5899654
##   1e-04   1e-01  100      0.8007978  0.5965433
##   1e-04   1e-01  150      0.8018652  0.5987027
##   1e-01   0e+00   50      0.7937810  0.5824365
##   1e-01   0e+00  100      0.7958099  0.5863334
##   1e-01   0e+00  150      0.7958099  0.5863334
##   1e-01   1e-04   50      0.7953707  0.5854209
##   1e-01   1e-04  100      0.7963228  0.5873658
##   1e-01   1e-04  150      0.7963228  0.5873658
##   1e-01   1e-01   50      0.7987849  0.5923712
##   1e-01   1e-01  100      0.8034709  0.6018293
##   1e-01   1e-01  150      0.8049729  0.6047501
## 
## Tuning parameter &amp;#39;eta&amp;#39; was held constant at a value of 0.3
## Accuracy was used to select the optimal model using the largest value.
## The final values used for the model were nrounds = 150, lambda =
##  0.1, alpha = 0.1 and eta = 0.3.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-feature-importance&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Extract feature importance&lt;/h3&gt;
&lt;p&gt;Since we are using the &lt;code&gt;caret&lt;/code&gt; package we can use the built in function to extract feature importance, or the function from the &lt;code&gt;xgboost&lt;/code&gt; package. We will do both.&lt;/p&gt;
&lt;div id=&#34;caret-feature-importance&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;caret&lt;/code&gt; feature importance&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;caret_imp &amp;lt;- varImp(xgb_fit)
caret_imp&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## xgbLinear variable importance
## 
##   only 20 most important variables shown (out of 60)
## 
##     Overall
## V11 100.000
## V45  26.941
## V16  24.354
## V21  21.665
## V51  18.798
## V4   18.140
## V48  14.366
## V9   12.607
## V31  12.489
## V27  12.347
## V15  11.269
## V34   9.125
## V37   8.805
## V20   8.792
## V52   8.114
## V28   7.162
## V32   5.897
## V55   4.584
## V17   4.490
## V49   4.129&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;xgboost-feature-importance&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;xgboost&lt;/code&gt; feature importance&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xgb_imp &amp;lt;- xgb.importance(feature_names = xgb_fit$finalModel$feature_names,
               model = xgb_fit$finalModel)

head(xgb_imp)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Feature       Gain      Cover  Frequency
## 1:     V11 0.25619824 0.12851517 0.03283582
## 2:     V45 0.06902206 0.04458378 0.03582090
## 3:     V16 0.06239349 0.04163116 0.01492537
## 4:     V21 0.05550596 0.03471532 0.02686567
## 5:     V51 0.04816044 0.04527492 0.05373134
## 6:      V4 0.04647540 0.03484923 0.03880597&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting-feature-importance&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Plotting feature importance&lt;/h3&gt;
&lt;div id=&#34;caret&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;caret&lt;/h4&gt;
&lt;p&gt;You have a few options when it comes to plotting feature importance. You can call plot on the saved object from caret as follows:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(caret_imp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-12-1-plot_xgboost_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(caret_imp) +
  theme_minimal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-12-1-plot_xgboost_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;xgboost&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;code&gt;xgboost&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;You can use the plot functionality from &lt;code&gt;xgboost&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xgb.plot.importance(xgb_imp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-12-1-plot_xgboost_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt; Or use their ggplot feature&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;xgb.ggplot.importance(xgb_imp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-12-1-plot_xgboost_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>[Not so] generic functions</title>
      <link>/post/function-methods/</link>
      <pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/function-methods/</guid>
      <description>

&lt;div id=&#34;TOC&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-jargon&#34;&gt;The Jargon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-generic-method&#34;&gt;The Generic Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-default-method&#34;&gt;The Default Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sf-method&#34;&gt;&lt;code&gt;sf&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tbl_graph-method&#34;&gt;&lt;code&gt;tbl_graph&lt;/code&gt; method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#review-tldr&#34;&gt;Review (tl;dr)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Lately I have been doing more of my spatial analysis work in R with the help of the &lt;code&gt;sf&lt;/code&gt; package. One shapefile I was working with had some horrendously named columns, and naturally, I tried to clean them using the &lt;code&gt;clean_names()&lt;/code&gt; function from the &lt;code&gt;janitor&lt;/code&gt; package. But lo, an egregious error occurred. To this end, I officially filed my complaint as an &lt;a href=&#34;https://github.com/sfirke/janitor/pull/249&#34;&gt;issue&lt;/a&gt;. The solution presented was to &lt;em&gt;simply&lt;/em&gt; create a method for &lt;code&gt;sf&lt;/code&gt; objects.&lt;/p&gt;
&lt;p&gt;Yeah, methods, how tough can those be? Apparently the process isn’t at all difficult. But figuring out the process? That was difficult. This post will explain how I went about the process for converting the &lt;code&gt;clean_names()&lt;/code&gt; function into a &lt;em&gt;generic&lt;/em&gt; (I’ll explain this in a second), and creating a &lt;em&gt;method&lt;/em&gt; for &lt;code&gt;sf&lt;/code&gt; and &lt;code&gt;tbl_graph&lt;/code&gt; objects.&lt;/p&gt;
&lt;div id=&#34;the-jargon&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The Jargon&lt;/h3&gt;
&lt;p&gt;Okay, I want to address the jargon. What the hell is a &lt;em&gt;generic&lt;/em&gt; function, and what is a &lt;em&gt;method&lt;/em&gt;? But first, I want to give a quick tl;dr on what a function is. I define as function as bit of code that takes an input, changes it in some way, and produces an output. Even simpler, a function takes an input and creates an output.&lt;/p&gt;
&lt;div id=&#34;generic-functions&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Generic Functions&lt;/h4&gt;
&lt;p&gt;Now, what is a &lt;em&gt;&lt;strong&gt;generic&lt;/strong&gt;&lt;/em&gt; function? My favorite definition that I’ve seen so far comes from &lt;em&gt;LispWorks Ltd&lt;/em&gt; (their website is a historic landmark, I recommend you give it a look for a reminder of what the internet used to be). They define a &lt;a href=&#34;http://clhs.lisp.se/Body/07_fa.htm&#34;&gt;generic function&lt;/a&gt; as&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a function whose behavior depends on the classes or identities of the arguments supplied to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means that we have to create a function that looks at the class of an object and perform an operation based on the object class. That means if there is &lt;code&gt;&amp;quot;numeric&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;list&amp;quot;&lt;/code&gt; object, they will be treated differently. These are called &lt;code&gt;methods&lt;/code&gt;. Note: you can find the class of an object by using the &lt;code&gt;class()&lt;/code&gt; function on any object.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;methods&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Methods&lt;/h4&gt;
&lt;p&gt;To steal from &lt;em&gt;LispWorks Ltd&lt;/em&gt; again, a &lt;a href=&#34;http://clhs.lisp.se/Body/26_glo_m.htm#method&#34;&gt;method&lt;/a&gt; is&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;part of a generic function which provides information about how that generic function should behave [for] certain classes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means that a method is part of a generic function and has to be defined separately. Imagine we have a generic function called &lt;code&gt;f&lt;/code&gt; with methods for &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;numeric&lt;/code&gt; objects. The way that we would denote these methods is by putting a period after the function name and indicating the type of object the function is to be used on. These would look like &lt;code&gt;f.list&lt;/code&gt; and &lt;code&gt;f.numeric&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;But to save time you can always create a &lt;code&gt;default&lt;/code&gt; method which will be dispatched (used) on any object that it hasn’t been explicitly told how to operate on (by a specific method).&lt;/p&gt;
&lt;p&gt;Now that the intuition of what generic functions and methods R, we can begin the work of actually creating them. This tutorial will walk through the steps I took in changing the &lt;code&gt;clean_names()&lt;/code&gt; from a standard function into a generic function with methods for &lt;code&gt;sf&lt;/code&gt; objects and &lt;code&gt;tbl_graph&lt;/code&gt; objects from the &lt;a href=&#34;https://github.com/r-spatial/sf&#34;&gt;&lt;code&gt;sf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/thomasp85/tidygraph&#34;&gt;&lt;code&gt;tidygraph&lt;/code&gt;&lt;/a&gt; packages respectively.&lt;/p&gt;
&lt;p&gt;A brief overview of the process:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Define the generic function&lt;/li&gt;
&lt;li&gt;Create a default method&lt;/li&gt;
&lt;li&gt;Create additional methods&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A quick note: The code that follows is not identical to that of the package. I will be changing it up to make it simpler to read and understand what is happening.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-generic-method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The Generic Method&lt;/h3&gt;
&lt;p&gt;The first step, as described above, is to create a generic function. Generic functions are made by creating a new function with the body containing only a call to the &lt;code&gt;UseMethod()&lt;/code&gt; function. The only argument to this is the name of your generic function—this should be the same as the name of the function you are making. This tells R that you are creating a generic function. Additionally, you should add any arguments that will be necessary for your function. Here, there are two arguments: &lt;code&gt;dat&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt;. These indicate the data to be cleaned and the preferred style for them to be cleaned according to.&lt;/p&gt;
&lt;p&gt;I am not setting any default values for &lt;code&gt;dat&lt;/code&gt; to make it required, whereas I am setting &lt;code&gt;case&lt;/code&gt; to &lt;code&gt;&amp;quot;snake&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_names &amp;lt;- function(dat, case = &amp;quot;snake&amp;quot;) {
  UseMethod(&amp;quot;clean_names&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have created a generic function. But this function doesn’t know how to run on any given object types. In other words, there are no methods associated with it. To illustrate this try using the &lt;code&gt;clean_names()&lt;/code&gt; function we just defined on objects of different types.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clean_names(1) # numeric 
clean_names(&amp;quot;test&amp;quot;) # character 
clean_names(TRUE) # logical &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;no applicable method for &amp;#39;clean_names&amp;#39; applied to an object of class \&amp;quot;c(&amp;#39;double&amp;#39;, &amp;#39;numeric&amp;#39;)\&amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;no applicable method for &amp;#39;clean_names&amp;#39; applied to an object of class \&amp;quot;character\&amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;no applicable method for &amp;#39;clean_names&amp;#39; applied to an object of class \&amp;quot;logical\&amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of these calls say &lt;code&gt;no applicable method for &#39;x&#39; applied to an object of [class]&lt;/code&gt;. In order to prevent this from happening, we can create a default method. A default method will always be used if the function doesn’t have a method for the provided object type.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-default-method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The Default Method&lt;/h3&gt;
&lt;p&gt;Remember that methods are indicated by writing &lt;code&gt;function.method&lt;/code&gt;. It is also important to note that the &lt;code&gt;method&lt;/code&gt; should indicate an object class. To figure out what class an object is you can use the &lt;code&gt;class()&lt;/code&gt; function. For example &lt;code&gt;class(1)&lt;/code&gt; tells you that the number &lt;code&gt;1&lt;/code&gt; is “numeric”.&lt;/p&gt;
&lt;p&gt;In this next step I want to create a default method that will be used on every object that there isn’t a method explicitly for. To do this I will create a function called &lt;code&gt;clean_names.default&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As background, the &lt;code&gt;clean_names()&lt;/code&gt; function takes a data frame and changes column headers to fit a given style. &lt;code&gt;clean_names()&lt;/code&gt; in the &lt;a href=&#34;https://github.com/sfirke/janitor&#34;&gt;development version&lt;/a&gt; is based on the function &lt;code&gt;make_clean_names()&lt;/code&gt; which takes a character vector and makes each value match a given style (the default is snake, and you should only use snake case because everything else is wrong * sarcasm * ).&lt;/p&gt;
&lt;p&gt;To prevent us from loading the entire &lt;code&gt;janitor&lt;/code&gt; package and overwriting our version of the &lt;code&gt;clean_names()&lt;/code&gt; function, we can import the &lt;code&gt;make_clean_names()&lt;/code&gt; function directly from GitHub by reading the file directly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;source(&amp;quot;https://raw.githubusercontent.com/sfirke/janitor/master/R/make_clean_names.R&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s see how this function works. For this we will use the ugliest character vector I have ever seen from the &lt;a href=&#34;https://github.com/sfirke/janitor/blob/master/tests/testthat/test-clean-names.R&#34;&gt;tests&lt;/a&gt; for &lt;code&gt;clean_names()&lt;/code&gt; (h/t &lt;span class=&#34;citation&#34;&gt;@sfirke&lt;/span&gt; for making this).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ugly_names &amp;lt;- c(
  &amp;quot;sp ace&amp;quot;, &amp;quot;repeated&amp;quot;, &amp;quot;a**^@&amp;quot;, &amp;quot;%&amp;quot;, &amp;quot;*&amp;quot;, &amp;quot;!&amp;quot;,
  &amp;quot;d(!)9&amp;quot;, &amp;quot;REPEATED&amp;quot;, &amp;quot;can\&amp;quot;&amp;#39;t&amp;quot;, &amp;quot;hi_`there`&amp;quot;, &amp;quot;  leading spaces&amp;quot;,
  &amp;quot;€&amp;quot;, &amp;quot;ação&amp;quot;, &amp;quot;Farœ&amp;quot;, &amp;quot;a b c d e f&amp;quot;, &amp;quot;testCamelCase&amp;quot;, &amp;quot;!leadingpunct&amp;quot;,
  &amp;quot;average # of days&amp;quot;, &amp;quot;jan2009sales&amp;quot;, &amp;quot;jan 2009 sales&amp;quot;
)

ugly_names&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;sp ace&amp;quot;            &amp;quot;repeated&amp;quot;          &amp;quot;a**^@&amp;quot;            
##  [4] &amp;quot;%&amp;quot;                 &amp;quot;*&amp;quot;                 &amp;quot;!&amp;quot;                
##  [7] &amp;quot;d(!)9&amp;quot;             &amp;quot;REPEATED&amp;quot;          &amp;quot;can\&amp;quot;&amp;#39;t&amp;quot;          
## [10] &amp;quot;hi_`there`&amp;quot;        &amp;quot;  leading spaces&amp;quot;  &amp;quot;€&amp;quot;                
## [13] &amp;quot;ação&amp;quot;              &amp;quot;Farœ&amp;quot;              &amp;quot;a b c d e f&amp;quot;      
## [16] &amp;quot;testCamelCase&amp;quot;     &amp;quot;!leadingpunct&amp;quot;     &amp;quot;average # of days&amp;quot;
## [19] &amp;quot;jan2009sales&amp;quot;      &amp;quot;jan 2009 sales&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now to see how this function works:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;make_clean_names(ugly_names)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;sp_ace&amp;quot;                 &amp;quot;repeated&amp;quot;              
##  [3] &amp;quot;a&amp;quot;                      &amp;quot;percent&amp;quot;               
##  [5] &amp;quot;x&amp;quot;                      &amp;quot;x_2&amp;quot;                   
##  [7] &amp;quot;d_9&amp;quot;                    &amp;quot;repeated_2&amp;quot;            
##  [9] &amp;quot;cant&amp;quot;                   &amp;quot;hi_there&amp;quot;              
## [11] &amp;quot;leading_spaces&amp;quot;         &amp;quot;x_3&amp;quot;                   
## [13] &amp;quot;acao&amp;quot;                   &amp;quot;faroe&amp;quot;                 
## [15] &amp;quot;a_b_c_d_e_f&amp;quot;            &amp;quot;test_camel_case&amp;quot;       
## [17] &amp;quot;leadingpunct&amp;quot;           &amp;quot;average_number_of_days&amp;quot;
## [19] &amp;quot;jan2009sales&amp;quot;           &amp;quot;jan_2009_sales&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Très magnifique!&lt;/p&gt;
&lt;p&gt;The body of the default method will take column names from a dataframe, clean them, and reassign them. Before we can do this, a dataframe is needed!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create a data frame with 20 columns
test_df &amp;lt;- as_tibble(matrix(sample(100, 20), ncol = 20))

# makes the column names the `ugly_names` vector
names(test_df) &amp;lt;- ugly_names

# print the data frame.
test_df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 20
##   `sp ace` repeated `a**^@`   `%`   `*`   `!` `d(!)9` REPEATED `can&amp;quot;&amp;#39;t`
##      &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
## 1       95        7      17     6     9    11       1       37       69
## # ... with 11 more variables: `hi_\`there\`` &amp;lt;int&amp;gt;, ` leading
## #   spaces` &amp;lt;int&amp;gt;, `€` &amp;lt;int&amp;gt;, ação &amp;lt;int&amp;gt;, Farœ &amp;lt;int&amp;gt;, `a b c d e f` &amp;lt;int&amp;gt;,
## #   testCamelCase &amp;lt;int&amp;gt;, `!leadingpunct` &amp;lt;int&amp;gt;, `average # of days` &amp;lt;int&amp;gt;,
## #   jan2009sales &amp;lt;int&amp;gt;, `jan 2009 sales` &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The process for writing this function is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;take a dataframe&lt;/li&gt;
&lt;li&gt;take the old column names and clean them&lt;/li&gt;
&lt;li&gt;reassign the column names as the new clean names&lt;/li&gt;
&lt;li&gt;return the object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_names.default &amp;lt;- function(dat, case = &amp;quot;snake&amp;quot;) { 
  # retrieve the old names
  old_names &amp;lt;- names(dat)
  # clean the old names
  new_names &amp;lt;- make_clean_names(old_names, case = case)
  # assign the column names as the clean names vector
  names(dat) &amp;lt;- new_names
  # return the data
  return(dat)
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the default method has been defined. Try running the function on our test dataframe!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_names(test_df)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 20
##   sp_ace repeated     a percent     x   x_2   d_9 repeated_2  cant hi_there
##    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
## 1     95        7    17       6     9    11     1         37    69       49
## # ... with 10 more variables: leading_spaces &amp;lt;int&amp;gt;, x_3 &amp;lt;int&amp;gt;, acao &amp;lt;int&amp;gt;,
## #   faroe &amp;lt;int&amp;gt;, a_b_c_d_e_f &amp;lt;int&amp;gt;, test_camel_case &amp;lt;int&amp;gt;,
## #   leadingpunct &amp;lt;int&amp;gt;, average_number_of_days &amp;lt;int&amp;gt;, jan2009sales &amp;lt;int&amp;gt;,
## #   jan_2009_sales &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh, my gorsh. Look at that! We can try replicating this with a named vector to see how the default method dispatched on unknown objects!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create a vector with 20 elements
test_vect &amp;lt;- c(1:20)

# name each element with the ugly_names vector 
names(test_vect) &amp;lt;- ugly_names

# try cleaning!
clean_names(test_vect)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 sp_ace               repeated                      a 
##                      1                      2                      3 
##                percent                      x                    x_2 
##                      4                      5                      6 
##                    d_9             repeated_2                   cant 
##                      7                      8                      9 
##               hi_there         leading_spaces                    x_3 
##                     10                     11                     12 
##                   acao                  faroe            a_b_c_d_e_f 
##                     13                     14                     15 
##        test_camel_case           leadingpunct average_number_of_days 
##                     16                     17                     18 
##           jan2009sales         jan_2009_sales 
##                     19                     20&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks like this default function works super well with named objects! Now, we will broach the problem I started with, &lt;code&gt;sf&lt;/code&gt; objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sf-method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;sf&lt;/code&gt; method&lt;/h3&gt;
&lt;p&gt;This section will go over the process for creating the &lt;code&gt;sf&lt;/code&gt; method. If you have not ever used the &lt;code&gt;sf&lt;/code&gt; package, I suggest you give it a try! It makes dataframe objects with spatial data associated with it. This allows you to perform many of the functions from the &lt;code&gt;tidyverse&lt;/code&gt; to spatial data.&lt;/p&gt;
&lt;p&gt;Before getting into it, I want to create a test object to work with. I will take the &lt;code&gt;test_df&lt;/code&gt; column, create longitude and latitude columns, and then convert it into an &lt;code&gt;sf&lt;/code&gt; object. The details of &lt;code&gt;sf&lt;/code&gt; objects is out of the scope of this post.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sf)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Linking to GEOS 3.6.1, GDAL 2.1.3, PROJ 4.9.3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;test_sf &amp;lt;- test_df %&amp;gt;%
  # create xy columns
  mutate(long = -80, 
         lat = 40) %&amp;gt;% 
  # convert to sf object 
  st_as_sf(coords = c(&amp;quot;long&amp;quot;, &amp;quot;lat&amp;quot;))

# converting geometry column name to poor style
names(test_sf)[21] &amp;lt;- &amp;quot;Geometry&amp;quot;

# telling sf which column is now the geometry
st_geometry(test_sf) &amp;lt;- &amp;quot;Geometry&amp;quot;

test_sf&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 1 feature and 20 fields
## geometry type:  POINT
## dimension:      XY
## bbox:           xmin: -80 ymin: 40 xmax: -80 ymax: 40
## epsg (SRID):    NA
## proj4string:    NA
## # A tibble: 1 x 21
##   `sp ace` repeated `a**^@`   `%`   `*`   `!` `d(!)9` REPEATED `can&amp;quot;&amp;#39;t`
##      &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
## 1       95        7      17     6     9    11       1       37       69
## # ... with 12 more variables: `hi_\`there\`` &amp;lt;int&amp;gt;, ` leading
## #   spaces` &amp;lt;int&amp;gt;, `€` &amp;lt;int&amp;gt;, ação &amp;lt;int&amp;gt;, Farœ &amp;lt;int&amp;gt;, `a b c d e f` &amp;lt;int&amp;gt;,
## #   testCamelCase &amp;lt;int&amp;gt;, `!leadingpunct` &amp;lt;int&amp;gt;, `average # of days` &amp;lt;int&amp;gt;,
## #   jan2009sales &amp;lt;int&amp;gt;, `jan 2009 sales` &amp;lt;int&amp;gt;, Geometry &amp;lt;POINT&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;sf&lt;/code&gt; object has been created. But now how does our default method of the &lt;code&gt;clean_names()&lt;/code&gt; function work on this object? There is only one way to know, try it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clean_names(test_sf)

Error in st_geometry.sf(x) : attr(obj, &amp;quot;sf_column&amp;quot;) does not point to a geometry column. Did you rename it, without setting st_geometry(obj) &amp;lt;- &amp;quot;newname&amp;quot;?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how it fails. &lt;code&gt;sf&lt;/code&gt; noticed that I changed the name of the geometry column without explicitly telling it I did so. Since the geometry column is &lt;em&gt;almost&lt;/em&gt; always the last column of an sf object, we can use the &lt;code&gt;make_clean_names()&lt;/code&gt; function on every column but the last one! To do this we will use the &lt;code&gt;rename_at()&lt;/code&gt; function from &lt;code&gt;dplyr&lt;/code&gt;. This function allows you rename columns based on their name or position, and a function that renames it (in this case, &lt;code&gt;make_clean_names()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;For this example dataset, say I wanted to clean the first column. How would I do that? Note that the first column is called &lt;code&gt;sp ace&lt;/code&gt;. How this works can be seen in a simple example. In the below function call we are using the &lt;code&gt;rename_at()&lt;/code&gt; function (for more, go &lt;a href=&#34;https://dplyr.tidyverse.org/reference/select.html&#34;&gt;here&lt;/a&gt;), selecting the first column name, and renaming it using the &lt;code&gt;make_clean_names()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rename_at(test_df, .vars = vars(1), .funs = make_clean_names)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 20
##   sp_ace repeated `a**^@`   `%`   `*`   `!` `d(!)9` REPEATED `can&amp;quot;&amp;#39;t`
##    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
## 1     95        7      17     6     9    11       1       37       69
## # ... with 11 more variables: `hi_\`there\`` &amp;lt;int&amp;gt;, ` leading
## #   spaces` &amp;lt;int&amp;gt;, `€` &amp;lt;int&amp;gt;, ação &amp;lt;int&amp;gt;, Farœ &amp;lt;int&amp;gt;, `a b c d e f` &amp;lt;int&amp;gt;,
## #   testCamelCase &amp;lt;int&amp;gt;, `!leadingpunct` &amp;lt;int&amp;gt;, `average # of days` &amp;lt;int&amp;gt;,
## #   jan2009sales &amp;lt;int&amp;gt;, `jan 2009 sales` &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how only the first column has been cleaned. It went from &lt;code&gt;sp ace&lt;/code&gt; to &lt;code&gt;sp_ace&lt;/code&gt;. The goal is to replicate this for all columns &lt;em&gt;except&lt;/em&gt; the last one.&lt;/p&gt;
&lt;p&gt;To write the sf method, the above line of code can be adapted to select columns 1 through the number of columns &lt;em&gt;minus&lt;/em&gt; 1 (so geometry isn’t selected). In order to make this work, we need to identify the second to last column—this will be supplied as the ending value of our selected variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_names.sf &amp;lt;- function(dat, case = &amp;quot;snake&amp;quot;) {
  # identify last column that is not geometry
  last_col_to_clean &amp;lt;- ncol(dat) - 1
  # create a new dat object
  dat &amp;lt;- rename_at(dat, 
                   # rename the first up until the second to last
                   .vars = vars(1:last_col_to_clean), 
                   # clean using the make_clean_names
                   .funs = make_clean_names)
  return(dat)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voilà! Our first non-default method has been created. This means that when an &lt;code&gt;sf&lt;/code&gt; object is supplied to our generic function &lt;code&gt;clean_names()&lt;/code&gt; it looks at the class of the object—&lt;code&gt;class(sf_object)&lt;/code&gt;—notices it’s an &lt;code&gt;sf&lt;/code&gt; object, then dispatches (uses) the &lt;code&gt;clean_names.sf()&lt;/code&gt; method instead of the default.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_names(test_sf)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 1 feature and 20 fields
## geometry type:  POINT
## dimension:      XY
## bbox:           xmin: -80 ymin: 40 xmax: -80 ymax: 40
## epsg (SRID):    NA
## proj4string:    NA
## # A tibble: 1 x 21
##   sp_ace repeated     a percent     x   x_2   d_9 repeated_2  cant hi_there
##    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
## 1     95        7    17       6     9    11     1         37    69       49
## # ... with 11 more variables: leading_spaces &amp;lt;int&amp;gt;, x_3 &amp;lt;int&amp;gt;, acao &amp;lt;int&amp;gt;,
## #   faroe &amp;lt;int&amp;gt;, a_b_c_d_e_f &amp;lt;int&amp;gt;, test_camel_case &amp;lt;int&amp;gt;,
## #   leadingpunct &amp;lt;int&amp;gt;, average_number_of_days &amp;lt;int&amp;gt;, jan2009sales &amp;lt;int&amp;gt;,
## #   jan_2009_sales &amp;lt;int&amp;gt;, Geometry &amp;lt;POINT&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we see that it worked exactly as we hoped. Every column but the last has been altered. This allows &lt;code&gt;sf&lt;/code&gt; to name it’s geometry columns whatever it would like without disrupting it.&lt;/p&gt;
&lt;p&gt;Shortly after this addition was added to the package I became aware of another type of object that had problems using &lt;code&gt;clean_names()&lt;/code&gt;. This is the &lt;code&gt;tbl_graph&lt;/code&gt; object from the &lt;code&gt;tidygraph&lt;/code&gt; package from Thomas Lin Pederson.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tbl_graph-method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;tbl_graph&lt;/code&gt; method&lt;/h3&gt;
&lt;p&gt;In issue &lt;a href=&#34;https://github.com/sfirke/janitor/issues/252&#34;&gt;#252&lt;/a&gt; &lt;a href=&#34;https://github.com/gvdr&#34;&gt;@gvdr&lt;/a&gt; noted that calling &lt;code&gt;clean_names()&lt;/code&gt; on a &lt;code&gt;tbl_graph&lt;/code&gt; doesn’t execute. Thankfully &lt;a href=&#34;https://github.com/Tazinho&#34;&gt;@Tazinho&lt;/a&gt; noted that you could easily clean the column headers by using the &lt;code&gt;rename_all()&lt;/code&gt; function from &lt;code&gt;dplyr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here the solution was even easier than above. As a reminder, in order to make the &lt;code&gt;tbl_graph&lt;/code&gt; method, we need to specify the name of the generic followed by the object class.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_names.tbl_graph &amp;lt;- function(dat, case = &amp;quot;snake&amp;quot;) { 
  # rename all columns
  dat &amp;lt;- rename_all(dat, make_clean_names)
  return(dat)
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to test the function, we will need a graph to test it on. This example draws on the example used in the issue.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidygraph)
# create test graph to test clean_names
test_graph &amp;lt;- play_erdos_renyi(0, 0.5) %&amp;gt;% 
  # attach test_df as columns 
  bind_nodes(test_df)

test_graph&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tbl_graph: 1 nodes and 0 edges
## #
## # A rooted tree
## #
## # Node Data: 1 x 20 (active)
##   `sp ace` repeated `a**^@`   `%`   `*`   `!` `d(!)9` REPEATED `can&amp;quot;&amp;#39;t`
##      &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
## 1       95        7      17     6     9    11       1       37       69
## # ... with 11 more variables: `hi_\`there\`` &amp;lt;int&amp;gt;, ` leading
## #   spaces` &amp;lt;int&amp;gt;, `€` &amp;lt;int&amp;gt;, ação &amp;lt;int&amp;gt;, Farœ &amp;lt;int&amp;gt;, `a b c d e f` &amp;lt;int&amp;gt;,
## #   testCamelCase &amp;lt;int&amp;gt;, `!leadingpunct` &amp;lt;int&amp;gt;, `average # of days` &amp;lt;int&amp;gt;,
## #   jan2009sales &amp;lt;int&amp;gt;, `jan 2009 sales` &amp;lt;int&amp;gt;
## #
## # Edge Data: 0 x 2
## # ... with 2 variables: from &amp;lt;int&amp;gt;, to &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we see that there is a graph with only 1 node and 0 edges (relations) with bad column headers (for more, visit the &lt;a href=&#34;https://github.com/thomasp85/tidygraph/&#34;&gt;GitHub page&lt;/a&gt;). Now we can test this as well.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;clean_names(test_graph)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tbl_graph: 1 nodes and 0 edges
## #
## # A rooted tree
## #
## # Node Data: 1 x 20 (active)
##   sp_ace repeated     a percent     x   x_2   d_9 repeated_2  cant hi_there
##    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;
## 1     95        7    17       6     9    11     1         37    69       49
## # ... with 10 more variables: leading_spaces &amp;lt;int&amp;gt;, x_3 &amp;lt;int&amp;gt;, acao &amp;lt;int&amp;gt;,
## #   faroe &amp;lt;int&amp;gt;, a_b_c_d_e_f &amp;lt;int&amp;gt;, test_camel_case &amp;lt;int&amp;gt;,
## #   leadingpunct &amp;lt;int&amp;gt;, average_number_of_days &amp;lt;int&amp;gt;, jan2009sales &amp;lt;int&amp;gt;,
## #   jan_2009_sales &amp;lt;int&amp;gt;
## #
## # Edge Data: 0 x 2
## # ... with 2 variables: from &amp;lt;int&amp;gt;, to &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It worked as anticipated!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;review-tldr&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Review (tl;dr)&lt;/h3&gt;
&lt;p&gt;In the preceding sections we learned what generic functions and methods are. How to create a generic function, a default method, and methods for objects of different classes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;generic function&lt;/strong&gt;: “A generic function is a function whose behavior depends on the classes or identities of the arguments supplied to it”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;generic function method&lt;/strong&gt;: “part of a generic function and which provides information about how that generic function should behave [for] certain classes”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The process to create a function with a method is to:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Create a generic function with:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f_x &amp;lt;- function() { UseMethod(&amp;quot;f_x&amp;quot;) }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Define the default method with:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f_x.default &amp;lt;- function() { do something }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Define object class specific methods with:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f_x.class &amp;lt;- function() { do something else}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;notes&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Notes&lt;/h4&gt;
&lt;p&gt;If you have not yet encountered the &lt;code&gt;janitor&lt;/code&gt; package it will help you tremendously with various data cleaning processes. Clearly, &lt;code&gt;clean_names()&lt;/code&gt; is my favorite function as it helps me enforce my preferred style (and the only). If you are not aware of &lt;em&gt;“proper”&lt;/em&gt; R style, I suggest you read the &lt;a href=&#34;http://adv-r.had.co.nz/Style.html&#34;&gt;style guide&lt;/a&gt; in &lt;a href=&#34;http://adv-r.had.co.nz/&#34;&gt;Advanced R&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While on the subject of &lt;em&gt;Advanced R&lt;/em&gt;, I suggest you read the “Creating new methods and generics” &lt;a href=&#34;http://adv-r.had.co.nz/OO-essentials.html&#34;&gt;section&lt;/a&gt; of it. I struggled comprehending it at first because I didn’t even know what a method was. However, if after reading this you feel like you want more, that’s the place to go.&lt;/p&gt;
&lt;p&gt;I’d like to thank &lt;a href=&#34;https://github.com/sfirke&#34;&gt;@sfirke&lt;/a&gt; for being exceptionally helpful in guiding my contributions to the &lt;code&gt;janitor&lt;/code&gt; package.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>US Representation: Part I</title>
      <link>/post/us-representation-i/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/us-representation-i/</guid>
      <description>


&lt;p&gt;Before the United States created the Constitution, something called the &lt;a href=&#34;https://history.state.gov/milestones/1776-1783/articles&#34;&gt;&lt;em&gt;Articles of Confederation&lt;/em&gt;&lt;/a&gt; defined what the US Government would look like. It was the first attempt at creating some sort of agreement between the 13 original states to form a central government. In the end, the Articles of Confederation made the new central government too weak to accomplish anything. Then, in 1787 representatives from each state met in Philadelphia to entirely scrap the Articles of Confederation in a meeting that became known as the &lt;a href=&#34;https://history.state.gov/milestones/1784-1800/convention-and-ratification&#34;&gt;Constitutional Convention&lt;/a&gt;. They would then end up creating the Constitution of the United States of America which we all know today.&lt;/p&gt;
&lt;p&gt;During this time, there were three main issues at hand. Representatives of the convention sought to give each state enough autonomy to function independently. They engaged in heated debated about how much power each state should be given and eventually, the issue of slavery — (3) how would slaves be counted for tax and representation purposes?&lt;/p&gt;
&lt;p&gt;The debate surrounding how much power (or representation) that would be given to each state in the new government was the source of much rancour at the convention. There were two leading ideas that addressed this problem. One of which was that each state would have an equal say regardless of its physical size or the number of people within it. The other was that each state would have power relative to their total population.&lt;/p&gt;
&lt;p&gt;These ideas were presented as the &lt;a href=&#34;https://en.wikipedia.org/wiki/New_Jersey_Plan&#34;&gt;&lt;em&gt;New Jersey Plan&lt;/em&gt;&lt;/a&gt; and the &lt;a href=&#34;https://en.wikipedia.org/wiki/Virginia_Plan&#34;&gt;&lt;em&gt;Virginia Plan&lt;/em&gt;&lt;/a&gt;. James Madison drafted the Virginia Plan which also would be known as the “large-state-plan” and was intended to introduce proportional representation—effectively giving states with the most people the most power.&lt;/p&gt;
&lt;p&gt;Small states, feeling threatened by this, introduced the New Jersey plan. The New Jersey plan was an attempt to level the playing field between small and big states. The New Jersey plan would give each state 1 vote in the new government and would allow states like Delaware to have as much weight in votes as big states.&lt;/p&gt;
&lt;p&gt;In a move that would be known as the &lt;a href=&#34;https://www.senate.gov/artandhistory/history/minute/A_Great_Compromise.htm&#34;&gt;Great Compromise&lt;/a&gt; (or the Connecticut compromise), the representatives from Connecticut (a medium sized state) suggested that both ideas be put into effect. This idea created what is called a “bicameral legislature”—a legislative (law-making) body with two parts.&lt;/p&gt;
&lt;p&gt;One part of the new government would provide equal representation for each of the states. This became known as the &lt;em&gt;Senate&lt;/em&gt; which today has two representatives for each state. The other part of the new government became the &lt;em&gt;House of Representatives&lt;/em&gt; (also known more generally as “Congress”). This new body gave each state &lt;em&gt;“one [representative] for every Thirty Thousand [people]”&lt;/em&gt;. But as the US population grew so did the number of representatives in Washington DC. Eventually rules had to change to prevent the number of representatives from getting any more out of hand . Today, the House of Representatives has 435 congresspeople (more &lt;a href=&#34;https://en.wikipedia.org/wiki/United_States_congressional_apportionment#Past_increases&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Though the Connecticut compromise was an act of genius, it also implemented one of most reprehensible policies in US history: &lt;em&gt;the 3/5ths compromise&lt;/em&gt;. Slavery was the largest economic driving force in Southern states created by a seemingly endless supply of cost-free labor. Looking at the prospect of proportional representation, large slave owning states wanted each slave to be counted towards their population. For reference slaves composed 43% of the population of South Carolina, 41.6% of Virginia, 35.5% of Georgia, and 32% of North Carolina.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-11-25-representation-i_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;But there is one major catch, slaves were treated as property and not people. They were not given the same “inalienable rights” as everyone else. This was seen as unfair because slaves would not &lt;em&gt;actually&lt;/em&gt; be &lt;em&gt;represented&lt;/em&gt; in congress. If only free people were to be counted, that would punish slave holding states and empower Northern states.&lt;/p&gt;
&lt;p&gt;Eventually representatives of the convention came to a solution, one that still haunts our country until this very day. It was decided that 3 out of every 5 slaves would be counted for representation purposes (called apportionment). This compromise gave Southern states more representative power than their free population actually dictated. This rule stayed in effect until 1865 when the 13th Amendment was ratified.&lt;/p&gt;
&lt;p&gt;This compromise created the government that we have today. It paved the foundation for the Senate and the House of Representatives. The effects of this decision are being seen today. During the time of the Connecticut Compromise the United States was still a fledgling rural nation. Today, we are a leader in industry, play an outsized role in global economics, and we have seen an enormous push to city and suburban areas. This compromise is demonstrating an increasing rural bias in American politics.&lt;/p&gt;
&lt;p&gt;In a following post I will examine the implications of increasing urbanization on governing and legislation in the United States.&lt;/p&gt;
&lt;p&gt;If you still feel like you want more, check out &lt;a href=&#34;https://www.youtube.com/watch?v=kCCmuftyj8A&#34;&gt;this&lt;/a&gt; fun youtube video on constitutional compromises.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing: Letters to a layperson</title>
      <link>/post/introducing-letters-to-a-layperson/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/introducing-letters-to-a-layperson/</guid>
      <description>&lt;p&gt;I have been in the world of academia for nearly five years now. During this time I’ve read countless &lt;em&gt;scholarly&lt;/em&gt; journal articles that I’ve struggled to wrap my head around. The academic language is riddled with obfuscating words like “milieux” and “nexus” which are often used to explain relatively simple concepts in a not so simple language. I’ve had to train myself to understand the academic language and translate it to regular people (layperson) speak.&lt;/p&gt;

&lt;p&gt;The academic dialect is often associated with the &amp;ldquo;elitist media” (see &lt;a href=&#34;https://chomsky.info/199710__/&#34; target=&#34;_blank&#34;&gt;Chomsky&lt;/a&gt;) which has recently been blamed for creating a strong divide in American politics—as we’ve seen since the beginning of the 2016 presidential primaries. Many words, phrases, and ideas have been shrouded by this language barrier.  I have been trying to break down this barrier for myself for years now. I feel like I’ve only made a small dent. I have been trying to educate myself, a layperson, on these phrases and concepts.&lt;/p&gt;

&lt;p&gt;As an undergraduate student I studied sociology and anthropology, but I found that I was enamored with economics, political science, urban theory, data science, psychology, and other disciplines. Across these fields there are identical concepts represented by different words or phrases—an ever frustrating thing. This is a barrier to understanding these fields. You must know certain ideas, words, and histories to understand the content.&lt;/p&gt;

&lt;p&gt;I have been collecting notes on these ideas and often revisit them to remind myself of what they are, what they mean, and why they exist. These notes were created for a myself, a layperson.&lt;/p&gt;

&lt;p&gt;In this series of forthcoming posts, I will write about concepts that I wish I knew better in a language that I can understand. I call this collection of posts &lt;em&gt;Letters To a Layperson&lt;/em&gt;, inspired by the phenomenal book &lt;em&gt;Letters to a Young Contrarian&lt;/em&gt; by Christopher Hitchens.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Letters to a layperson</title>
      <link>/project/letters/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/project/letters/</guid>
      <description>&lt;p&gt;I have been in the world of academia for nearly five years now. During this time I’ve read countless &lt;em&gt;scholarly&lt;/em&gt; journal articles that I’ve struggled to wrap my head around. The academic language is riddled with obfuscating words like “milieux” and “nexus” which are often used to explain relatively simple concepts in a not so simple language. I’ve had to train myself to understand the academic language and translate it to regular people (layperson) speak.&lt;/p&gt;

&lt;p&gt;The academic dialect is often associated with the &amp;ldquo;elitist media” (see &lt;a href=&#34;https://chomsky.info/199710__/&#34; target=&#34;_blank&#34;&gt;Chomsky&lt;/a&gt;) which has recently been blamed for creating a strong divide in American politics—as we’ve seen since the beginning of the 2016 presidential primaries. Many words, phrases, and ideas have been shrouded by this language barrier.  I have been trying to break down this barrier for myself for years now. I feel like I’ve only made a small dent. I have been trying to educate myself, a layperson, on these phrases and concepts.&lt;/p&gt;

&lt;p&gt;As an undergraduate student I studied sociology and anthropology, but I found that I was enamored with economics, political science, urban theory, data science, psychology, and other disciplines. Across these fields there are identical concepts represented by different words or phrases—an ever frustrating thing. This is a barrier to understanding these fields. You must know certain ideas, words, and histories to understand the content.&lt;/p&gt;

&lt;p&gt;I have been collecting notes on these ideas and often revisit them to remind myself of what they are, what they mean, and why they exist. These notes were created for a myself, a layperson.&lt;/p&gt;

&lt;p&gt;In this series of forthcoming posts, I will write about concepts that I wish I knew better in a language that I can understand. I call this collection of posts &lt;em&gt;Letters To a Layperson&lt;/em&gt;, inspired by the phenomenal book &lt;em&gt;Letters to a Young Contrarian&lt;/em&gt; by Christopher Hitchens.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chunking your csv</title>
      <link>/post/write-chunked-csv/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/write-chunked-csv/</guid>
      <description>


&lt;p&gt;Sometimes due to limitations of software, file uploads often have a row limit. I recently encountered this while creating texting campaigns using &lt;a href=&#34;relaytxt.io&#34;&gt;Relay&lt;/a&gt;. Relay is a peer-to-peer texting platform. It has a limitation of 20k contacts per texting campaign. This is a limitation when running a massive Get Out the Vote (GOTV) texting initiative.&lt;/p&gt;
&lt;p&gt;In order to solve this problem, a large csv must be split into multiple csv’s for upload. Though this could be solved with excel and Google Sheets, who wants to labor over that?&lt;/p&gt;
&lt;p&gt;Here I will go through the methodology of writing a csv into multiple. I will use data from the &lt;a href=&#34;https://www.google.com/search?q=quantitative+social+science&amp;amp;oq=quantitative+social+science&amp;amp;aqs=chrome..69i57j69i61j69i65j69i60l2j69i59.5035j0j1&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8&#34;&gt;Quantitative Social Science&lt;/a&gt; book by Kosuke Imai.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

social &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/kosukeimai/qss/master/CAUSALITY/social.csv&amp;quot;)

dim(social)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 305866      6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This dataset has 305k observations and 6 columns. For this example let’s say we wanted to split this into files of 15,000 rows or fewer. We can use the following custom funciton:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;write_csv_chunk &amp;lt;- function(filepath, n, output_name) {
  df &amp;lt;- read_csv(filepath) # 1. read original file
  
  n_files &amp;lt;- ceiling(nrow(df)/n) # 2. identify how many files to make
  
  chunk_starts &amp;lt;- seq(1, n*n_files, by = n) #  3. identify the rown number to start on
  
  for (i in 1:n_files) { # 4. iterate through the csv to write the files
    chunk_end &amp;lt;- n*i # 4a
    df_to_write &amp;lt;- slice(df, chunk_starts[i]:chunk_end) # 4b
    fpath &amp;lt;- paste0(output_name, &amp;quot;_&amp;quot;, i, &amp;quot;.csv&amp;quot;) # 4c
    write_csv(df_to_write,  fpath) # 4d
    message(paste0(fpath, &amp;quot; was written.&amp;quot;)) # 4e
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function has a few steps. Let’s walk through them. The step numbers are commented above.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Read in the csv.&lt;/li&gt;
&lt;li&gt;Identify the number of files that will have to be created.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;This will be the number of rows of the data frame divided by the number of rows we want each file to have. This number will be rounded up to handle a remainder.&lt;/li&gt;
&lt;li&gt;In this case &lt;code&gt;ceiling(nrow(social) / 15000)&lt;/code&gt; is equal to 21.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Identify the row number to begin splitting the dataframe for each file.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;This will be a factor of our &lt;code&gt;n&lt;/code&gt; plus 1, but will never exceed the &lt;code&gt;nrow(df)&lt;/code&gt;,&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;This is the fun part, writing our files. The number of iterations is the number of files.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;4a&lt;/em&gt;: The ending row number is the iteration number multiplied by the number of rows.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;4b&lt;/em&gt;: use &lt;code&gt;slice()&lt;/code&gt; to cute the original data frame into the chunk beginning and chunk end&lt;/li&gt;
&lt;li&gt;&lt;em&gt;4c&lt;/em&gt;: Creating the file paththat will be written.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;4d&lt;/em&gt;: Write the csv!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;4e&lt;/em&gt;: Print a message about the file being printed.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;soc_fpath &amp;lt;- &amp;quot;https://raw.githubusercontent.com/kosukeimai/qss/master/CAUSALITY/social.csv&amp;quot;
write_csv_chunk(filepath = soc_fpath, n = 25000, &amp;quot;../../static/data/chunk_data/social_chunked&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_1.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_2.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_3.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_4.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_5.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_6.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_7.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_8.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_9.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_10.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_11.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_12.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ../../static/data/chunk_data/social_chunked_13.csv was written.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have these files split up, it will be good to know how to get them back into one piece! Check out my blog post on reading multiple csvs in as one data frame &lt;a href=&#34;josiahparry.com/post/read-chunked-csv&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reading Multiple csvs as 1 data frame</title>
      <link>/post/read-chunked-csv/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/read-chunked-csv/</guid>
      <description>


&lt;p&gt;In an earlier &lt;a href=&#34;josiahparry.com/post/write-chunked-csv&#34;&gt;posting&lt;/a&gt; I wrote about having to break a single csv into multiple csvs. In other scenarios one data set maybe provided as multiple a csvs.&lt;/p&gt;
&lt;p&gt;Thankfully &lt;code&gt;purrr&lt;/code&gt; has a beautiful function called &lt;code&gt;map_df()&lt;/code&gt; which will make this into a two liner. This process has essentially 3 steps.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Create a vector of all &lt;code&gt;.csv&lt;/code&gt; files that should be merged together.&lt;/li&gt;
&lt;li&gt;Read each file using &lt;code&gt;readr::read_csv()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Combine each dataframe into one.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;map_df()&lt;/code&gt; maps (applys) a function to each value of an object and produces a dataframe of all outputs.&lt;/p&gt;
&lt;p&gt;For this example I will use the csvs I created in a previous tutorial utilizing a dataset from the Quantitative Social Science book.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get all csv file names 
file_names &amp;lt;- list.files(&amp;quot;../../static/data/chunk_data&amp;quot;, pattern = &amp;quot;\\.csv&amp;quot;, full.names = TRUE)
file_names&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;../../static/data/chunk_data/social_chunked_1.csv&amp;quot; 
##  [2] &amp;quot;../../static/data/chunk_data/social_chunked_10.csv&amp;quot;
##  [3] &amp;quot;../../static/data/chunk_data/social_chunked_11.csv&amp;quot;
##  [4] &amp;quot;../../static/data/chunk_data/social_chunked_12.csv&amp;quot;
##  [5] &amp;quot;../../static/data/chunk_data/social_chunked_13.csv&amp;quot;
##  [6] &amp;quot;../../static/data/chunk_data/social_chunked_2.csv&amp;quot; 
##  [7] &amp;quot;../../static/data/chunk_data/social_chunked_3.csv&amp;quot; 
##  [8] &amp;quot;../../static/data/chunk_data/social_chunked_4.csv&amp;quot; 
##  [9] &amp;quot;../../static/data/chunk_data/social_chunked_5.csv&amp;quot; 
## [10] &amp;quot;../../static/data/chunk_data/social_chunked_6.csv&amp;quot; 
## [11] &amp;quot;../../static/data/chunk_data/social_chunked_7.csv&amp;quot; 
## [12] &amp;quot;../../static/data/chunk_data/social_chunked_8.csv&amp;quot; 
## [13] &amp;quot;../../static/data/chunk_data/social_chunked_9.csv&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ──────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.1.0     ✔ purrr   0.2.5
## ✔ tibble  1.4.2     ✔ dplyr   0.7.8
## ✔ tidyr   0.8.2     ✔ stringr 1.3.1
## ✔ readr   1.2.1     ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ─────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# apply 
all_csvs &amp;lt;- map_df(file_names, read_csv)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )
## Parsed with column specification:
## cols(
##   sex = col_character(),
##   yearofbirth = col_double(),
##   primary2004 = col_double(),
##   messages = col_character(),
##   primary2006 = col_double(),
##   hhsize = col_double()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# preview the data
head(all_csvs)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##   sex    yearofbirth primary2004 messages   primary2006 hhsize
##   &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 male          1941           0 Civic Duty           0      2
## 2 female        1947           0 Civic Duty           0      2
## 3 male          1951           0 Hawthorne            1      3
## 4 female        1950           0 Hawthorne            1      3
## 5 female        1982           0 Hawthorne            1      3
## 6 male          1981           0 Control              0      3&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Boston useR presentation (2018-07-15)</title>
      <link>/project/2018-07-15-user/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/project/2018-07-15-user/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Coursera R-Programming: Week 2 Problems</title>
      <link>/post/tidy-coursera-r-programming/</link>
      <pubDate>Sat, 14 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/tidy-coursera-r-programming/</guid>
      <description>


&lt;p&gt;Over the past several weeks I have been helping students, career professionals, and people of other backgrounds learn R. During this time one this has become apparent, people are teaching the old paradigm of R and avoiding the tidyverse all together.&lt;/p&gt;
&lt;p&gt;I recently had a student reach out to me in need of help with the first programming assignment from the &lt;a href=&#34;https://www.coursera.org/learn/r-programming&#34;&gt;Coursera R-Programming&lt;/a&gt; course (part of the Johns Hopkins Data Science Specialization). This particular student was struggling with combining the her new knowledge of R data types, conditional statements, looping, control statements, scoping, and functions to solve the assignment problem set. I provided her with a walk through of each question in base R, the style of the course. I couldn’t help but empathize with her as I too learned the long way first. However I thought that she shouldn’t be learning the hard way first (see David Robinson’s &lt;a href=&#34;http://varianceexplained.org/r/teach-hard-way/&#34;&gt;blog post&lt;/a&gt;, &lt;em&gt;“Don’t teach students the hard way first”&lt;/em&gt;), she should be learning the effective way.&lt;/p&gt;
&lt;p&gt;In my written response to her, I gave her solutions to her problems in base R and using the tidyverse. Here, I will go over the problems and adress them from a tidy perspective. This will not serve as a full introduction to the tidyverse. For an introduction and a reason why the tidyverse is superior to base R, I leave you with &lt;a href=&#34;http://stat545.com/block009_dplyr-intro.html&#34;&gt;&lt;strong&gt;Stat 545&lt;/strong&gt;: &lt;em&gt;Introduction to dplyr&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The assignment utilizes a directory of data called &lt;code&gt;specdata&lt;/code&gt; which can be downloaded &lt;a href=&#34;https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fspecdata.zip&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;, and describes it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The zip file contains 332 comma-separated-value (CSV) files containing pollution monitoring data for fine particulate matter (PM) air pollution at 332 locations in the United States. Each file contains data from a single monitor and the ID number for each monitor is contained in the file name. For example, data for monitor 200 is contained in the file “200.csv”. Each file contains three variables:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Date&lt;/strong&gt;: the date of the observation in &lt;code&gt;YYYY-MM-DD&lt;/code&gt; format (year-month-day)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sulfate&lt;/strong&gt;: the level of sulfate PM in the air on that date (measured in micrograms per cubic meter)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nitrate&lt;/strong&gt;: the level of nitrate PM in the air on that date (measured in micrograms per cubic meter)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For this programming assignment you will need to unzip this file and create the directory ‘specdata’. Once you have unzipped the zip file, do not make any modifications to the files in the ‘specdata’ directory. In each file you’ll notice that there are many days where either sulfate or nitrate (or both) are missing (coded as NA). This is common with air pollution monitoring data in the United States.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div id=&#34;part-i&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Part I&lt;/h1&gt;
&lt;p&gt;Problem 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write a function named ‘pollutantmean’ that calculates the mean of a pollutant (sulfate or nitrate) across a specified list of monitors. The function ‘pollutantmean’ takes three arguments: ‘directory’, ‘pollutant’, and ‘id’. Given a vector monitor ID numbers, ‘pollutantmean’ reads that monitors’ particulate matter data from the directory specified in the ‘directory’ argument and returns the mean of the pollutant across all of the monitors, ignoring any missing values coded as NA. A prototype of the function is as follows&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt; pollutantmean &amp;lt;- function(directory, pollutant, id = 1:332){
    ## &amp;#39;directory&amp;#39; is a character vector of length 1 indicating
    ## the location of the CSV files
    
    ## &amp;#39;pollutant&amp;#39; is a character vector of length 1 indicating
    ## the name of the pollutant for which we will calculate the 
    ## mean; either &amp;quot;sulfate&amp;quot; or &amp;quot;nitrate&amp;quot;

    ## &amp;#39;id&amp;#39; is an integer vector indicating the monitor ID numbers
    ## to be used

    ## Return the mean of the pollutant across all monitors list
    ## in the &amp;#39;id&amp;#39; vector (ignoring NA values)
    ## NOTE: Do not round the result!
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before we tackle the function, I believe the best approach is to first solve the problem in a regular script. This problem has four clear steps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Identify files in the directory&lt;/li&gt;
&lt;li&gt;Subset files based on provided ID&lt;/li&gt;
&lt;li&gt;Read the files&lt;/li&gt;
&lt;li&gt;Calculate and return the mean on the desired column&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This problem gives us a directory of files from which we need to read in the data based on the provided IDs. For the sake of this walk through we will randomly sample 10 values within the range designated in the problem statement (332).&lt;/p&gt;
&lt;p&gt;We will first generate random IDs, then identify all of the files within the specified directory and obtain their file paths using the &lt;code&gt;list.files()&lt;/code&gt; function. After this we will subset our file list based on the IDs, then iterate over our file list and read in each file as a csv using &lt;code&gt;purrr:map_df()&lt;/code&gt; combined with &lt;code&gt;readr::read_csv()&lt;/code&gt;. Fortunately &lt;code&gt;map_df()&lt;/code&gt; returns a nice and pretty data frame which lets us avoid having to explicitly bind each unique data frame.&lt;/p&gt;
&lt;div id=&#34;identify-files&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Identify Files&lt;/h4&gt;
&lt;p&gt;Here we create 10 random IDs and store them in the &lt;code&gt;ids&lt;/code&gt; variable. Next we use &lt;code&gt;list.files()&lt;/code&gt; to look within the &lt;code&gt;specdata&lt;/code&gt; folder that we downloaded above. Everyone’s path will most likely be different. Be sure to obtain the correct file path—help for &lt;a href=&#34;http://osxdaily.com/2013/06/19/copy-file-folder-path-mac-os-x/&#34;&gt;Mac&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next we identify the files we need based on the sampled &lt;code&gt;ids&lt;/code&gt; and store the subset in the &lt;code&gt;files_filtered&lt;/code&gt; variable. We use the values of the &lt;code&gt;ids&lt;/code&gt; to locate the file paths positionally. For example, ID number 1 is the first file, number 10 is the tenth, etc.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Load our handy dandy functions
library(tidyverse)

# 10 random IDs in ID range
ids &amp;lt;- sample(1:332, 10)

# Identify all files within the directory
files &amp;lt;- list.files(&amp;quot;../../data/specdata&amp;quot;, full.names = TRUE)

# Subset the data
files_filtered &amp;lt;- files[ids]

# View the files to verify
paste(ids, files_filtered)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;302 ../../data/specdata/302.csv&amp;quot; &amp;quot;140 ../../data/specdata/140.csv&amp;quot;
##  [3] &amp;quot;326 ../../data/specdata/326.csv&amp;quot; &amp;quot;324 ../../data/specdata/324.csv&amp;quot;
##  [5] &amp;quot;59 ../../data/specdata/059.csv&amp;quot;  &amp;quot;104 ../../data/specdata/104.csv&amp;quot;
##  [7] &amp;quot;181 ../../data/specdata/181.csv&amp;quot; &amp;quot;147 ../../data/specdata/147.csv&amp;quot;
##  [9] &amp;quot;78 ../../data/specdata/078.csv&amp;quot;  &amp;quot;232 ../../data/specdata/232.csv&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reading-the-files&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Reading the Files&lt;/h4&gt;
&lt;p&gt;Now that we have identified the files that we are going to read in, we can use &lt;code&gt;purrr:map_df()&lt;/code&gt; to apply the &lt;code&gt;readr::read_csv()&lt;/code&gt; function to each value of &lt;code&gt;files_filtered&lt;/code&gt; and return a data frame (hence the &lt;code&gt;_df()&lt;/code&gt; suffix). We supply additional arguments to &lt;code&gt;read_csv()&lt;/code&gt; to ensure that every column is read in properly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Read in the subset of the data. Notice the brackets after files[]
specdata &amp;lt;- map_df(files_filtered, read_csv, 
                   col_types = list(
                     col_date(),
                     col_double(),
                     col_double(),
                     col_integer()
                   ))

glimpse(specdata)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 24,470
## Variables: 4
## $ Date    &amp;lt;date&amp;gt; 2001-01-01, 2001-01-02, 2001-01-03, 2001-01-04, 2001-...
## $ sulfate &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, 4.78, NA, NA, NA, NA, NA, NA, ...
## $ nitrate &amp;lt;dbl&amp;gt; NA, NA, NA, NA, NA, NA, 6.12, NA, NA, NA, NA, NA, NA, ...
## $ ID      &amp;lt;int&amp;gt; 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302,...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we get to utilize some &lt;code&gt;dplyr&lt;/code&gt; magic. Here we take the &lt;code&gt;specdata&lt;/code&gt; object we created from reading in our files, deselct the &lt;code&gt;Date&lt;/code&gt; column, then utilize &lt;code&gt;summarise_if()&lt;/code&gt; to apply the &lt;code&gt;mean()&lt;/code&gt; function to our data. &lt;code&gt;summarise_if()&lt;/code&gt; requires that we provide a logical statement as the first argument. &lt;em&gt;If&lt;/em&gt; (hence the &lt;code&gt;_if()&lt;/code&gt; suffix) the logical statement evaluates to &lt;code&gt;TRUE&lt;/code&gt; on a column then it will apply a list of functions to those columns where the statement evaluated to &lt;code&gt;TRUE&lt;/code&gt;. We can also specify additional arguments to the functions. Here we specify &lt;code&gt;na.rm = TRUE&lt;/code&gt; for handling missing values.&lt;/p&gt;
&lt;p&gt;In this case, we are checking to see if our columns are of the data type &lt;code&gt;double&lt;/code&gt; using the &lt;code&gt;is.double()&lt;/code&gt; function. If you’re wondering why we didn’t use &lt;code&gt;is.numeric()&lt;/code&gt;, it’s because the &lt;code&gt;ID&lt;/code&gt; column is an integer which is considered numeric.&lt;/p&gt;
&lt;p&gt;If we wanted to take the underlying vector of one of the columns, we can also, use &lt;code&gt;dplyr::pull(col_name)&lt;/code&gt;. This will be helpful later when we want to obtain the mean of just one column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Obtain mean nitrate
specdata %&amp;gt;% 
  select(-Date) %&amp;gt;% 
  summarise_if(is.double, mean, na.rm = TRUE) %&amp;gt;% 
  # Pull just the sulfate column
  pull(sulfate)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.539072&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;specdata %&amp;gt;% 
  select(-Date) %&amp;gt;% 
  summarise_if(is.double, mean, na.rm = TRUE) %&amp;gt;% 
  # Pull just the nitrate column
  pull(nitrate)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.604677&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have all of the tools, we can put this together into a single function, which I will call &lt;code&gt;pollutant_mean()&lt;/code&gt; to somewhat adhere—functions should take the name of verbs—to the tidyverse style guide.&lt;/p&gt;
&lt;p&gt;Here we have three arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;directory&lt;/code&gt;: Where to look for the files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pollutant&lt;/code&gt;: Which pollutant (nitrate or sulfate) to evaluate
&lt;ul&gt;
&lt;li&gt;This needs to be a character value unless we want to get into &lt;a href=&#34;https://dplyr.tidyverse.org/articles/programming.html&#34;&gt;tidyeval&lt;/a&gt;, which frankly I will leave to the professionals. But I will provide an alternative solution at the end that doesn’t require quoted &lt;code&gt;pollutant&lt;/code&gt; names.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;: Which monitoring stations we should look at&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Within the function we take everything we did in the above steps but generalize it to a function. We identify the files in the directory provided (&lt;code&gt;specdata&lt;/code&gt;), subset the files positionally based on the provided &lt;code&gt;id&lt;/code&gt; vector, and then iterate over the file names and read them in with &lt;code&gt;map_df()&lt;/code&gt; and &lt;code&gt;read_csv()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next we take our data and calculate the mean on both &lt;code&gt;sulfate&lt;/code&gt; and &lt;code&gt;nitrate&lt;/code&gt; columns. We then &lt;code&gt;pull()&lt;/code&gt; the specified column from the &lt;code&gt;pollutant&lt;/code&gt; argument and then &lt;code&gt;return()&lt;/code&gt; that value.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pollutant_mean &amp;lt;- function(directory, pollutant, id = 1:332) {
  files &amp;lt;- list.files(directory, full.names = TRUE)
  files_filtered &amp;lt;- files[id]
  specdata &amp;lt;- map_df(files_filtered, read_csv, 
                     col_types = list(
                       col_date(),
                       col_double(),
                       col_double(),
                       col_integer()
                     ))
  
  specdata %&amp;gt;% 
    select(-Date) %&amp;gt;% 
    summarise_if(is.double, mean, na.rm = TRUE) %&amp;gt;% 
    pull(pollutant) %&amp;gt;% 
    return()

}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we can test out the function with both types of pollutants and different &lt;code&gt;id&lt;/code&gt; values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pollutant_mean(directory = &amp;quot;../../data/specdata&amp;quot;, pollutant = &amp;quot;sulfate&amp;quot;, id = sample(1:332, 20))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.300254&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#pollutant_mean(&amp;quot;../../data/specdata&amp;quot;, &amp;quot;nitrate&amp;quot;, 2)&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;part-ii&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Part II:&lt;/h1&gt;
&lt;p&gt;Let us continue to the second problem in the problem set.&lt;/p&gt;
&lt;p&gt;Problem 2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write a function that reads a directory full of files and reports the number of completely observed cases in each data file. The function should return a data frame where the first column is the name of the file and the second column is the number of complete cases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The assignment provides an example function format, but I think it to be a bit misleading. So I will go about this in the way I think is best. We will work on creating a function called &lt;code&gt;complete_spec_cases()&lt;/code&gt; which will take only two arguments, &lt;code&gt;directory&lt;/code&gt;, and &lt;code&gt;id&lt;/code&gt;. &lt;code&gt;directory&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; will be used in the the same way as the previous problem.&lt;/p&gt;
&lt;p&gt;For this problem our goal is to identify how many complete cases there are by provided ID. This should be exceptionally simple. We will have to identify our files, subset them, and read them in the same way as before. Next we can identify complete cases by piping our &lt;code&gt;specdata&lt;/code&gt; object to &lt;code&gt;na.omit()&lt;/code&gt; which will remove any row with a missing value. Next, we have to group by the &lt;code&gt;ID&lt;/code&gt; column and pipe our grouped data frame to &lt;code&gt;count()&lt;/code&gt; which will count how many observations there are by group. We will then return this data frame to the user.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;complete_spec_cases &amp;lt;- function(directory, id = 1:332) {

  files &amp;lt;- list.files(directory, full.names = TRUE)
  
  specdata &amp;lt;- map_df(files[id], read_csv,
                     col_types = list(
                       col_date(),
                       col_double(),
                       col_double(),
                       col_integer()
                     ))
  
  complete_specdata &amp;lt;- specdata %&amp;gt;% 
    na.omit() %&amp;gt;% 
    group_by(ID) %&amp;gt;% 
    summarise(nobs = n())
  
  return(complete_specdata)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;complete_spec_cases(&amp;quot;../../data/specdata&amp;quot;, id = sample(1:332, 20))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 19 x 2
##       ID  nobs
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1    11   443
##  2    44   283
##  3    48    62
##  4    77   345
##  5   116   806
##  6   127   428
##  7   171   614
##  8   182   465
##  9   184   816
## 10   198   858
## 11   209   151
## 12   249   230
## 13   272   253
## 14   290    91
## 15   302   937
## 16   306   203
## 17   314   888
## 18   326   215
## 19   327   162&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;div id=&#34;part-iii&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Part III:&lt;/h1&gt;
&lt;p&gt;This final problem is probably the most complicated, but with the method we just used above and with a bit more help from the &lt;code&gt;purrr&lt;/code&gt; and &lt;code&gt;dplyr&lt;/code&gt; packages, we can do this no problem.&lt;/p&gt;
&lt;p&gt;Problem 3:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write a function that takes a directory of data files and a threshold for complete cases and calculates the correlation between sulfate and nitrate for monitor locations where the &lt;em&gt;number of completely observed cases&lt;/em&gt; (on all variables) is greater than the threshold. The function should return a vector of correlations for the monitors that meet the threshold requirement. If no monitors meet the threshold requirement, then the function should return a numeric vector of length 0. A prototype of this function follows:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;Correct &amp;lt;- function(directory, threshold = 0){
    ## &amp;#39;directory&amp;#39; is a character vector of length 1 indicating
    ## the location of the CSV files

    ## &amp;#39;threshold&amp;#39; is a numeric vector of length 1 indicating the
    ## number of completely observed observations (on all
    ## variables) required to compute the correlation between
    ## nitrate and sulfate; the default is 0

    ## Return a numeric vector of correlations
    ## NOTE: Do not round the result!
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let keep this simple. The above statement essentially is asking that we find the correlation between &lt;code&gt;nitrate&lt;/code&gt; and &lt;code&gt;sulfate&lt;/code&gt; for each monitoring station (ID). But there is a catch! Each ID must meet a specified threshold of complete cases, and if none of the monitors meet the requirement the function must return a &lt;code&gt;numeric(0)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The way we will structure this function will be to first read in the data—as we have done twice now, except this time there will be no subsetting of IDs. Then we need to identify the number of complete cases by ID—as we did in problem 2—and identify the stations that meet the threshold requirement. At this point we will use an &lt;code&gt;if&lt;/code&gt; statement to check if we have at least 1 monitoring station that meets our threshold, if we do not, we return the &lt;code&gt;numeric(0)&lt;/code&gt;—there is most likely a more tidy way to do this, but I am not aware. If we have at least 1 monitoring station that meets the specified threshold we will use an &lt;code&gt;inner_join()&lt;/code&gt; to make sure that &lt;code&gt;specdata&lt;/code&gt; contains only those IDs that meet the requirement.&lt;/p&gt;
&lt;p&gt;For the sake of this example, we will continue to use the &lt;code&gt;specdata&lt;/code&gt; object we created in previous examples, and we will set our threshold to &lt;code&gt;100.&lt;/code&gt; Once we identify the stations with the proper number of counts (&lt;code&gt;&amp;gt; 100&lt;/code&gt;), we will store that data frame in an object called &lt;code&gt;id_counts&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;id_counts &amp;lt;- specdata %&amp;gt;% 
    na.omit() %&amp;gt;% 
    group_by(ID) %&amp;gt;% 
    count() %&amp;gt;% 
    filter(n &amp;gt; 100) 
  
  if (nrow(id_counts) &amp;lt; 1) {
    return(numeric(0))
  } else {
    print(&amp;quot;All is well.&amp;quot;)
  }&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;All is well.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  specdata &amp;lt;- id_counts %&amp;gt;% 
    inner_join(specdata, by = &amp;quot;ID&amp;quot;) %&amp;gt;%
    na.omit() 
  
  specdata&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4,138 x 5
## # Groups:   ID [9]
##       ID     n Date       sulfate nitrate
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;date&amp;gt;       &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
##  1    59   445 2004-09-09    2.40   0.383
##  2    59   445 2004-09-12    1.45   0.383
##  3    59   445 2004-09-18    4.75   0.281
##  4    59   445 2004-09-24    9.47   0.623
##  5    59   445 2004-09-30    6.67   0.381
##  6    59   445 2004-10-03    2.90   0.326
##  7    59   445 2004-10-06    4.20   0.351
##  8    59   445 2004-10-09    2.41   0.539
##  9    59   445 2004-10-12    1.61   0.491
## 10    59   445 2004-10-15    1.95   0.306
## # ... with 4,128 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is where it gets kind of funky. Once we have filtered down our data set, we need to calculate the correlations for each ID. The way that we do this is by nesting our data frame on the &lt;code&gt;ID&lt;/code&gt; column. Calling &lt;code&gt;nest(-ID)&lt;/code&gt; allows us to, for each value of ID, create a data frame for just those rows where the &lt;code&gt;ID&lt;/code&gt; is the same. We will then have a new list type column where each value is actually a data frame. Let’s check out what this looks like before we hop into the function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;specdata %&amp;gt;% 
  nest(-ID)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 2
##      ID data              
##   &amp;lt;int&amp;gt; &amp;lt;list&amp;gt;            
## 1    59 &amp;lt;tibble [445 × 4]&amp;gt;
## 2    78 &amp;lt;tibble [275 × 4]&amp;gt;
## 3   104 &amp;lt;tibble [385 × 4]&amp;gt;
## 4   140 &amp;lt;tibble [407 × 4]&amp;gt;
## 5   147 &amp;lt;tibble [302 × 4]&amp;gt;
## 6   181 &amp;lt;tibble [286 × 4]&amp;gt;
## 7   232 &amp;lt;tibble [886 × 4]&amp;gt;
## 8   302 &amp;lt;tibble [937 × 4]&amp;gt;
## 9   326 &amp;lt;tibble [215 × 4]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we know how to nest our data, we need to calculate the correlations for each row (ID value). We will do this by combining &lt;code&gt;mutate()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt;. Here &lt;code&gt;.x&lt;/code&gt; references the data that is within each nested tibble. To learn more about &lt;code&gt;purrr&lt;/code&gt; I recommend the &lt;a href=&#34;http://r4ds.had.co.nz/iteration.html&#34;&gt;chapter&lt;/a&gt; on iteration from &lt;em&gt;R For Data Science&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;After we have done our calculations we undo our nesting using &lt;code&gt;unnest()&lt;/code&gt; on the new column we created, and deselect the &lt;code&gt;data&lt;/code&gt; column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;specdata %&amp;gt;% 
  na.omit() %&amp;gt;% 
    nest(-ID) %&amp;gt;% 
    mutate(correlation = map(data, ~cor(.x$sulfate, .x$nitrate))) %&amp;gt;% 
  unnest(correlation) %&amp;gt;% 
  select(-data)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 2
##      ID correlation
##   &amp;lt;int&amp;gt;       &amp;lt;dbl&amp;gt;
## 1    59     0.0911 
## 2    78     0.00564
## 3   104    -0.129  
## 4   140     0.248  
## 5   147    -0.00120
## 6   181     0.0872 
## 7   232    -0.0745 
## 8   302     0.192  
## 9   326     0.140&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now place these above examples within a new function called &lt;code&gt;pollutant_cor()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pollutant_cor &amp;lt;- function(directory, threshold = 0) {
  files &amp;lt;- list.files(directory, full.names = TRUE)
  specdata &amp;lt;- map_df(files, read_csv, 
                     col_types = list(
                       col_date(),
                       col_double(),
                       col_double(),
                       col_integer()
                     )) %&amp;gt;% na.omit()
  
  id_counts &amp;lt;- specdata %&amp;gt;% 
    group_by(ID) %&amp;gt;% 
    count() %&amp;gt;% 
    filter(n &amp;gt; threshold) 
  
  if (nrow(id_counts) &amp;lt; 1) {
    return(numeric(0))
  }
  
  correlations &amp;lt;- id_counts %&amp;gt;% 
    inner_join(specdata, by = &amp;quot;ID&amp;quot;) %&amp;gt;% 
    nest(-ID) %&amp;gt;% 
    mutate(correlation = map(data, ~cor(.x$sulfate, .x$nitrate))) %&amp;gt;% 
    unnest(correlation)
  
  return(correlations)

  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now test our function against two different thresholds to see how it reacts.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pollutant_cor(&amp;quot;../../data/specdata&amp;quot;, 100)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 254 x 3
##       ID data                 correlation
##    &amp;lt;int&amp;gt; &amp;lt;list&amp;gt;                     &amp;lt;dbl&amp;gt;
##  1     1 &amp;lt;tibble [117 × 4]&amp;gt;       -0.223 
##  2     2 &amp;lt;tibble [1,041 × 4]&amp;gt;     -0.0190
##  3     3 &amp;lt;tibble [243 × 4]&amp;gt;       -0.141 
##  4     4 &amp;lt;tibble [474 × 4]&amp;gt;       -0.0439
##  5     5 &amp;lt;tibble [402 × 4]&amp;gt;       -0.0682
##  6     6 &amp;lt;tibble [228 × 4]&amp;gt;       -0.124 
##  7     7 &amp;lt;tibble [442 × 4]&amp;gt;       -0.0759
##  8     8 &amp;lt;tibble [192 × 4]&amp;gt;       -0.160 
##  9     9 &amp;lt;tibble [275 × 4]&amp;gt;       -0.0868
## 10    10 &amp;lt;tibble [148 × 4]&amp;gt;        0.161 
## # ... with 244 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we set the threshold to 100,000, we should expect a &lt;code&gt;numeric(0)&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pollutant_cor(&amp;quot;../../data/specdata&amp;quot;, 100000)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## numeric(0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It all works!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>geniusR</title>
      <link>/project/geniusr/</link>
      <pubDate>Mon, 12 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/project/geniusr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Introducing geniusR</title>
      <link>/post/introducing-geniusr/</link>
      <pubDate>Sat, 27 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/introducing-geniusr/</guid>
      <description>


&lt;div id=&#34;introducing-geniusr&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introducing geniusR&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;geniusR&lt;/code&gt; enables quick and easy download of song lyrics. The intent behind the package is to be able to perform text based analyses on songs in a tidy[text] format.&lt;/p&gt;
&lt;p&gt;This package was inspired by the release of Kendrick Lamar’s most recent album, &lt;strong&gt;DAMN.&lt;/strong&gt;. As most programmers do, I spent way too long to simplify a task, that being accessing song lyrics. Genius (formerly Rap Genius) is the most widly accessible platform for lyrics.&lt;/p&gt;
&lt;p&gt;The functions in this package enable easy access of individual song lyrics, album tracklists, and lyrics to whole albums.&lt;/p&gt;
&lt;div id=&#34;install-and-load-the-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Install and load the package&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;quot;josiahparry/geniusR&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Load the package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(geniusR)
library(tidyverse) # For manipulation&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;getting-lyrics&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Getting Lyrics&lt;/h1&gt;
&lt;div id=&#34;whole-albums&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Whole Albums&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;genius_album()&lt;/code&gt; allows you to download the lyrics for an entire album in a &lt;code&gt;tidy&lt;/code&gt; format. There are two arguments &lt;code&gt;artists&lt;/code&gt; and &lt;code&gt;album&lt;/code&gt;. Supply the quoted name of artist and the album (if it gives you issues check that you have the album name and artists as specified on &lt;a href=&#34;https://genius.com&#34;&gt;Genius&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This returns a tidy data frame with three columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;: track name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;track_n&lt;/code&gt;: track number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt;: lyrics&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;emotions_math &amp;lt;- genius_album(artist = &amp;quot;Margaret Glaspy&amp;quot;, album = &amp;quot;Emotions and Math&amp;quot;)
emotions_math&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 371 x 3
##    title             track_n text                                  
##    &amp;lt;chr&amp;gt;               &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                                 
##  1 Emotions and Math       1 Oh when I got you by my side          
##  2 Emotions and Math       1 Everything&amp;#39;s alright                  
##  3 Emotions and Math       1 Its just when your gone               
##  4 Emotions and Math       1 I start to snooze the alarm           
##  5 Emotions and Math       1 Cause I stay up until 4 in the morning
##  6 Emotions and Math       1 Counting all the days &amp;#39;til you&amp;#39;re back
##  7 Emotions and Math       1 Shivering in an ice cold bath         
##  8 Emotions and Math       1 Of emotions and math                  
##  9 Emotions and Math       1 Oh it&amp;#39;s a shame                       
## 10 Emotions and Math       1 And I&amp;#39;m to blame                      
## # ... with 361 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;multiple-albums&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Multiple Albums&lt;/h2&gt;
&lt;p&gt;If you wish to download multiple albums from multiple artists, try and keep it tidy and avoid binding rows if you can. We can achieve this in a tidy workflow by creating a tibble with two columns: &lt;code&gt;artist&lt;/code&gt; and &lt;code&gt;album&lt;/code&gt; where each row is an artist and their album. We can then iterate over those columns with &lt;code&gt;purrr:map2()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this example I will extract 3 albums from Kendrick Lamar and Sara Bareilles (two of my favotire musicians). The first step is to create the tibble with artists and album titles.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;albums &amp;lt;-  tibble(
  artist = c(
    rep(&amp;quot;Kendrick Lamar&amp;quot;, 3), 
    rep(&amp;quot;Sara Bareilles&amp;quot;, 3)
    ),
  album = c(
    &amp;quot;Section 80&amp;quot;, &amp;quot;Good Kid, M.A.A.D City&amp;quot;, &amp;quot;DAMN.&amp;quot;,
    &amp;quot;The Blessed Unrest&amp;quot;, &amp;quot;Kaleidoscope Heart&amp;quot;, &amp;quot;Little Voice&amp;quot;
    )
)

albums&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   artist         album                 
##   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;                 
## 1 Kendrick Lamar Section 80            
## 2 Kendrick Lamar Good Kid, M.A.A.D City
## 3 Kendrick Lamar DAMN.                 
## 4 Sara Bareilles The Blessed Unrest    
## 5 Sara Bareilles Kaleidoscope Heart    
## 6 Sara Bareilles Little Voice&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No we can iterate over each row using the &lt;code&gt;map2&lt;/code&gt; function. This allows us to feed each value from the &lt;code&gt;artist&lt;/code&gt; and &lt;code&gt;album&lt;/code&gt; columns to the &lt;code&gt;genius_album()&lt;/code&gt; function. Utilizing a &lt;code&gt;map&lt;/code&gt; call within a &lt;code&gt;dplyr::mutate()&lt;/code&gt; function creates a list column where each value is a &lt;code&gt;tibble&lt;/code&gt; with the data frame from &lt;code&gt;genius_album()&lt;/code&gt;. We will later unnest this.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## We will have an additional artist column that will have to be dropped
album_lyrics &amp;lt;- albums %&amp;gt;% 
  mutate(tracks = map2(artist, album, genius_album))

album_lyrics&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   artist         album                  tracks              
##   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;                  &amp;lt;list&amp;gt;              
## 1 Kendrick Lamar Section 80             &amp;lt;tibble [1,184 × 3]&amp;gt;
## 2 Kendrick Lamar Good Kid, M.A.A.D City &amp;lt;tibble [2,192 × 3]&amp;gt;
## 3 Kendrick Lamar DAMN.                  &amp;lt;tibble [1,077 × 3]&amp;gt;
## 4 Sara Bareilles The Blessed Unrest     &amp;lt;tibble [666 × 3]&amp;gt;  
## 5 Sara Bareilles Kaleidoscope Heart     &amp;lt;tibble [582 × 3]&amp;gt;  
## 6 Sara Bareilles Little Voice           &amp;lt;tibble [577 × 3]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you view this you will see that each value within the &lt;code&gt;tracks&lt;/code&gt; column is &lt;code&gt;&amp;lt;tibble&amp;gt;&lt;/code&gt;. This means that that value is infact another &lt;code&gt;tibble&lt;/code&gt;. We expand this using &lt;code&gt;tidyr::unnest()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Unnest the lyrics to expand 
lyrics &amp;lt;- album_lyrics %&amp;gt;% 
  unnest(tracks) %&amp;gt;%    # Expanding the lyrics 
  arrange(desc(artist)) # Arranging by artist name 

head(lyrics)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
##   artist         album              title track_n text                    
##   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                   
## 1 Sara Bareilles The Blessed Unrest Brave       1 You can be amazing      
## 2 Sara Bareilles The Blessed Unrest Brave       1 You can turn a phrase i…
## 3 Sara Bareilles The Blessed Unrest Brave       1 You can be the outcast  
## 4 Sara Bareilles The Blessed Unrest Brave       1 Or be the backlash of s…
## 5 Sara Bareilles The Blessed Unrest Brave       1 Or you can start speaki…
## 6 Sara Bareilles The Blessed Unrest Brave       1 Nothing&amp;#39;s gonna hurt yo…&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;song-lyrics&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Song Lyrics&lt;/h2&gt;
&lt;div id=&#34;genius_lyrics&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;code&gt;genius_lyrics()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Getting lyrics to a single song is pretty easy. Let’s get in our &lt;strong&gt;ELEMENT.&lt;/strong&gt; and checkout &lt;strong&gt;DNA.&lt;/strong&gt; by &lt;em&gt;Kendrick Lamar&lt;/em&gt;. But first, note that the &lt;code&gt;genius_lyrics()&lt;/code&gt; function takes two main arguments, &lt;code&gt;artist&lt;/code&gt; and &lt;code&gt;song&lt;/code&gt;. Be sure to spell the name of the artist and the song correctly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;DNA &amp;lt;- genius_lyrics(artist = &amp;quot;Kendrick Lamar&amp;quot;, song = &amp;quot;DNA.&amp;quot;)

DNA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 95 x 3
##    title text                                                         line
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;                                                       &amp;lt;int&amp;gt;
##  1 DNA.  I got, I got, I got, I got—                                     1
##  2 DNA.  Loyalty, got royalty inside my DNA                              2
##  3 DNA.  Cocaine quarter piece, got war and peace inside my DNA          3
##  4 DNA.  I got power, poison, pain and joy inside my DNA                 4
##  5 DNA.  I got hustle though, ambition flow inside my DNA                5
##  6 DNA.  I was born like this, since one like this, immaculate conc…     6
##  7 DNA.  I transform like this, perform like this, was Yeshua new w…     7
##  8 DNA.  I don&amp;#39;t contemplate, I meditate, then off your fucking head     8
##  9 DNA.  This that put-the-kids-to-bed                                   9
## 10 DNA.  This that I got, I got, I got, I got—                          10
## # ... with 85 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This returns a &lt;code&gt;tibble&lt;/code&gt; with three columns &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;, and &lt;code&gt;line&lt;/code&gt;. However, you can specifiy additional arguments to control the amount of information to be returned using the &lt;code&gt;info&lt;/code&gt; argument.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;info = &amp;quot;title&amp;quot;&lt;/code&gt; (default): Return the lyrics, line number, and song title.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info = &amp;quot;simple&amp;quot;&lt;/code&gt;: Return just the lyrics and line number.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info = &amp;quot;artist&amp;quot;&lt;/code&gt;: Return the lyrics, line number, and artist.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info = &amp;quot;all&amp;quot;&lt;/code&gt;: Return lyrics, line number, song title, artist.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;tracklists&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tracklists&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;genius_tracklist()&lt;/code&gt;, given an &lt;code&gt;artist&lt;/code&gt; and an &lt;code&gt;album&lt;/code&gt; will return a barebones &lt;code&gt;tibble&lt;/code&gt; with the track title, track number, and the url to the lyrics.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;genius_tracklist(artist = &amp;quot;Basement&amp;quot;, album = &amp;quot;Colourmeinkindness&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
##    title     track_n track_url                                   
##    &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                                       
##  1 Whole           1 https://genius.com/Basement-whole-lyrics    
##  2 Covet           2 https://genius.com/Basement-covet-lyrics    
##  3 Spoiled         3 https://genius.com/Basement-spoiled-lyrics  
##  4 Pine            4 https://genius.com/Basement-pine-lyrics     
##  5 Bad Apple       5 https://genius.com/Basement-bad-apple-lyrics
##  6 Breathe         6 https://genius.com/Basement-breathe-lyrics  
##  7 Control         7 https://genius.com/Basement-control-lyrics  
##  8 Black           8 https://genius.com/Basement-black-lyrics    
##  9 Comfort         9 https://genius.com/Basement-comfort-lyrics  
## 10 Wish           10 https://genius.com/Basement-wish-lyrics&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;nitty-gritty&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Nitty Gritty&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;genius_lyrics()&lt;/code&gt; generates a url to Genius which is fed to &lt;code&gt;genius_url()&lt;/code&gt;, the function that does the heavy lifting of actually fetching lyrics.&lt;/p&gt;
&lt;p&gt;I have not figured out all of the patterns that are used for generating the Genius.com urls, so errors are bound to happen. If &lt;code&gt;genius_lyrics()&lt;/code&gt; returns an error. Try utilizing &lt;code&gt;genius_tracklist()&lt;/code&gt; and &lt;code&gt;genius_url()&lt;/code&gt; together to get the song lyrics.&lt;/p&gt;
&lt;p&gt;For example, say “(No One Knows Me) Like the Piano” by &lt;em&gt;Sampha&lt;/em&gt; wasn’t working in a standard &lt;code&gt;genius_lyrics()&lt;/code&gt; call.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;piano &amp;lt;- genius_lyrics(&amp;quot;Sampha&amp;quot;, &amp;quot;(No One Knows Me) Like the Piano&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could grab the tracklist for the album &lt;em&gt;Process&lt;/em&gt; which the song is from. We could then isolate the url for &lt;em&gt;(No One Knows Me) Like the Piano&lt;/em&gt; and feed that into `genius_url().&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Get the tracklist for 
process &amp;lt;- genius_tracklist(&amp;quot;Sampha&amp;quot;, &amp;quot;Process&amp;quot;)

# Filter down to find the individual song
piano_info &amp;lt;- process %&amp;gt;% 
  filter(title == &amp;quot;(No One Knows Me) Like the Piano&amp;quot;)

# Filter song using string detection
# process %&amp;gt;% 
#  filter(stringr::str_detect(title, coll(&amp;quot;Like the piano&amp;quot;, ignore_case = TRUE)))

piano_url &amp;lt;- piano_info$track_url&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the url, feed it into &lt;code&gt;genius_url()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;genius_url(piano_url, info = &amp;quot;simple&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 13 x 1
##    text                                                                   
##    &amp;lt;chr&amp;gt;                                                                  
##  1 No one knows me like the piano in my mother&amp;#39;s home                     
##  2 You would show me I had something some people call a soul              
##  3 And you dropped out the sky, oh you arrived when I was three years old 
##  4 No one knows me like the piano in my mother&amp;#39;s home                     
##  5 You know I left, I flew the nest                                       
##  6 And you know I won&amp;#39;t be long                                           
##  7 And in my chest you know me best                                       
##  8 And you know I&amp;#39;ll be back home                                         
##  9 An angel by her side, all of the times I knew we couldn&amp;#39;t cope         
## 10 They said that it&amp;#39;s her time, no tears in sight, I kept the feelings c…
## 11 And you took hold of me and never, never, never let me go              
## 12 &amp;#39;Cause no one knows me like the piano in my mother&amp;#39;s home              
## 13 In my mother&amp;#39;s home&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;on-the-internals&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;On the Internals&lt;/h1&gt;
&lt;div id=&#34;generative-functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Generative functions&lt;/h2&gt;
&lt;p&gt;This package works almost entirely on pattern detection. The urls from &lt;em&gt;Genius&lt;/em&gt; are (mostly) easily reproducible (shout out to &lt;a href=&#34;https://twitter.com/CivicAngela&#34;&gt;Angela Li&lt;/a&gt; for pointing this out).&lt;/p&gt;
&lt;p&gt;The two functions that generate urls are &lt;code&gt;gen_song_url()&lt;/code&gt; and &lt;code&gt;gen_album_url()&lt;/code&gt;. To see how the functions work, try feeding an artist and song title to &lt;code&gt;gen_song_url()&lt;/code&gt; and an artist and album title to &lt;code&gt;gen_album_url()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gen_song_url(&amp;quot;Laura Marling&amp;quot;, &amp;quot;Soothing&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;https://genius.com/Laura-Marling-Soothing-lyrics&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gen_album_url(&amp;quot;Daniel Caesar&amp;quot;, &amp;quot;Freudian&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;https://genius.com/albums/Daniel-Caesar/Freudian&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;genius_lyrics()&lt;/code&gt; calls &lt;code&gt;gen_song_url()&lt;/code&gt; and feeds the output to &lt;code&gt;genius_url()&lt;/code&gt; which preforms the scraping.&lt;/p&gt;
&lt;p&gt;Getting lyrics for albums is slightly more involved. It first calls &lt;code&gt;genius_tracklist()&lt;/code&gt; which first calls &lt;code&gt;gen_album_url()&lt;/code&gt; then using the handy package &lt;code&gt;rvest&lt;/code&gt; scrapes the song titles, track numbers, and song lyric urls. Next, the song urls from the output are iterated over and fed to &lt;code&gt;genius_url()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To make this more clear, take a look inside of &lt;code&gt;genius_album()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;genius_album &amp;lt;- function(artist = NULL, album = NULL, info = &amp;quot;simple&amp;quot;) {

  # Obtain tracklist from genius_tracklist
  album &amp;lt;- genius_tracklist(artist, album) %&amp;gt;%

    # Iterate over the url to the song title
    mutate(lyrics = map(track_url, genius_url, info)) %&amp;gt;%

    # Unnest the tibble with lyrics
    unnest(lyrics) %&amp;gt;%
    
    # Deselect the track url
    select(-track_url)


  return(album)
}&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;notes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Notes:&lt;/h3&gt;
&lt;p&gt;As this is my first &lt;em&gt;“package”&lt;/em&gt; there will be many issues. Please submit an issue and I will do my best to attend to it.&lt;/p&gt;
&lt;p&gt;There are already issues of which I am present (the lack of error handling). If you would like to take those on, please go ahead and make a pull request. Please contact me on &lt;a href=&#34;twitter.com/josiahparry&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
