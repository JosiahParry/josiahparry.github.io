<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>genius on Josiah Parry</title>
    <link>/tags/genius/</link>
    <description>Recent content in genius on Josiah Parry</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019</copyright>
    <lastBuildDate>Wed, 08 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/genius/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>genius tutorial</title>
      <link>/post/2019-05-08-genius-learnr-tutorial/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-05-08-genius-learnr-tutorial/</guid>
      <description>Introducing genius You want to start analysing song lyrics, where do you go? There have been music information retrieval papers written on the topic of programmatically extracting lyrics from the web. Dozens of people have gone through the laborious task of scraping song lyrics from websites. Even a recent winner of the Shiny competition scraped lyrics from Genius.com.
I too have been there. Scraping websites is not always the best use of your time.</description>
    </item>
    
    <item>
      <title>genius Plumber API</title>
      <link>/post/genius-api/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/genius-api/</guid>
      <description>get started here
Since I created genius, I’ve wanted to make a version for python. But frankly, that’s a daunting task for me seeing as my python skills are intermediate at best. But recently I’ve been made aware of the package plumber. To put it plainly, plumber takes your R code and makes it accessible via an API.
I thought this would be difficult. I was so wrong.
 Using plumber Plumber works by using roxygen like comments (#*).</description>
    </item>
    
  </channel>
</rss>